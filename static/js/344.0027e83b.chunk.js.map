{"version":3,"file":"static/js/344.0027e83b.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/pieces/Pieces.jsx"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/* eslint-disable array-callback-return */\r\n/* eslint-disable no-loop-func */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport whiteKing from \"../../images/whiteKing.png\"\r\nimport blackKing from \"../../images/blackKing.png\"\r\nimport whiteQueen from \"../../images/whiteQueen.png\"\r\nimport blackQueen from \"../../images/blackQueen.png\"\r\nimport whiteRook from \"../../images/whiteRook.png\"\r\nimport blackRook from \"../../images/blackRook.png\"\r\nimport whiteKnight from \"../../images/whiteKnight.png\"\r\nimport blackKnight from \"../../images/blackKnight.png\"\r\nimport whiteBishop from \"../../images/whiteBishop.png\"\r\nimport blackBishop from \"../../images/blackBishop.png\"\r\nimport whitePawn from \"../../images/whitePawn.png\"\r\nimport blackPawn from \"../../images/blackPawn.png\"\r\n\r\nimport moveSoundFile from \"../../sounds/move.ogg\"\r\nimport captureSoundFile from \"../../sounds/capture.ogg\"\r\nimport checkSoundFile from \"../../sounds/check.ogg\"\r\nimport castlingSoundFile from \"../../sounds/castling.ogg\"\r\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\r\n\r\nimport { useSelector } from \"react-redux\"\r\nimport { useState, useEffect, useRef, useMemo } from \"react\"\r\n\r\nimport store from \"../redux/store\"\r\n\r\nimport \"./pieces.sass\"\r\n\r\nconst Pieces = () => {\r\n    const [pawnPromotes, setPawnPromotes] = useState(\"\")\r\n\r\n    const activePiece = useSelector(state => state.board.activePiece)\r\n    const board = useSelector(state => state.board.board)\r\n    const castlingEnemyMoved = useSelector(state => state.board.castlingEnemyMoved)\r\n    const castlingPlayerMoved = useSelector(state => state.board.castlingPlayerMoved)\r\n    const enemyKingAttacked = useSelector(state => state.board.enemyKingAttacked)\r\n    const gameEnd = useSelector(state => state.board.gameEnd)\r\n    const halfMoveCounter = useSelector(state => state.board.halfMoveCounter)\r\n    const moveCounter = useSelector(state => state.board.moveCounter)\r\n    const moveSquares = useSelector(state => state.board.moveSquares)\r\n    const moveVar = useSelector(state => state.board.moveVar)\r\n    const pawnsFirstMove = useSelector(state => state.board.pawnsFirstMove)  \r\n    const pieceSquare = useSelector(state => state.board.pieceSquare)\r\n    const playerKingAttacked = useSelector(state => state.board.playerKingAttacked)\r\n    const toMove = useSelector(state => state.board.toMove)\r\n\r\n    const sandbox = useSelector(state => state.options.sandbox)\r\n    const color = useSelector(state => state.options.color)\r\n    const options = useSelector(state => state.options.options)\r\n\r\n    // const numbers = useSelector(state => state.behavior.numbers)\r\n    const animations = useSelector(state => state.behavior.animations)\r\n    const sounds = useSelector(state => state.behavior.sounds)\r\n\r\n    const moves = useSelector(state => state.progression.moves)\r\n    const currentMove = useSelector(state => state.progression.currentMove)\r\n    \r\n    let boardEntries = Object.entries(board)\r\n\r\n    let filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\r\n    let filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\r\n    let justEnemyRender = Object.fromEntries(filteredEnemyRender)\r\n    let justEnemyLive = Object.fromEntries(filteredEnemyLive)\r\n    \r\n    let filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\r\n    let filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))\r\n    let justPlayerRender = Object.fromEntries(filteredPlayerRender)\r\n    let justPlayerLive = Object.fromEntries(filteredPlayerLive)\r\n\r\n    let filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\r\n    let filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\r\n    let justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\r\n    let justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\r\n\r\n    let enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\r\n    let playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\r\n    let occupiedSquaresRender =  Object.values(justOccupiedRender).map(a => a = a[0])\r\n\r\n    let enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\r\n    let playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\r\n    let occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\r\n\r\n    const enPassantSquare = useRef([0, \"\"])\r\n\r\n    const pieceSquareForEngine = useRef(1)\r\n    const pieceNewSquare = useRef(1)\r\n    const notInitialRender = useRef(false)\r\n    const checkingPiece = useRef(null)\r\n\r\n    const wasmSupported = typeof WebAssembly === 'object' \r\n        && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\r\n    const stockfish = new Worker(wasmSupported ? 'stockfish.wasm.js' : 'stockfish.js')\r\n\r\n    const playerPiece = useRef(null)\r\n    const playerNewSquareForEngine = useRef(null)\r\n\r\n    const animationSpeed = useRef()\r\n\r\n    const moveSound = new Audio(moveSoundFile)\r\n    const captureSound = new Audio(captureSoundFile)\r\n    const castlingSound = new Audio(castlingSoundFile)\r\n    const checkSound = new Audio(checkSoundFile)\r\n    const gameEndSound = new Audio(gameEndSoundFile)\r\n\r\n    const knightLimits = useRef([[], [], [], []])\r\n\r\n    const whiteBishopMoves = [\r\n        [7, 16],\r\n        [5, 14, 23, 32],\r\n        [3, 12, 21, 30, 39, 48],\r\n        [1, 10, 19, 28, 37, 46, 55, 64],\r\n        [17, 26, 35, 44, 53, 62],\r\n        [33, 42, 51, 60],\r\n        [49, 58],\r\n        [3, 10, 17],\r\n        [5, 12, 19, 26, 33],\r\n        [7, 14, 21, 28, 35, 42, 49],\r\n        [16, 23, 30, 37, 44, 51, 58],\r\n        [32, 39, 46, 53, 60],\r\n        [48, 55, 62]\r\n    ]\r\n\r\n    const blackBishopMoves = [\r\n        [2, 9],\r\n        [4, 11, 18, 25],\r\n        [6, 13, 20, 27, 34, 41],\r\n        [8, 15, 22, 29, 36, 43, 50, 57],\r\n        [24, 31, 38, 45, 52, 59],\r\n        [40, 47, 54, 61],\r\n        [56, 63],\r\n        [6, 15, 24],\r\n        [4, 13, 22, 31, 40],\r\n        [2, 11, 20, 29, 38, 47, 56],\r\n        [9, 18, 27, 36, 45, 54, 63],\r\n        [25, 34, 43, 52, 61],\r\n        [41, 50, 59]\r\n    ]\r\n\r\n    const rookMoves = useRef([[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []])\r\n\r\n    let stringToSend\r\n\r\n    let enemyBishop1 = board.ob1 ? board.ob1[0] : null\r\n    let enemyBishop2 = board.ob2 ? board.ob2[0] : null\r\n    let enemyBishop3 = board.ob3 ? board.ob3[0] : null\r\n    let enemyBishop4 = board.ob4 ? board.ob4[0] : null\r\n    let enemyBishop5 = board.ob5 ? board.ob5[0] : null\r\n    let enemyBishop6 = board.ob6 ? board.ob6[0] : null\r\n    let enemyBishop7 = board.ob7 ? board.ob7[0] : null\r\n    let enemyBishop8 = board.ob8 ? board.ob8[0] : null\r\n    let enemyBishop9 = board.ob9 ? board.ob9[0] : null\r\n    let enemyBishop01 = board.ob01 ? board.ob01[0] : null\r\n\r\n    let enemyKnight1 = board.oh1 ? board.oh1[0] : null\r\n    let enemyKnight2 = board.oh2 ? board.oh2[0] : null\r\n    let enemyKnight3 = board.oh3 ? board.oh3[0] : null\r\n    let enemyKnight4 = board.oh4 ? board.oh4[0] : null\r\n    let enemyKnight5 = board.oh5 ? board.oh5[0] : null\r\n    let enemyKnight6 = board.oh6 ? board.oh6[0] : null\r\n    let enemyKnight7 = board.oh7 ? board.oh7[0] : null\r\n    let enemyKnight8 = board.oh8 ? board.oh8[0] : null\r\n    let enemyKnight9 = board.oh9 ? board.oh9[0] : null\r\n    let enemyKnight01 = board.oh01 ? board.oh01[0] : null\r\n\r\n    let enemyRook1 = board.or1 ? board.or1[0] : null\r\n    let enemyRook2 = board.or2 ? board.or2[0] : null\r\n    let enemyRook3 = board.or3 ? board.or3[0] : null\r\n    let enemyRook4 = board.or4 ? board.or4[0] : null\r\n    let enemyRook5 = board.or5 ? board.or5[0] : null\r\n    let enemyRook6 = board.or6 ? board.or6[0] : null\r\n    let enemyRook7 = board.or7 ? board.or7[0] : null\r\n    let enemyRook8 = board.or8 ? board.or8[0] : null\r\n    let enemyRook9 = board.or9 ? board.or9[0] : null\r\n    let enemyRook01 = board.or01 ? board.or01[0] : null\r\n\r\n    let enemyQueen1\r\n    let enemyQueen2\r\n    let enemyQueen3\r\n    let enemyQueen4\r\n    let enemyQueen5\r\n    let enemyQueen6\r\n    let enemyQueen7\r\n    let enemyQueen8\r\n    let enemyQueen9\r\n\r\n    color === \"white\" ? (enemyQueen1 = board.oqb1 ? board.oqb1[0] : null) \r\n                      : (enemyQueen1 = board.oqw1 ? board.oqw1[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen2 = board.oqb2 ? board.oqb2[0] : null) \r\n                      : (enemyQueen2 = board.oqw2 ? board.oqw2[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen3 = board.oqb3 ? board.oqb3[0] : null) \r\n                      : (enemyQueen3 = board.oqw3 ? board.oqw3[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen4 = board.oqb4 ? board.oqb4[0] : null) \r\n                      : (enemyQueen4 = board.oqw4 ? board.oqw4[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen5 = board.oqb5 ? board.oqb5[0] : null) \r\n                      : (enemyQueen5 = board.oqw5 ? board.oqw5[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen6 = board.oqb6 ? board.oqb6[0] : null) \r\n                      : (enemyQueen6 = board.oqw6 ? board.oqw6[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen7 = board.oqb7 ? board.oqb7[0] : null) \r\n                      : (enemyQueen7 = board.oqw7 ? board.oqw7[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen8 = board.oqb8 ? board.oqb8[0] : null) \r\n                      : (enemyQueen8 = board.oqw8 ? board.oqw8[0] : null)\r\n    \r\n    color === \"white\" ? (enemyQueen9 = board.oqb9 ? board.oqb9[0] : null) \r\n                      : (enemyQueen9 = board.oqw9 ? board.oqw9[0] : null)\r\n\r\n    let enemyKing = board.okw ? board.okw[0] : board.okb[0]\r\n\r\n    let enemyPawn1 = board.op1 ? board.op1[0] : null\r\n    let enemyPawn2 = board.op2 ? board.op2[0] : null\r\n    let enemyPawn3 = board.op3 ? board.op3[0] : null\r\n    let enemyPawn4 = board.op4 ? board.op4[0] : null\r\n    let enemyPawn5 = board.op5 ? board.op5[0] : null\r\n    let enemyPawn6 = board.op6 ? board.op6[0] : null\r\n    let enemyPawn7 = board.op7 ? board.op7[0] : null\r\n    let enemyPawn8 = board.op8 ? board.op8[0] : null\r\n\r\n    let playerBishop1 = board.pb1 ? board.pb1[0] : null\r\n    let playerBishop2 = board.pb2 ? board.pb2[0] : null\r\n    let playerBishop3 = board.pb3 ? board.pb3[0] : null\r\n    let playerBishop4 = board.pb4 ? board.pb4[0] : null\r\n    let playerBishop5 = board.pb5 ? board.pb5[0] : null\r\n    let playerBishop6 = board.pb6 ? board.pb6[0] : null\r\n    let playerBishop7 = board.pb7 ? board.pb7[0] : null\r\n    let playerBishop8 = board.pb8 ? board.pb8[0] : null\r\n    let playerBishop9 = board.pb9 ? board.pb9[0] : null\r\n    let playerBishop01 = board.pb01 ? board.pb01[0] : null\r\n\r\n    let playerKnight1 = board.ph1 ? board.ph1[0] : null\r\n    let playerKnight2 = board.ph2 ? board.ph2[0] : null\r\n    let playerKnight3 = board.ph3 ? board.ph3[0] : null\r\n    let playerKnight4 = board.ph4 ? board.ph4[0] : null\r\n    let playerKnight5 = board.ph5 ? board.ph5[0] : null\r\n    let playerKnight6 = board.ph6 ? board.ph6[0] : null\r\n    let playerKnight7 = board.ph7 ? board.ph7[0] : null\r\n    let playerKnight8 = board.ph8 ? board.ph8[0] : null\r\n    let playerKnight9 = board.ph9 ? board.ph9[0] : null\r\n    let playerKnight01 = board.ph01 ? board.ph01[0] : null\r\n\r\n    let playerRook1 = board.pr1 ? board.pr1[0] : null\r\n    let playerRook2 = board.pr2 ? board.pr2[0] : null\r\n    let playerRook3 = board.pr3 ? board.pr3[0] : null\r\n    let playerRook4 = board.pr4 ? board.pr4[0] : null\r\n    let playerRook5 = board.pr5 ? board.pr5[0] : null\r\n    let playerRook6 = board.pr6 ? board.pr6[0] : null\r\n    let playerRook7 = board.pr7 ? board.pr7[0] : null\r\n    let playerRook8 = board.pr8 ? board.pr8[0] : null\r\n    let playerRook9 = board.pr9 ? board.pr9[0] : null\r\n    let playerRook01 = board.pr01 ? board.pr01[0] : null\r\n\r\n    let playerQueen1\r\n    let playerQueen2\r\n    let playerQueen3\r\n    let playerQueen4\r\n    let playerQueen5\r\n    let playerQueen6\r\n    let playerQueen7\r\n    let playerQueen8\r\n    let playerQueen9\r\n\r\n    color === \"white\" ? (playerQueen1 = board.pqw1 ? board.pqw1[0] : null) \r\n                      : (playerQueen1 = board.pqb1 ? board.pqb1[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen2 = board.pqw2 ? board.pqw2[0] : null) \r\n                      : (playerQueen2 = board.pqb2 ? board.pqb2[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen3 = board.pqw3 ? board.pqw3[0] : null) \r\n                      : (playerQueen3 = board.pqb3 ? board.pqb3[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen4 = board.pqw4 ? board.pqw4[0] : null) \r\n                      : (playerQueen4 = board.pqb4 ? board.pqb4[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen5 = board.pqw5 ? board.pqw5[0] : null) \r\n                      : (playerQueen5 = board.pqb5 ? board.pqb5[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen6 = board.pqw6 ? board.pqw6[0] : null) \r\n                      : (playerQueen6 = board.pqb6 ? board.pqb6[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen7 = board.pqw7 ? board.pqw7[0] : null) \r\n                      : (playerQueen7 = board.pqb7 ? board.pqb7[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen8 = board.pqw8 ? board.pqw8[0] : null) \r\n                      : (playerQueen8 = board.pqb8 ? board.pqb8[0] : null)\r\n    \r\n    color === \"white\" ? (playerQueen9 = board.pqw9 ? board.pqw9[0] : null) \r\n                      : (playerQueen9 = board.pqb9 ? board.pqb9[0] : null)\r\n\r\n    let playerKing = board.pkw ? board.pkw[0] : board.pkb[0]\r\n\r\n    let playerPawn1 = board.pp1 ? board.pp1[0] : null\r\n    let playerPawn2 = board.pp2 ? board.pp2[0] : null\r\n    let playerPawn3 = board.pp3 ? board.pp3[0] : null\r\n    let playerPawn4 = board.pp4 ? board.pp4[0] : null\r\n    let playerPawn5 = board.pp5 ? board.pp5[0] : null\r\n    let playerPawn6 = board.pp6 ? board.pp6[0] : null\r\n    let playerPawn7 = board.pp7 ? board.pp7[0] : null\r\n    let playerPawn8 = board.pp8 ? board.pp8[0] : null\r\n\r\n    const checkedByPlayerArr = useRef([])\r\n    const attackedByPlayerArr = useRef([])\r\n\r\n    const attackedByOpponentArr = useRef([])\r\n    const checkedByOpponentArr = useRef([])\r\n\r\n    const playerHorseSafetyArr = useRef([])\r\n    const enemyHorseSafetyArr = useRef([])\r\n\r\n    const playerKing8StarArr = useRef([])\r\n    const enemyKing8StarArr = useRef([])\r\n\r\n    const protectedByPlayerArr = useRef([])\r\n    const protectedByOpponentArr = useRef([])\r\n\r\n    const playerKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\r\n    const enemyKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\r\n\r\n    let playerKingSpiderSenseArr = useRef([])\r\n    let enemyKingSpiderSenseArr = useRef([])\r\n\r\n    let playerRooks = [playerRook1, \r\n                       playerRook2, \r\n                       playerRook3, \r\n                       playerRook4, \r\n                       playerRook5, \r\n                       playerRook6, \r\n                       playerRook7, \r\n                       playerRook8, \r\n                       playerRook9, \r\n                       playerRook01]\r\n    let playerKnights = [playerKnight1, \r\n                         playerKnight2, \r\n                         playerKnight3, \r\n                         playerKnight4, \r\n                         playerKnight5, \r\n                         playerKnight6, \r\n                         playerKnight7, \r\n                         playerKnight8, \r\n                         playerKnight9, \r\n                         playerKnight01]\r\n    let playerBishops = [playerBishop1, \r\n                         playerBishop2, \r\n                         playerBishop3, \r\n                         playerBishop4, \r\n                         playerBishop5, \r\n                         playerBishop6, \r\n                         playerBishop7, \r\n                         playerBishop8, \r\n                         playerBishop9, \r\n                         playerBishop01]\r\n    let playerQueens = [playerQueen1, \r\n                        playerQueen2, \r\n                        playerQueen3, \r\n                        playerQueen4, \r\n                        playerQueen5, \r\n                        playerQueen6, \r\n                        playerQueen7, \r\n                        playerQueen8, \r\n                        playerQueen9]\r\n    let playerPawns = [playerPawn1, \r\n                       playerPawn2, \r\n                       playerPawn3, \r\n                       playerPawn4, \r\n                       playerPawn5, \r\n                       playerPawn6, \r\n                       playerPawn7, \r\n                       playerPawn8]\r\n\r\n    let enemyRooks = [enemyRook1, \r\n                      enemyRook2, \r\n                      enemyRook3, \r\n                      enemyRook4, \r\n                      enemyRook5, \r\n                      enemyRook6, \r\n                      enemyRook7, \r\n                      enemyRook8, \r\n                      enemyRook9, \r\n                      enemyRook01]\r\n    let enemyKnights = [enemyKnight1, \r\n                        enemyKnight2, \r\n                        enemyKnight3, \r\n                        enemyKnight4, \r\n                        enemyKnight5, \r\n                        enemyKnight6, \r\n                        enemyKnight7, \r\n                        enemyKnight8, \r\n                        enemyKnight9, \r\n                        enemyKnight01]\r\n    let enemyBishops = [enemyBishop1, \r\n                        enemyBishop2, \r\n                        enemyBishop3, \r\n                        enemyBishop4, \r\n                        enemyBishop5, \r\n                        enemyBishop6, \r\n                        enemyBishop7, \r\n                        enemyBishop8, \r\n                        enemyBishop9, \r\n                        enemyBishop01]\r\n    let enemyQueens = [enemyQueen1, \r\n                       enemyQueen2, \r\n                       enemyQueen3, \r\n                       enemyQueen4, \r\n                       enemyQueen5, \r\n                       enemyQueen6, \r\n                       enemyQueen7, \r\n                       enemyQueen8, \r\n                       enemyQueen9]\r\n    let enemyPawns = [enemyPawn1, \r\n                      enemyPawn2, \r\n                      enemyPawn3, \r\n                      enemyPawn4, \r\n                      enemyPawn5, \r\n                      enemyPawn6, \r\n                      enemyPawn7, \r\n                      enemyPawn8]\r\n\r\n    const recordBoard = () => {\r\n        filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\r\n        filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\r\n        justEnemyRender = Object.fromEntries(filteredEnemyRender)\r\n        justEnemyLive = Object.fromEntries(filteredEnemyLive)\r\n\r\n        filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\r\n        filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))        \r\n        justPlayerRender = Object.fromEntries(filteredPlayerRender)\r\n        justPlayerLive = Object.fromEntries(filteredPlayerLive)\r\n\r\n        filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\r\n        filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\r\n        justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\r\n        justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\r\n\r\n        enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\r\n        playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\r\n        occupiedSquaresRender = Object.values(justOccupiedRender).map(a => a = a[0])\r\n\r\n        enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\r\n        playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\r\n        occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\r\n\r\n        kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\r\n        kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\r\n\r\n        attacked(playerRooks, \r\n                 playerKnights,\r\n                 playerBishops, \r\n                 playerQueens, \r\n                 playerPawns, \r\n                 enemySquaresRender, \r\n                 playerSquaresRender, \r\n                 protectedByPlayerArr, \r\n                 true)\r\n        attacked(enemyRooks, \r\n                 enemyKnights, \r\n                 enemyBishops, \r\n                 enemyQueens, \r\n                 enemyPawns, \r\n                 playerSquaresRender, \r\n                 enemySquaresRender, \r\n                 protectedByOpponentArr, \r\n                 true)\r\n\r\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarArr, true)\r\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarArr, true)\r\n\r\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarXrayArr, false)\r\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarXrayArr, false)\r\n\r\n        horseSafety(playerKing, playerSquaresRender, playerHorseSafetyArr)\r\n        horseSafety(enemyKing, enemySquaresRender, enemyHorseSafetyArr)\r\n       \r\n        if (playerKingAttacked) {\r\n            for (let i = 0; i < 4; i++) {\r\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \r\n                    || enemyRooks.some(a => playerKing8StarArr.current[i].includes(a))) {\r\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\r\n                }\r\n            }\r\n            for (let i = 4; i < 8; i++) {\r\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \r\n                    || enemyBishops.some(a => playerKing8StarArr.current[i].includes(a))) {\r\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (enemyKingAttacked) {\r\n            for (let i = 0; i < 4; i++) {\r\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \r\n                    || playerRooks.some(a => enemyKing8StarArr.current[i].includes(a))) {\r\n                    checkingPiece.current = enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\r\n                }\r\n            }\r\n            for (let i = 4; i < 8; i++) {\r\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \r\n                    || playerBishops.some(a => enemyKing8StarArr.current[i].includes(a))) {\r\n                    checkingPiece.current =enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        recordBoard()\r\n\r\n        store.dispatch({\r\n            type: \"recordMoves\",\r\n            payload: JSON.stringify(board)\r\n        })\r\n\r\n        if (!sandbox) {\r\n            stockfish.postMessage('uci')\r\n            stockfish.postMessage('isready')\r\n            stockfish.postMessage('ucinewgame')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        recordBoard()\r\n        checkGameEnd()\r\n    }, [board])\r\n\r\n    useEffect(() => {\r\n        if (notInitialRender.current) {\r\n            const movePiece = setTimeout(() => {\r\n                store.dispatch({\r\n                    type: \"activePiece\",\r\n                    payload: \"\"\r\n                })\r\n\r\n                store.dispatch({\r\n                    type: \"setMoveVar\",\r\n                    payload: [0, 0]\r\n                })\r\n            }, animations === \"none\" ? 0 : 50)\r\n\r\n            const resetPiece = setTimeout(() => {\r\n                store.dispatch({\r\n                    type: \"activePiece\",\r\n                    payload: \"\"\r\n                })\r\n\r\n                store.dispatch({\r\n                    type: \"oldSquare\",\r\n                    payload: null\r\n                })\r\n\r\n                store.dispatch({\r\n                    type: \"newSquare\",\r\n                    payload: null\r\n                })\r\n            }, 150)\r\n\r\n            return () => {\r\n                clearTimeout(movePiece)\r\n                clearTimeout(resetPiece)\r\n            }\r\n        } else {\r\n            notInitialRender.current = true\r\n        }\r\n    }, [JSON.stringify(board)])\r\n\r\n    useEffect(() => {\r\n        if (((color === \"white\" && toMove === \"b\") \r\n            || (color === \"black\" && toMove === \"w\")) \r\n            && !sandbox \r\n            && !pawnPromotes) {\r\n            engineTurn()\r\n        }\r\n    }, [toMove, options])\r\n\r\n    useMemo(() => {\r\n        if (animations === \"fast\") {\r\n            animationSpeed.current = .2\r\n        } else if (animations === \"average\") {\r\n            animationSpeed.current = .5\r\n        } else if (animations === \"slow\") {\r\n            animationSpeed.current = .8\r\n        } else {\r\n            animationSpeed.current = 0\r\n        }\r\n    }, [animations])\r\n\r\n    useMemo(() => {\r\n        for (let i = 1; i < 64; i += 8) {\r\n            knightLimits.current[0].push(i)\r\n            knightLimits.current[1].push(i + 1)\r\n            knightLimits.current[2].push(i + 6)\r\n            knightLimits.current[3].push(i + 7)\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n        for (let i = 1; i < 9; i++) {\r\n            rookMoves.current[0].push(i)\r\n            rookMoves.current[1].push(i + 8)\r\n            rookMoves.current[2].push(i + 16)\r\n            rookMoves.current[3].push(i + 24)\r\n            rookMoves.current[4].push(i + 32)\r\n            rookMoves.current[5].push(i + 40)\r\n            rookMoves.current[6].push(i + 48)\r\n            rookMoves.current[7].push(i + 56)\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n        for (let i = 1; i < 65; i += 8) {\r\n            rookMoves.current[8].push(i)\r\n            rookMoves.current[9].push(i + 1)\r\n            rookMoves.current[10].push(i + 2)\r\n            rookMoves.current[11].push(i + 3)\r\n            rookMoves.current[12].push(i + 4)\r\n            rookMoves.current[13].push(i + 5)\r\n            rookMoves.current[14].push(i + 6)\r\n            rookMoves.current[15].push(i + 7)\r\n        }\r\n    }, [])\r\n\r\n    stockfish.addEventListener('message', function(e) {\r\n        if (/^bestmove/.test(e.data)) {\r\n            const engineOldSquare = e.data.slice(9, 11)\r\n            const engineNewSquare = e.data.slice(11, 13)\r\n            const enginePieceToMove = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[0]\r\n            const enginePieceSquare = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[1][0]\r\n            const engineWhereToMove = boardEntries.filter(([key, value]) => value[1] === engineNewSquare).flat()[1][0]\r\n\r\n            store.dispatch({\r\n                type: \"activePiece\",\r\n                payload: enginePieceToMove\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"oldSquare\",\r\n                payload: enginePieceSquare\r\n            })\r\n\r\n            pieceSquareForEngine.current = enginePieceSquare      \r\n\r\n            if (/^op/.test(enginePieceToMove)) {\r\n                recordOpponentPawnAttacks(engineWhereToMove, checkedByOpponentArr.current)\r\n\r\n                switch (enginePieceToMove) {\r\n                    case \"op1\":\r\n                        enemyPawn1 = engineWhereToMove\r\n                        break\r\n                    case \"op2\":\r\n                        enemyPawn2 = engineWhereToMove\r\n                        break\r\n                    case \"op3\":\r\n                        enemyPawn3 = engineWhereToMove\r\n                        break\r\n                    case \"op4\":\r\n                        enemyPawn4 = engineWhereToMove\r\n                        break\r\n                    case \"op5\":\r\n                        enemyPawn5 = engineWhereToMove\r\n                        break\r\n                    case \"op6\":\r\n                        enemyPawn6 = engineWhereToMove\r\n                        break\r\n                    case \"op7\":\r\n                        enemyPawn7 = engineWhereToMove\r\n                        break\r\n                    case \"op8\":\r\n                        enemyPawn8 = engineWhereToMove\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n\r\n                if (e.data.split(\" \")[1].length === 5) {\r\n                    if (e.data.split(\" \")[1].slice(4) === \"q\") {\r\n                        promotePawn(enginePieceToMove, \"oq\", engineWhereToMove)\r\n                    }\r\n                    if (e.data.split(\" \")[1].slice(4) === \"r\") {\r\n                        promotePawn(enginePieceToMove, \"or\", engineWhereToMove)\r\n                    }\r\n                    if (e.data.split(\" \")[1].slice(4) === \"b\") {\r\n                        promotePawn(enginePieceToMove, \"ob\", engineWhereToMove)\r\n                    }\r\n                    if (e.data.split(\" \")[1].slice(4) === \"k\") {\r\n                        promotePawn(enginePieceToMove, \"oh\", engineWhereToMove)\r\n                    }\r\n                }\r\n\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n\r\n                enemyPawns = [enemyPawn1, \r\n                              enemyPawn2, \r\n                              enemyPawn3, \r\n                              enemyPawn4, \r\n                              enemyPawn5, \r\n                              enemyPawn6, \r\n                              enemyPawn7, \r\n                              enemyPawn8]\r\n\r\n                movePawn(engineWhereToMove, enginePieceToMove)\r\n            } \r\n            \r\n            if (/^ob/.test(enginePieceToMove)) {\r\n                checkArrays(whiteBishopMoves, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n                checkArrays(blackBishopMoves, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n                \r\n                switch (enginePieceToMove) {\r\n                    case \"ob1\":\r\n                        enemyBishop1 = engineWhereToMove\r\n                        break;\r\n                    case \"ob2\":\r\n                        enemyBishop2 = engineWhereToMove\r\n                        break;\r\n                    case \"ob3\":\r\n                        enemyBishop3 = engineWhereToMove\r\n                        break;\r\n                    case \"ob4\":\r\n                        enemyBishop4 = engineWhereToMove\r\n                        break;\r\n                    case \"ob5\":\r\n                        enemyBishop5 = engineWhereToMove\r\n                        break;\r\n                    case \"ob6\":\r\n                        enemyBishop6 = engineWhereToMove\r\n                        break;\r\n                    case \"ob7\":\r\n                        enemyBishop7 = engineWhereToMove\r\n                        break;\r\n                    case \"ob8\":\r\n                        enemyBishop8 = engineWhereToMove\r\n                        break;\r\n                    case \"ob9\":\r\n                        enemyBishop9 = engineWhereToMove\r\n                        break;\r\n                    case \"ob01\":\r\n                        enemyBishop01 = engineWhereToMove\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n\r\n                enemyBishops = [enemyBishop1, \r\n                                enemyBishop2, \r\n                                enemyBishop3, \r\n                                enemyBishop4, \r\n                                enemyBishop5, \r\n                                enemyBishop6, \r\n                                enemyBishop7, \r\n                                enemyBishop8, \r\n                                enemyBishop9, \r\n                                enemyBishop01]\r\n\r\n                moveBishop(engineWhereToMove, enginePieceToMove)\r\n            } \r\n            \r\n            if (/^oh/.test(enginePieceToMove)) {\r\n                recordKnightMoves(engineWhereToMove, checkedByOpponentArr.current, enemySquaresLive)\r\n\r\n                switch (enginePieceToMove) {\r\n                    case \"oh1\":\r\n                        enemyKnight1 = engineWhereToMove\r\n                        break;\r\n                    case \"oh2\":\r\n                        enemyKnight2 = engineWhereToMove\r\n                        break;\r\n                    case \"oh3\":\r\n                        enemyKnight3 = engineWhereToMove\r\n                        break;\r\n                    case \"oh4\":\r\n                        enemyKnight4 = engineWhereToMove\r\n                        break;\r\n                    case \"oh5\":\r\n                        enemyKnight5 = engineWhereToMove\r\n                        break;\r\n                    case \"oh6\":\r\n                        enemyKnight6 = engineWhereToMove\r\n                        break;\r\n                    case \"oh7\":\r\n                        enemyKnight7 = engineWhereToMove\r\n                        break;\r\n                    case \"oh8\":\r\n                        enemyKnight8 = engineWhereToMove\r\n                        break;\r\n                    case \"oh9\":\r\n                        enemyKnight9 = engineWhereToMove\r\n                        break;\r\n                    case \"oh01\":\r\n                        enemyKnight01 = engineWhereToMove\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n\r\n                enemyKnights = [enemyKnight1, \r\n                                enemyKnight2, \r\n                                enemyKnight3, \r\n                                enemyKnight4, \r\n                                enemyKnight5, \r\n                                enemyKnight6, \r\n                                enemyKnight7, \r\n                                enemyKnight8, \r\n                                enemyKnight9, \r\n                                enemyKnight01]\r\n\r\n                moveKnight(engineWhereToMove, enginePieceToMove)\r\n            } \r\n            \r\n            if (/^or/.test(enginePieceToMove)) {\r\n                checkArrays(rookMoves.current, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n\r\n                switch (enginePieceToMove) {\r\n                    case \"or1\":\r\n                        enemyRook1 = engineWhereToMove\r\n                        break;\r\n                    case \"or2\":\r\n                        enemyRook2 = engineWhereToMove\r\n                        break;\r\n                    case \"or3\":\r\n                        enemyRook3 = engineWhereToMove\r\n                        break;\r\n                    case \"or4\":\r\n                        enemyRook4 = engineWhereToMove\r\n                        break;\r\n                    case \"or5\":\r\n                        enemyRook5 = engineWhereToMove\r\n                        break;\r\n                    case \"or6\":\r\n                        enemyRook6 = engineWhereToMove\r\n                        break;\r\n                    case \"or7\":\r\n                        enemyRook7 = engineWhereToMove\r\n                        break;\r\n                    case \"or8\":\r\n                        enemyRook8 = engineWhereToMove\r\n                        break;\r\n                    case \"or9\":\r\n                        enemyRook9 = engineWhereToMove\r\n                        break;\r\n                    case \"or01\":\r\n                        enemyRook01 = engineWhereToMove\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n                \r\n                enemyRooks = [enemyRook1, \r\n                              enemyRook2, \r\n                              enemyRook3, \r\n                              enemyRook4, \r\n                              enemyRook5, \r\n                              enemyRook6, \r\n                              enemyRook7, \r\n                              enemyRook8, \r\n                              enemyRook9, \r\n                              enemyRook01]\r\n\r\n                moveRook(engineWhereToMove, enginePieceToMove)\r\n            } \r\n            \r\n            if (/^oq/.test(enginePieceToMove)) {\r\n                checkArrays(whiteBishopMoves, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n                checkArrays(blackBishopMoves, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n                checkArrays(rookMoves.current, \r\n                            engineWhereToMove, \r\n                            checkedByOpponentArr.current, \r\n                            enemySquaresLive, \r\n                            playerSquaresLive, \r\n                            true, \r\n                            true)\r\n\r\n                switch (enginePieceToMove) {\r\n                    case \"oqw1\": case \"oqb1\":\r\n                        enemyQueen1 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw2\": case \"oqb2\":\r\n                        enemyQueen2 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw3\": case \"oqb3\":\r\n                        enemyQueen3 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw4\": case \"oqb4\":\r\n                        enemyQueen4 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw5\": case \"oqb5\":\r\n                        enemyQueen5 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw6\": case \"oqb6\":\r\n                        enemyQueen6 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw7\": case \"oqb7\":\r\n                        enemyQueen7 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw8\": case \"oqb8\":\r\n                        enemyQueen8 = engineWhereToMove\r\n                        break;\r\n                    case \"oqw9\": case \"oqb9\":\r\n                        enemyQueen9 = engineWhereToMove\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n\r\n                enemyQueens = [enemyQueen1, \r\n                               enemyQueen2, \r\n                               enemyQueen3, \r\n                               enemyQueen4, \r\n                               enemyQueen5, \r\n                               enemyQueen6, \r\n                               enemyQueen7, \r\n                               enemyQueen8, \r\n                               enemyQueen9]\r\n\r\n                moveQueen(engineWhereToMove, enginePieceToMove)\r\n            } \r\n            \r\n            if (/^ok/.test(enginePieceToMove)) {\r\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\r\n\r\n                moveKing(engineWhereToMove, enginePieceToMove)\r\n                \r\n                kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\r\n            }\r\n        }\r\n    })\r\n\r\n    const engineTurn = () => {\r\n        encode()\r\n\r\n        let string = `position fen ${stringToSend} moves ${playerPiece.current}${playerNewSquareForEngine.current}`\r\n\r\n        if (moves.length === 1) {\r\n            setTimeout(() => {\r\n                stockfish.postMessage(\"position startpos\")\r\n                stockfish.postMessage(\"go movetime 1000\")\r\n            }, 1000)\r\n        } else {\r\n            stockfish.postMessage(string)\r\n            stockfish.postMessage(\"go movetime 1000\")\r\n        }\r\n    }\r\n\r\n    const encode = () => {\r\n        const fenEncode = (arr) => {\r\n            switch (arr[0]) {\r\n                case \"or1\": case \"or2\": case \"or3\": case \"or4\": case \"or5\": \r\n                case \"or6\": case \"or7\": case \"or8\": case \"or9\": case \"or01\": \r\n                    if (color === \"white\") {\r\n                        return arr = \"r\"\r\n                    } else {\r\n                        return arr = \"R\"\r\n                    }\r\n                case \"oh1\": case \"oh2\": case \"oh3\": case \"oh4\": case \"oh5\": \r\n                case \"oh6\": case \"oh7\": case \"oh8\": case \"oh9\": case \"oh01\": \r\n                    if (color === \"white\") {\r\n                        return arr = \"n\"\r\n                    } else {\r\n                        return arr = \"N\"\r\n                    }\r\n                case \"ob1\": case \"ob2\": case \"ob3\": case \"ob4\": case \"ob5\": \r\n                case \"ob6\": case \"ob7\": case \"ob8\": case \"ob9\": case \"ob01\": \r\n                    if (color === \"white\") {\r\n                        return arr = \"b\"\r\n                    } else {\r\n                        return arr = \"B\"\r\n                    }\r\n                case \"oqw1\": case \"oqb1\": case \"oqw2\": case \"oqb2\": case \"oqw3\": case \"oqb3\": \r\n                case \"oqw4\": case \"oqb4\": case \"oqb9\": case \"oqw5\": case \"oqb5\": case \"oqw6\": \r\n                case \"oqb6\": case \"oqw7\": case \"oqb7\": case \"oqw8\": case \"oqb8\": case \"oqw9\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"q\"\r\n                    } else {\r\n                        return arr = \"Q\"\r\n                    }\r\n                case \"okw\": case \"okb\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"k\"\r\n                    } else {\r\n                        return arr = \"K\"\r\n                    }\r\n                case \"op1\": case \"op2\": case \"op3\": case \"op4\": \r\n                case \"op5\": case \"op6\": case \"op7\": case \"op8\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"p\"\r\n                    } else {\r\n                        return arr = \"P\"\r\n                    }\r\n                case \"pr1\": case \"pr2\": case \"pr3\": case \"pr4\": case \"pr5\": \r\n                case \"pr6\": case \"pr7\": case \"pr8\": case \"pr9\": case \"pr01\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"R\"\r\n                    } else {\r\n                        return arr = \"r\"\r\n                    }\r\n                case \"ph1\": case \"ph2\": case \"ph3\": case \"ph4\": case \"ph5\": \r\n                case \"ph6\": case \"ph7\": case \"ph8\": case \"ph9\": case \"ph01\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"N\"\r\n                    } else {\r\n                        return arr = \"n\"\r\n                    }\r\n                case \"pb1\": case \"pb2\": case \"pb3\": case \"pb4\": case \"pb5\": \r\n                case \"pb6\": case \"pb7\": case \"pb8\": case \"pb9\": case \"pb01\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"B\"\r\n                    } else {\r\n                        return arr = \"b\"\r\n                    }\r\n                case \"pqw1\": case \"pqb1\": case \"pqw2\": case \"pqb2\": case \"pqw3\": case \"pqb3\": \r\n                case \"pqw4\": case \"pqb4\": case \"pqb9\": case \"pqw5\": case \"pqb5\": case \"pqw6\": \r\n                case \"pqb6\": case \"pqw7\": case \"pqb7\": case \"pqw8\": case \"pqb8\": case \"pqw9\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"Q\"\r\n                    } else {\r\n                        return arr = \"q\"\r\n                    }\r\n                case \"pkw\": case \"pkb\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"K\"\r\n                    } else {\r\n                        return arr = \"k\"\r\n                    }\r\n                case \"pp1\": case \"pp2\": case \"pp3\": case \"pp4\": \r\n                case \"pp5\": case \"pp6\": case \"pp7\": case \"pp8\":\r\n                    if (color === \"white\") {\r\n                        return arr = \"P\"\r\n                    } else {\r\n                        return arr = \"p\"\r\n                    }\r\n                default:\r\n                    return arr = 1\r\n            }\r\n        }\r\n\r\n        const fen = boardEntries.map(a => fenEncode(a))\r\n\r\n        let fenArrays = [[], [], [], [], [], [], [], []]\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = i * 8; j < i * 8 + 8; j++) {\r\n                fenArrays[i].push(fen[j])\r\n            }\r\n        }\r\n\r\n        const customReducer = (arr) => {\r\n            if (arr.includes(1)) {\r\n                let temp = 0\r\n                let reducedArr = 0\r\n\r\n                for (let elem of arr) {\r\n                    if (typeof elem === \"number\") {\r\n                        temp += elem\r\n                    } else {\r\n                        reducedArr += temp\r\n                        temp = 0\r\n                        reducedArr += elem\r\n                    }\r\n                }\r\n\r\n                reducedArr += temp\r\n\r\n                if (typeof reducedArr === \"number\") {\r\n                    return reducedArr\r\n                } else {\r\n                    return reducedArr.split(\"\").filter(a => a !== \"0\").join(\"\")\r\n                }\r\n            } else {\r\n                return arr.join(\"\")\r\n            }\r\n        }\r\n\r\n        fenArrays = fenArrays.map(a => customReducer(a))\r\n\r\n        let fenString = fenArrays.join(\"/\")\r\n\r\n        fenString += ` ${toMove} `\r\n\r\n        if (castlingPlayerMoved.pk \r\n            && castlingPlayerMoved.pr1 \r\n            && castlingPlayerMoved.pr2) {\r\n            if (color === \"white\") {\r\n                fenString += \"KQ\"\r\n            } else {\r\n                fenString += \"kq\"\r\n            }\r\n        }\r\n\r\n        if (castlingPlayerMoved.pk \r\n            && castlingPlayerMoved.pr1 \r\n            && !castlingPlayerMoved.pr2) {\r\n            if (color === \"white\") {\r\n                fenString += \"Q\"\r\n            } else {\r\n                fenString += \"q\"\r\n            }\r\n        }\r\n\r\n        if (castlingPlayerMoved.pk \r\n            && !castlingPlayerMoved.pr1 \r\n            && castlingPlayerMoved.pr2) {\r\n            if (color === \"white\") {\r\n                fenString += \"K\"\r\n            } else {\r\n                fenString += \"k\"\r\n            }\r\n        }\r\n\r\n        if (castlingEnemyMoved.ok \r\n            && castlingEnemyMoved.or1 \r\n            && castlingEnemyMoved.or2) {\r\n            if (color === \"white\") {\r\n                fenString += \"kq \"\r\n            } else {\r\n                fenString += \"KQ \"\r\n            }\r\n        }\r\n\r\n        if (castlingEnemyMoved.ok \r\n            && castlingEnemyMoved.or1 \r\n            && !castlingEnemyMoved.or2) {\r\n            if (color === \"white\") {\r\n                fenString += \"q \"\r\n            } else {\r\n                fenString += \"Q \"\r\n            }\r\n        }\r\n\r\n        if (castlingEnemyMoved.ok \r\n            && !castlingEnemyMoved.or1 \r\n            && castlingEnemyMoved.or2) {\r\n            if (color === \"white\") {\r\n                fenString += \"k \"\r\n            } else {\r\n                fenString += \"K \"\r\n            }\r\n        }\r\n\r\n        if (enPassantSquare.current[0]) {\r\n            fenString += boardEntries.filter(([key, value]) => value[0] === enPassantSquare.current[0]).flat()[1][1]\r\n        } else {\r\n            fenString += \"-\"\r\n        }\r\n        \r\n        fenString += ` ${halfMoveCounter} `\r\n\r\n        fenString += moveCounter\r\n\r\n        stringToSend = fenString\r\n    }\r\n\r\n    const combThroughSubArrayPlus = (index, subArr, arrResult, ownArr, oppArr, exclude) => {\r\n        if (subArr.includes(index)) {\r\n            for (let j = index + 1; j <= Math.max(...subArr); j++) {\r\n                if (subArr.includes(j)) {\r\n                    if (ownArr.includes(j) && exclude) {\r\n                        break\r\n                    } else if (oppArr.includes(j)) {\r\n                        arrResult.push(j)\r\n                        break\r\n                    } else {\r\n                        arrResult.push(j)\r\n                    }\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    const combThroughSubArrayMinus = (i, subArr, arrResult, ownArr, oppArr, exclude) => {\r\n        if (subArr.includes(i)) {\r\n            for (let j = i - 1; j >= Math.min(...subArr); j--) {\r\n                if (subArr.includes(j)) {\r\n                    if (ownArr.includes(j) && exclude) {\r\n                        break\r\n                    } else if (oppArr.includes(j)) {\r\n                        arrResult.push(j)\r\n                        break\r\n                    } else {\r\n                        arrResult.push(j)\r\n                    }\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    const horseSafety = (king, squares, arrResult) => {\r\n        let arr = []\r\n\r\n        recordKnightMoves(king, arr, squares)\r\n\r\n        arrResult.current = arr\r\n    }\r\n\r\n    const king8Star = (index, ownSquares, oppSquares, arrRes, boolean) => {\r\n        let arr = [[], [], [], [], [], [], [], []]\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[0], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[1], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        for (let i = 8; i < 16; i++) {\r\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[2], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[3], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        for (let i = 7; i < 13; i++) {\r\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        for (let i = 7; i < 13; i++) {\r\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\r\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\r\n        }\r\n\r\n        arrRes.current = arr\r\n    }\r\n\r\n    const kingSpiderSense = (king, ownArr, oppArr, arrRes) => {\r\n        let arr = [[], []]\r\n\r\n        checkArrays(whiteBishopMoves, king, arr[0], ownArr, oppArr, true, true)\r\n        checkArrays(blackBishopMoves, king, arr[0], ownArr, oppArr, true, true)\r\n        checkArrays(rookMoves.current, king, arr[1], ownArr, oppArr, true, true)\r\n\r\n        arrRes.current = arr\r\n    }\r\n\r\n    const attacked = (rooks, knights, bishops, queens, pawns, oppSquares, ownSquares, arrRes, protect) => {\r\n        let arr = []\r\n\r\n        rooks.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\r\n\r\n        knights.forEach(a => recordKnightMoves(a, arr, oppSquares))\r\n\r\n        bishops.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\r\n        bishops.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\r\n\r\n        queens.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\r\n        queens.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\r\n        queens.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\r\n\r\n        if (/player/.test(pawns)) {\r\n            pawns.forEach(a => recordPlayerPawnAttacks(a, arr))\r\n        } else {\r\n            pawns.forEach(a => recordOpponentPawnAttacks(a, arr))\r\n        }\r\n\r\n        if (protect) {\r\n            arrRes.current = arr.filter(a => occupiedSquaresRender.includes(a))\r\n        } else {\r\n            arrRes.current = arr\r\n        }\r\n    }\r\n\r\n    const promotePawn = (pawn, pieceToPromoteTo, i) => {\r\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"white\") {\r\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\r\n        }\r\n\r\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"black\") {\r\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\r\n        }\r\n\r\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"white\") {\r\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\r\n        }\r\n\r\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"black\") {\r\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\r\n        }\r\n\r\n        store.dispatch({\r\n            type: \"pawnPromotion\",\r\n            payload: {pawn, pieceToPromoteTo}\r\n        })\r\n\r\n        if (/^ph/.test(pieceToPromoteTo)) {\r\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, playerSquaresLive)\r\n\r\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^oh/.test(pieceToPromoteTo)) {\r\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, enemySquaresRender)\r\n\r\n            if (checkedByPlayerArr.current.includes(playerKing)) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^pr/.test(pieceToPromoteTo)) {\r\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            \r\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^or/.test(pieceToPromoteTo)) {\r\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n            \r\n            if (checkedByPlayerArr.current.includes(playerKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^pb/.test(pieceToPromoteTo)) {\r\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n\r\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^ob/.test(pieceToPromoteTo)) {\r\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n            \r\n            if (checkedByPlayerArr.current.includes(playerKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^pq/.test(pieceToPromoteTo)) {\r\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            \r\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^oq/.test(pieceToPromoteTo)) {\r\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\r\n\r\n            if (checkedByPlayerArr.current.includes(playerKing)) {\r\n                checkingPiece.current = i + 1\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        setPawnPromotes(\"\")\r\n        engineTurn()\r\n    }\r\n\r\n    const renderPieces = () => {\r\n        const renderEachPiece = (a, src1, src2, alt1, alt2) => {\r\n            return (\r\n                (color === \"white\"\r\n                    ?\r\n                    <img src={src1}\r\n                         key={a}\r\n                         alt={alt1}\r\n                         className=\"piece\"\r\n                         style={activePiece === `${a}`\r\n                            ?\r\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \r\n                            :\r\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\r\n                    </img>\r\n                    : \r\n                    <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\r\n                         style={{height: \"80px\"}}>\r\n                        <img src={src2}\r\n                             key={a}\r\n                             alt={alt2}\r\n                             className=\"piece\"\r\n                             style={activePiece === `${a}`\r\n                                ?\r\n                                {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \r\n                                :\r\n                                {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\r\n                        </img>\r\n                    </div>)\r\n            )\r\n        }\r\n\r\n        const renderRoyals = (a, src, alt) => {\r\n            return (\r\n                <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\r\n                     style={{height: \"80px\"}}>\r\n                    <img src={src}\r\n                        key={a}\r\n                        alt={alt}\r\n                        className={`piece ${(/^ok/.test(a) && enemyKingAttacked) || (/^pk/.test(a) && playerKingAttacked) ? \"kingInCheck\" : null}`}\r\n                        style={activePiece === `${a}`\r\n                            ?\r\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \r\n                            :\r\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const renderPlayerPromotion = (pawn, i) => {\r\n            return (\r\n                <div className={`pawnPromotionPlayer ${color === \"black\" && !sandbox ? \"reversePromotion\" : null}`} \r\n                     style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? whiteQueen : blackQueen} \r\n                             alt=\"Player Queen\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"pq\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? whiteRook : blackRook} \r\n                             alt=\"Player Rook\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"pr\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? whiteBishop : blackBishop} \r\n                             alt=\"Player Bishop\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"pb\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? whiteKnight : blackKnight} \r\n                             alt=\"Player Knight\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"ph\", i)}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n        const renderOpponentPromotion = (pawn, i) => {\r\n            return (\r\n                <div className=\"pawnPromotionOpponent\" style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? blackKnight : whiteKnight} \r\n                             alt=\"Opponent Knight\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"oh\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? blackBishop : whiteBishop} \r\n                             alt=\"Opponent Bishop\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"ob\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? blackRook : whiteRook} \r\n                             alt=\"Opponent Rook\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"or\", i)}/>\r\n                    </div>\r\n                    <div className=\"promotionPiece\">\r\n                        <img src={color === \"white\" ? blackQueen : whiteQueen} \r\n                             alt=\"Opponent Queen\" \r\n                             className=\"piece\"\r\n                             onClick={() => promotePawn(pawn, \"oq\", i)}/>\r\n                    </div>  \r\n                </div>\r\n            )\r\n        }\r\n\r\n        const renderEntries = (a, i) => {\r\n            switch (a) {\r\n                case \"or1\": \r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or2\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or3\": \r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or4\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or5\": \r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or6\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or7\": \r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or8\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or9\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"or01\":\r\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\r\n                case \"oh1\": \r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh2\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh3\": \r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh4\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh5\": \r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh6\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh7\": \r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh8\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh9\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"oh01\":\r\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\r\n                case \"ob1\": \r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\r\n                case \"ob2\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"ob3\": \r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\r\n                case \"ob4\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"ob5\": \r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\r\n                case \"ob6\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"ob7\": \r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\r\n                case \"ob8\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"ob9\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"ob01\":\r\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \r\n                case \"okw\":\r\n                    return renderRoyals(a, whiteKing, \"White King\") \r\n                case \"okb\":\r\n                    return renderRoyals(a, blackKing, \"Black King\") \r\n                case \"oqw1\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw2\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw3\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw4\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw5\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw6\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw7\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw8\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqw9\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \r\n                case \"oqb1\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb2\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb3\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb4\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb5\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb6\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb7\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb8\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"oqb9\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \r\n                case \"op1\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op1\", i)}\r\n                    </div>\r\n                case \"op2\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op2\", i)}\r\n                    </div>\r\n                case \"op3\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op3\", i)}\r\n                    </div>\r\n                case \"op4\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op4\", i)}\r\n                    </div>\r\n                case \"op5\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op5\", i)}\r\n                    </div>\r\n                case \"op6\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op6\", i)}\r\n                    </div>\r\n                case \"op7\": \r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op7\", i)}\r\n                    </div>\r\n                case \"op8\":\r\n                    return <div className=\"pawnContainer\" key={i * 90}>\r\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\r\n                        {renderOpponentPromotion(\"op8\", i)}\r\n                    </div>\r\n                case \"pr1\": \r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr2\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr3\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr4\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr5\": \r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr6\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr7\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr8\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr9\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"pr01\":\r\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\r\n                case \"ph1\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph2\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph3\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph4\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph5\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph6\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph7\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph8\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph9\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"ph01\":\r\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\r\n                case \"pb1\": \r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb2\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb3\": \r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb4\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb5\": \r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb6\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb7\": \r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb8\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb9\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pb01\":\r\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\r\n                case \"pkw\":\r\n                    return renderRoyals(a, whiteKing, \"White King\")\r\n                case \"pkb\":\r\n                    return renderRoyals(a, blackKing, \"Black King\")\r\n                case \"pqw1\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw2\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw3\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw4\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw5\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw6\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw7\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw8\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqw9\":\r\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\r\n                case \"pqb1\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb2\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb3\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb4\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb5\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb6\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb7\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb8\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pqb9\":\r\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\r\n                case \"pp1\":\r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp1\", i)}\r\n                    </div>\r\n                case \"pp2\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp2\", i)}\r\n                    </div>\r\n                case \"pp3\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp3\", i)}\r\n                    </div>\r\n                case \"pp4\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp4\", i)}\r\n                    </div>\r\n                case \"pp5\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp5\", i)}\r\n                    </div>\r\n                case \"pp6\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp6\", i)}\r\n                    </div>\r\n                case \"pp7\": \r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp7\", i)}\r\n                    </div>\r\n                case \"pp8\":\r\n                    return <div className=\"pawnContainer\" key={i * 80}>\r\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\r\n                        {renderPlayerPromotion(\"pp8\", i)}\r\n                    </div>\r\n                default:\r\n                    return (\r\n                        <div className=\"piece\" key={i}></div>\r\n                    )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"piecesGrid\">\r\n                {currentMove === null \r\n                    ? \r\n                    boardEntries.map((a, i) => renderEntries(a[0], i))\r\n                    : \r\n                    Object.entries(JSON.parse(moves[currentMove])).map((a, i) => renderEntries(a[0], i))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderMovement = () => {\r\n        let arr = [0, 0, 0, 0, 0, 0, 0, 0]\r\n\r\n        return (\r\n            <div className=\"movementGrid\">\r\n                <div className=\"pawnPromotionOverlay\" style={pawnPromotes ? {display: \"block\"} : {display: \"none\"}}></div>\r\n\r\n                {arr.map((a, i) => <div key={i + 1 * 100} \r\n                                        onClick={() => onSquareClick(i + 1, boardEntries[i][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 1 : \"\"} */}\r\n                                            {moveSquares.includes(i + 1) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n                                    \r\n                {arr.map((a, i) => <div key={i + 9 * 100}\r\n                                        onClick={() => onSquareClick(i + 9, boardEntries[i + 8][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 9 : \"\"} */}\r\n                                            {moveSquares.includes(i + 9) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 17 * 100} \r\n                                        onClick={() => onSquareClick(i + 17, boardEntries[i + 16][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 17 : \"\"} */}\r\n                                            {moveSquares.includes(i + 17) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 25 * 100}\r\n                                        onClick={() => onSquareClick(i + 25, boardEntries[i + 24][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 25 : \"\"} */}\r\n                                            {moveSquares.includes(i + 25) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 33 * 100} \r\n                                        onClick={() => onSquareClick(i + 33, boardEntries[i + 32][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 33 : \"\"} */}\r\n                                            {moveSquares.includes(i + 33) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 41 * 100}\r\n                                        onClick={() => onSquareClick(i + 41, boardEntries[i + 40][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 41 : \"\"} */}\r\n                                            {moveSquares.includes(i + 41) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 49 * 100}\r\n                                        onClick={() => onSquareClick(i + 49, boardEntries[i + 48][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 49 : \"\"} */}\r\n                                            {moveSquares.includes(i + 49) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n\r\n                {arr.map((a, i) => <div key={i + 57 * 100} \r\n                                        onClick={() => onSquareClick(i + 57, boardEntries[i + 56][0])}\r\n                                        className=\"movementSquare\">\r\n                                            {/* {numbers ? i + 57 : \"\"} */}\r\n                                            {moveSquares.includes(i + 57) ? <div className=\"highlightSquare\"><div></div></div> : null}\r\n                                    </div>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const checkArrays = (arrayChecked, i, arr, ownArr, oppArr, exclude1, exclude2) => {\r\n        let arr2 = []\r\n\r\n        if (i !== playerKing && i !== enemyKing) {\r\n            if (playerSquaresRender.includes(i)) {\r\n                for (let k = 0; k < 4; k++) {\r\n                    if (playerKing8StarXrayArr.current[k].includes(i)\r\n                        && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                        || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\r\n                        && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\r\n                        arr2 = playerKing8StarXrayArr.current[k]\r\n                    }\r\n                }\r\n\r\n                for (let k = 4; k < 8; k++) {\r\n                    if (playerKing8StarXrayArr.current[k].includes(i)\r\n                        && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                        || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\r\n                        && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\r\n                        arr2 = playerKing8StarXrayArr.current[k]\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (enemySquaresRender.includes(i)) {\r\n                for (let k = 0; k < 4; k++) {\r\n                    if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                        && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                        || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\r\n                        && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\r\n                        arr2 = enemyKing8StarXrayArr.current[k]\r\n                    }\r\n                }\r\n\r\n                for (let k = 4; k < 8; k++) {\r\n                    if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                        && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                        || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\r\n                        && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\r\n                        arr2 = enemyKing8StarXrayArr.current[k]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const subArr of arrayChecked) {\r\n            if (subArr.includes(i)) {\r\n                for (let j = i + 1; j <= Math.max(...subArr); j++) {\r\n                    if (subArr.includes(j) && arr2.length === 0) {\r\n                        if (ownArr.includes(j) && exclude1) {\r\n                            break\r\n                        } else if (oppArr.includes(j) \r\n                            && j !== playerKing\r\n                            && j !== enemyKing \r\n                            && exclude2) {\r\n                            arr.push(j)\r\n                            break\r\n                        } else {\r\n                            arr.push(j)\r\n                        }\r\n                    } else if (subArr.includes(j) \r\n                        && arr2.includes(j) \r\n                        && !ownArr.includes(j)) {\r\n                        arr.push(j)\r\n                    }\r\n                }\r\n\r\n                for (let j = i - 1; j >= Math.min(...subArr); j--) {\r\n                    if (subArr.includes(j) && arr2.length === 0) {\r\n                        if (ownArr.includes(j) && exclude1) {\r\n                            break\r\n                        } else if (oppArr.includes(j) \r\n                            && j !== playerKing \r\n                            && j !== enemyKing \r\n                            && exclude2) {\r\n                            arr.push(j)\r\n                            break\r\n                        } else {\r\n                            arr.push(j)\r\n                        }\r\n                    } else if (subArr.includes(j) \r\n                        && arr2.includes(j)\r\n                        && !ownArr.includes(j)) {\r\n                        arr.push(j)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const recordKnightMoves = (i, arrMoves, excArr) => {  \r\n        let arr = []\r\n        let arr2 = []\r\n\r\n        if (playerSquaresRender.includes(i)) {\r\n            for (let k = 0; k < 4; k++) {\r\n                if (playerKing8StarXrayArr.current[k].includes(i)\r\n                    && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\r\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\r\n                    arr2 = playerKing8StarXrayArr.current[k]\r\n                }\r\n            }\r\n\r\n            for (let k = 4; k < 8; k++) {\r\n                if (playerKing8StarXrayArr.current[k].includes(i)\r\n                    && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\r\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\r\n                    arr2 = playerKing8StarXrayArr.current[k]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (enemySquaresRender.includes(i)) {\r\n            for (let k = 0; k < 4; k++) {\r\n                if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                    && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\r\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\r\n                    arr2 = enemyKing8StarXrayArr.current[k]\r\n                }\r\n            }\r\n\r\n            for (let k = 4; k < 8; k++) {\r\n                if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                    && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\r\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\r\n                    arr2 = enemyKing8StarXrayArr.current[k]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (i) {\r\n            if (knightLimits.current[0].includes(i)) {\r\n                arr = [i - 15, i - 6, i + 10, i + 17]\r\n            } else if (knightLimits.current[1].includes(i)) {\r\n                arr = [i - 17, i - 15, i - 6, i + 10, i + 15, i + 17]\r\n            } else if (knightLimits.current[2].includes(i)) {\r\n                arr = [i - 17, i - 15, i - 10, i + 6, i + 15, i + 17]\r\n            } else if (knightLimits.current[3].includes(i)) {\r\n                arr = [i - 17, i - 10, i + 6, i + 15]\r\n            } else {\r\n                arr = [i - 17, i - 15, i - 10, i - 6, i + 6, i + 10, i + 15, i + 17]\r\n            }\r\n\r\n            for (const number of arr) {\r\n                if (excArr.includes(number)) {\r\n                    arr = arr.filter(a => a !== number)\r\n                }\r\n                if (arr2.length > 0) {\r\n                    arr = arr.filter(a => arr2.includes(a))\r\n                }\r\n            }\r\n\r\n            if (playerKingAttacked \r\n                && playerSquaresRender.includes(i) \r\n                && i !== playerKing \r\n                && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n                arr = arr.filter(a => arrTech.includes(a))\r\n            } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                arr = arr.filter(a => playerHorseSafetyArr.current.includes(a))\r\n                \r\n            }\r\n\r\n            if (enemyKingAttacked \r\n                && enemySquaresRender.includes(i) \r\n                && i !== enemyKing \r\n                && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n                arr = arr.filter(a => arrTech.includes(a))\r\n            } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                arr = arr.filter(a => enemyHorseSafetyArr.current.includes(a))\r\n                \r\n            }\r\n\r\n            for (const number of arr) {\r\n                arrMoves.push(number)\r\n            }\r\n        }\r\n    }\r\n\r\n    const recordPlayerPawnMoves = (i, piece, arrMoves) => {    \r\n        let arr = []\r\n        let arr2 = []\r\n\r\n        for (let k = 0; k < 4; k++) {\r\n            if (playerKing8StarXrayArr.current[k].includes(i)\r\n                && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\r\n                arr2 = playerKing8StarXrayArr.current[k]\r\n            }\r\n        }\r\n\r\n        for (let k = 4; k < 8; k++) {\r\n            if (playerKing8StarXrayArr.current[k].includes(i)\r\n                && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \r\n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\r\n                arr2 = playerKing8StarXrayArr.current[k]\r\n            }\r\n        }\r\n\r\n        if (color === \"black\" && !sandbox) {\r\n            if (pawnsFirstMove[piece]) {\r\n                arr = [i + 8, i + 16]\r\n            } else {\r\n                arr = [i + 8]\r\n            }\r\n            \r\n            if (occupiedSquaresRender.includes(i + 8)) {\r\n                arr = []\r\n            } else if (occupiedSquaresRender.includes(i + 16)) {\r\n                arr = [i + 8]\r\n            }\r\n    \r\n            if ((enemySquaresRender.includes(i + 9) \r\n                || (rookMoves.current[4].includes(i) \r\n                && i + 9 === enPassantSquare.current[0])) \r\n                && !knightLimits.current[3].includes(i)) {\r\n                arr.push(i + 9)\r\n            }\r\n\r\n            if ((enemySquaresRender.includes(i + 7) \r\n                || (rookMoves.current[4].includes(i) \r\n                && i + 7 === enPassantSquare.current[0])) \r\n                && !knightLimits.current[0].includes(i)) {\r\n                arr.push(i + 7)\r\n            }\r\n        } else {\r\n            if (pawnsFirstMove[piece]) {\r\n                arr = [i - 8, i - 16]\r\n            } else {\r\n                arr = [i - 8]\r\n            }\r\n            \r\n            if (occupiedSquaresRender.includes(i - 8)) {\r\n                arr = []\r\n            } else if (occupiedSquaresRender.includes(i - 16)) {\r\n                arr = [i - 8]\r\n            }\r\n    \r\n            if ((enemySquaresRender.includes(i - 9) \r\n                || (rookMoves.current[3].includes(i) \r\n                && i - 9 === enPassantSquare.current[0])) \r\n                && !knightLimits.current[0].includes(i)) {\r\n                arr.push(i - 9)\r\n            }\r\n    \r\n            if ((enemySquaresRender.includes(i - 7) \r\n                || (rookMoves.current[3].includes(i) \r\n                && i - 7 === enPassantSquare.current[0])) \r\n                && !knightLimits.current[3].includes(i)) {\r\n                arr.push(i - 7)\r\n            }\r\n        }\r\n\r\n        if (arr2.filter(a => playerSquaresRender.includes(a)).length === 1) {\r\n            arr = arr.filter(a => arr2.includes(a))\r\n        } \r\n\r\n        if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n            let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n            \r\n            arr = arr.filter(a => arrTech.includes(a))\r\n        } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n            arr = arr.filter(a => playerHorseSafetyArr.current.includes(a))\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordOpponentPawnMoves = (i, piece, arrMoves) => {    \r\n        let arr = []\r\n        let arr2 = []\r\n        \r\n        for (let k = 0; k < 4; k++) {\r\n            if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\r\n                arr2 = enemyKing8StarXrayArr.current[k]\r\n            }\r\n        }\r\n        for (let k = 4; k < 8; k++) {\r\n            if (enemyKing8StarXrayArr.current[k].includes(i)\r\n                && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \r\n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\r\n                arr2 = enemyKing8StarXrayArr.current[k]\r\n            }\r\n        }\r\n\r\n        if (pawnsFirstMove[piece]) {\r\n            arr = [i + 8, i + 16]\r\n        } else {\r\n            arr = [i + 8]\r\n        }\r\n\r\n        if (occupiedSquaresRender.includes(i + 8)) {\r\n            arr = []\r\n        } else if (occupiedSquaresRender.includes(i + 16)) {\r\n            arr = [i + 8]\r\n        }\r\n\r\n        if ((playerSquaresRender.includes(i + 7) \r\n            || (rookMoves.current[4].includes(i) \r\n            && i + 7 === enPassantSquare.current[0])) \r\n            && !knightLimits.current[0].includes(i)) {\r\n            arr.push(i + 7)\r\n        }\r\n\r\n        if ((playerSquaresRender.includes(i + 9) \r\n            || (rookMoves.current[4].includes(i) \r\n            && i + 9 === enPassantSquare.current[0])) \r\n            && !knightLimits.current[3].includes(i)) {\r\n            arr.push(i + 9)\r\n        }\r\n\r\n        if (arr2.filter(a => enemySquaresRender.includes(a)).length === 1) {\r\n            arr = arr.filter(a => arr2.includes(a))\r\n        } \r\n\r\n        if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n            let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n            arr = arr.filter(a => arrTech.includes(a))\r\n        } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n            arr = arr.filter(a => enemyHorseSafetyArr.current.includes(a))\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordOpponentPawnAttacks = (i, arrMoves) => {\r\n        let arr = []\r\n\r\n        if (color === \"black\" && !sandbox) {\r\n            if (!knightLimits.current[0].includes(i)) {\r\n                arr.push(i - 7)\r\n            }\r\n    \r\n            if (!knightLimits.current[3].includes(i)) {\r\n                arr.push(i - 9)\r\n            }\r\n        } else {\r\n            if (!knightLimits.current[0].includes(i)) {\r\n                arr.push(i + 7)\r\n            }\r\n    \r\n            if (!knightLimits.current[3].includes(i)) {\r\n                arr.push(i + 9)\r\n            }\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordPlayerPawnAttacks = (i, arrMoves) => {\r\n        let arr = []\r\n\r\n        if (!knightLimits.current[0].includes(i)) {\r\n            arr.push(i - 9)\r\n        }\r\n\r\n        if (!knightLimits.current[3].includes(i)) {\r\n            arr.push(i - 7)\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordPlayerKingMoves = (i, arrMoves) => {\r\n        let arr = []\r\n        let arr2 = []\r\n\r\n        recordEnemyKingAttacks(enemyKing, arr2)\r\n\r\n        if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2 && castlingPlayerMoved.pr1) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\r\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\r\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr1) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\r\n        } else if (knightLimits.current[0].includes(i)) {\r\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\r\n        } else if (knightLimits.current[3].includes(i)) {\r\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\r\n        } else {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\r\n        }\r\n\r\n        for (const number of arr) {\r\n            if (playerSquaresRender.includes(number)) {\r\n                arr = arr.filter(x => x !== number)\r\n\r\n                if (!arr.includes(60) && i === 61) {\r\n                    arr = arr.filter(x => x !== 59)\r\n                }\r\n\r\n                if (!arr.includes(62) && i === 61) {\r\n                    arr = arr.filter(x => x !== 63)\r\n                }\r\n\r\n                arr = arr.filter(a => !attackedByOpponentArr.current.includes(a))\r\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\r\n                         .filter(a => !arr2.includes(a))\r\n                         .filter(a => a > 0 && a < 65)\r\n            } else {\r\n                arr = arr.filter(a => !attackedByOpponentArr.current.includes(a))\r\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\r\n                         .filter(a => !arr2.includes(a))\r\n                         .filter(a => a > 0 && a < 65)\r\n            }\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordPlayerKingAttacks = (i, arrMoves) => {\r\n        let arr = []\r\n\r\n        if (knightLimits.current[0].includes(i)) {\r\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\r\n        } else if (knightLimits.current[3].includes(i)) {\r\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\r\n        } else {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordEnemyKingMoves = (i, arrMoves) => {\r\n        let arr = []              \r\n        let arr2 = []\r\n\r\n        recordPlayerKingAttacks(playerKing, arr2)\r\n\r\n        if (castlingEnemyMoved.ok && castlingEnemyMoved.or2 && castlingEnemyMoved.or1) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\r\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or2) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\r\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or1) {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\r\n        } else if (knightLimits.current[0].includes(i)) {\r\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\r\n        } else if (knightLimits.current[3].includes(i)) {\r\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\r\n        } else {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\r\n        }\r\n\r\n        for (const number of arr) {\r\n            if (enemySquaresRender.includes(number)) {\r\n                arr = arr.filter(x => x !== number)\r\n\r\n                if (!arr.includes(4) && i === 5) {\r\n                    arr = arr.filter(x => x !== 3)\r\n                }\r\n\r\n                if (!arr.includes(6) && i === 5) {\r\n                    arr = arr.filter(x => x !== 7)\r\n                }\r\n\r\n                arr = arr.filter(a => !attackedByPlayerArr.current.includes(a))\r\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\r\n                         .filter(a => !arr2.includes(a))\r\n                         .filter(a => a > 0 && a < 65)\r\n            } else {\r\n                arr = arr.filter(a => !attackedByPlayerArr.current.includes(a))\r\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\r\n                         .filter(a => !arr2.includes(a))\r\n                         .filter(a => a > 0 && a < 65)\r\n            }\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const recordEnemyKingAttacks = (i, arrMoves) => {\r\n        let arr = []              \r\n        \r\n        if (knightLimits.current[0].includes(i)) {\r\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\r\n        } else if (knightLimits.current[3].includes(i)) {\r\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\r\n        } else {\r\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\r\n        }\r\n\r\n        for (const number of arr) {\r\n            arrMoves.push(number)\r\n        }\r\n    }\r\n\r\n    const onSquareClick = (i, piece) => {      \r\n        if (((!moveSquares.includes(i) && moveSquares.length > 0) || activePiece === piece) \r\n            && \r\n            (\r\n             (\r\n              (\r\n               (color === \"white\" && toMove === \"b\") \r\n                || \r\n               (color === \"black\" && toMove === \"w\")\r\n              ) \r\n                && !playerSquaresRender.includes(i)\r\n             ) \r\n            || \r\n             (\r\n              (\r\n               (color === \"white\" && toMove === \"w\") \r\n                || \r\n               (color === \"black\" && toMove === \"b\")\r\n              ) \r\n                && !enemySquaresRender.includes(i)\r\n             )\r\n            )){\r\n            store.dispatch({\r\n                type:\"moveSquares\",\r\n                payload: []\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"activePiece\",\r\n                payload: \"\"\r\n            })\r\n            \r\n            store.dispatch({\r\n                type: \"pieceSquare\",\r\n                payload: null\r\n            })\r\n        }\r\n        \r\n        if (occupiedSquaresRender.includes(i) \r\n            && activePiece !== piece \r\n            && !currentMove \r\n            && !gameEnd) {\r\n            if (((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"b\")) \r\n                && playerSquaresRender.includes(i)) {\r\n                store.dispatch({\r\n                    type:\"moveSquares\",\r\n                    payload: []\r\n                })\r\n\r\n                if (store.getState().board.oldSquare !== i) {\r\n                    store.dispatch({\r\n                        type: \"oldSquare\",\r\n                        payload: i\r\n                    })\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"activePiece\",\r\n                    payload: piece\r\n                })\r\n\r\n                pieceSquareForEngine.current = i\r\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\r\n\r\n                store.dispatch({\r\n                    type: \"pieceSquare\",\r\n                    payload: i\r\n                })\r\n\r\n                if (/^ph/.test(piece)) {   \r\n                    let arr = []\r\n\r\n                    recordKnightMoves(i, arr, playerSquaresRender)\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^pp/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    recordPlayerPawnMoves(i, piece, arr)\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^pr/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n\r\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^pb/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n\r\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^pq/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\r\n\r\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^pk/.test(piece)) {\r\n                    attacked(enemyRooks, \r\n                             enemyKnights, \r\n                             enemyBishops, \r\n                             enemyQueens, \r\n                             enemyPawns, \r\n                             enemySquaresRender, \r\n                             playerSquaresRender, \r\n                             attackedByOpponentArr, \r\n                             false)\r\n\r\n                    let arr = []\r\n\r\n                    recordPlayerKingMoves(i, arr)\r\n                    \r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n            } else if (((color === \"white\" && toMove === \"b\") || (color === \"black\" && toMove === \"w\")) \r\n                        && sandbox \r\n                        && enemySquaresRender.includes(i)) {\r\n                store.dispatch({\r\n                    type:\"moveSquares\",\r\n                    payload: []\r\n                })\r\n    \r\n                if (store.getState().board.oldSquare !== i) {\r\n                    store.dispatch({\r\n                        type: \"oldSquare\",\r\n                        payload: i\r\n                    })\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"activePiece\",\r\n                    payload: piece\r\n                })\r\n\r\n                store.dispatch({\r\n                    type: \"pieceSquare\",\r\n                    payload: i\r\n                })\r\n\r\n                pieceSquareForEngine.current = i\r\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\r\n\r\n                if (/^oh/.test(piece)) {   \r\n                    let arr = []\r\n\r\n                    recordKnightMoves(i, arr, enemySquaresRender)\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^op/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    recordOpponentPawnMoves(i, piece, arr)\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^or/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n\r\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^ob/.test(piece)) {\r\n                    let arr = []\r\n\r\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n\r\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^oq/.test(piece)) {\r\n                    let arr = []\r\n    \r\n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\r\n\r\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\r\n\r\n                        arr = arr.filter(a => arrTech.includes(a))\r\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\r\n                        arr = arr.filter(a => a === checkingPiece.current)\r\n                    }\r\n    \r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n    \r\n                if (/^ok/.test(piece)) {\r\n                    attacked(playerRooks, \r\n                             playerKnights, \r\n                             playerBishops, \r\n                             playerQueens, \r\n                             playerPawns, \r\n                             playerSquaresRender, \r\n                             enemySquaresRender, \r\n                             attackedByPlayerArr, \r\n                             false) \r\n\r\n                    let arr = []\r\n\r\n                    recordEnemyKingMoves(i, arr)\r\n\r\n                    store.dispatch({\r\n                        type:\"moveSquares\",\r\n                        payload: arr\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (/^ph/.test(activePiece) && moveSquares.includes(i)) {\r\n            recordKnightMoves(i, checkedByPlayerArr.current, playerSquaresLive)\r\n\r\n            switch (activePiece) {\r\n                case \"ph1\":\r\n                    playerKnight1 = i\r\n                    break\r\n                case \"ph2\":\r\n                    playerKnight2 = i\r\n                    break\r\n                case \"ph3\":\r\n                    playerKnight3 = i\r\n                    break\r\n                case \"ph4\":\r\n                    playerKnight4 = i\r\n                    break\r\n                case \"ph5\":\r\n                    playerKnight5 = i\r\n                    break\r\n                case \"ph6\":\r\n                    playerKnight6 = i\r\n                    break\r\n                case \"ph7\":\r\n                    playerKnight7 = i\r\n                    break\r\n                case \"ph8\":\r\n                    playerKnight8 = i\r\n                    break\r\n                case \"ph9\":\r\n                    playerKnight9 = i\r\n                    break\r\n                case \"ph01\":\r\n                    playerKnight01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            playerKnights = [playerKnight1, \r\n                             playerKnight2, \r\n                             playerKnight3, \r\n                             playerKnight4, \r\n                             playerKnight5, \r\n                             playerKnight6, \r\n                             playerKnight7, \r\n                             playerKnight8, \r\n                             playerKnight9, \r\n                             playerKnight01]\r\n\r\n            moveKnight(i, activePiece)\r\n        } \r\n\r\n        if (/^pp/.test(activePiece) && moveSquares.includes(i)) {\r\n            recordPlayerPawnMoves(i, activePiece, checkedByPlayerArr.current)\r\n\r\n            switch (activePiece) {\r\n                case \"pp1\":\r\n                    playerPawn1 = i\r\n                    break\r\n                case \"pp2\":\r\n                    playerPawn2 = i\r\n                    break\r\n                case \"pp3\":\r\n                    playerPawn3 = i\r\n                    break\r\n                case \"pp4\":\r\n                    playerPawn4 = i\r\n                    break\r\n                case \"pp5\":\r\n                    playerPawn5 = i\r\n                    break\r\n                case \"pp6\":\r\n                    playerPawn6 = i\r\n                    break\r\n                case \"pp7\":\r\n                    playerPawn7 = i\r\n                    break;\r\n                case \"pp8\":\r\n                    playerPawn8 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            playerPawns = [playerPawn1, \r\n                           playerPawn2, \r\n                           playerPawn3, \r\n                           playerPawn4, \r\n                           playerPawn5, \r\n                           playerPawn6, \r\n                           playerPawn7, \r\n                           playerPawn8]\r\n           \r\n            movePawn(i, activePiece)\r\n        } \r\n\r\n        if (/^pb/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            \r\n            switch (activePiece) {\r\n                case \"pb1\":\r\n                    playerBishop1 = i\r\n                    break\r\n                case \"pb2\":\r\n                    playerBishop2 = i\r\n                    break\r\n                case \"pb3\":\r\n                    playerBishop3 = i\r\n                    break\r\n                case \"pb4\":\r\n                    playerBishop4 = i\r\n                    break\r\n                case \"pb5\":\r\n                    playerBishop5 = i\r\n                    break\r\n                case \"pb6\":\r\n                    playerBishop6 = i\r\n                    break\r\n                case \"pb7\":\r\n                    playerBishop7 = i\r\n                    break\r\n                case \"pb8\":\r\n                    playerBishop8 = i\r\n                    break\r\n                case \"pb9\":\r\n                    playerBishop9 = i\r\n                    break\r\n                case \"pb01\":\r\n                    playerBishop01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            playerBishops = [playerBishop1, \r\n                             playerBishop2, \r\n                             playerBishop3, \r\n                             playerBishop4, \r\n                             playerBishop5, \r\n                             playerBishop6, \r\n                             playerBishop7, \r\n                             playerBishop8, \r\n                             playerBishop9, \r\n                             playerBishop01]\r\n\r\n            moveBishop(i, activePiece)\r\n        } \r\n\r\n        if (/^pr/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            \r\n            switch (activePiece) {\r\n                case \"pr1\":\r\n                    playerRook1 = i\r\n                    break\r\n                case \"pr2\":\r\n                    playerRook2 = i\r\n                    break\r\n                case \"pr3\":\r\n                    playerRook3 = i\r\n                    break\r\n                case \"pr4\":\r\n                    playerRook4 = i\r\n                    break\r\n                case \"pr5\":\r\n                    playerRook5 = i\r\n                    break\r\n                case \"pr6\":\r\n                    playerRook6 = i\r\n                    break\r\n                case \"pr7\":\r\n                    playerRook7 = i\r\n                    break\r\n                case \"pr8\":\r\n                    playerRook8 = i\r\n                    break\r\n                case \"pr9\":\r\n                    playerRook9 = i\r\n                    break\r\n                case \"pr01\":\r\n                    playerRook01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            playerRooks = [playerRook1, \r\n                           playerRook2, \r\n                           playerRook3, \r\n                           playerRook4, \r\n                           playerRook5, \r\n                           playerRook6, \r\n                           playerRook7, \r\n                           playerRook8, \r\n                           playerRook9, \r\n                           playerRook01]\r\n\r\n            moveRook(i, activePiece)\r\n        }\r\n\r\n        if (/^pq/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\r\n\r\n            switch (activePiece) {\r\n                case \"pqw1\": case \"pqb1\":\r\n                    playerQueen1 = i\r\n                    break\r\n                case \"pqw2\": case \"pqb2\":\r\n                    playerQueen2 = i\r\n                    break\r\n                case \"pqw3\": case \"pqb3\":\r\n                    playerQueen3 = i\r\n                    break\r\n                case \"pqw4\": case \"pqb4\":\r\n                    playerQueen4 = i\r\n                    break\r\n                case \"pqw5\": case \"pqb5\":\r\n                    playerQueen5 = i\r\n                    break\r\n                case \"pqw6\": case \"pqb6\":\r\n                    playerQueen6 = i\r\n                    break\r\n                case \"pqw7\": case \"pqb7\":\r\n                    playerQueen7 = i\r\n                    break\r\n                case \"pqw8\": case \"pqb8\":\r\n                    playerQueen8 = i\r\n                    break\r\n                case \"pqw9\": case \"pqb9\":\r\n                    playerQueen9 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            playerQueens = [playerQueen1, \r\n                            playerQueen2, \r\n                            playerQueen3, \r\n                            playerQueen4, \r\n                            playerQueen5, \r\n                            playerQueen6, \r\n                            playerQueen7, \r\n                            playerQueen8, \r\n                            playerQueen9]\r\n\r\n            moveQueen(i, activePiece)\r\n        } \r\n\r\n        if (/^pk/.test(activePiece) \r\n            && moveSquares.includes(i) \r\n            && !attackedByOpponentArr.current.includes(i)) {\r\n            playerKing = i\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            moveKing(i, activePiece)\r\n\r\n            kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\r\n        } \r\n                \r\n        if (/^oh/.test(activePiece) && moveSquares.includes(i)) {\r\n            recordKnightMoves(i, checkedByOpponentArr.current, enemySquaresLive)\r\n            \r\n            switch (activePiece) {\r\n                case \"oh1\":\r\n                    enemyKnight1 = i\r\n                    break\r\n                case \"oh2\":\r\n                    enemyKnight2 = i\r\n                    break\r\n                case \"oh3\":\r\n                    enemyKnight3 = i\r\n                    break\r\n                case \"oh4\":\r\n                    enemyKnight4 = i\r\n                    break\r\n                case \"oh5\":\r\n                    enemyKnight5 = i\r\n                    break\r\n                case \"oh6\":\r\n                    enemyKnight6 = i\r\n                    break\r\n                case \"oh7\":\r\n                    enemyKnight7 = i\r\n                    break\r\n                case \"oh8\":\r\n                    enemyKnight8 = i\r\n                    break\r\n                case \"oh9\":\r\n                    enemyKnight9 = i\r\n                    break\r\n                case \"oh01\":\r\n                    enemyKnight01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            enemyKnights = [enemyKnight1, \r\n                            enemyKnight2, \r\n                            enemyKnight3, \r\n                            enemyKnight4, \r\n                            enemyKnight5, \r\n                            enemyKnight6, \r\n                            enemyKnight7, \r\n                            enemyKnight8, \r\n                            enemyKnight9, \r\n                            enemyKnight01]\r\n            \r\n            moveKnight(i, activePiece)\r\n        } \r\n        \r\n        if (/^op/.test(activePiece) && moveSquares.includes(i)) {\r\n            recordOpponentPawnMoves(i, activePiece, checkedByOpponentArr.current)\r\n\r\n            switch (activePiece) {\r\n                case \"op1\":\r\n                    enemyPawn1 = i\r\n                    break\r\n                case \"op2\":\r\n                    enemyPawn2 = i\r\n                    break\r\n                case \"op3\":\r\n                    enemyPawn3 = i\r\n                    break\r\n                case \"op4\":\r\n                    enemyPawn4 = i\r\n                    break\r\n                case \"op5\":\r\n                    enemyPawn5 = i\r\n                    break\r\n                case \"op6\":\r\n                    enemyPawn6 = i\r\n                    break\r\n                case \"op7\":\r\n                    enemyPawn7 = i\r\n                    break\r\n                case \"op8\":\r\n                    enemyPawn8 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            enemyPawns = [enemyPawn1, \r\n                          enemyPawn2, \r\n                          enemyPawn3, \r\n                          enemyPawn4, \r\n                          enemyPawn5, \r\n                          enemyPawn6, \r\n                          enemyPawn7, \r\n                          enemyPawn8]\r\n\r\n            movePawn(i, activePiece)\r\n        } \r\n\r\n        if (/^ob/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n            \r\n            switch (activePiece) {\r\n                case \"ob1\":\r\n                    enemyBishop1 = i\r\n                    break\r\n                case \"ob2\":\r\n                    enemyBishop2 = i\r\n                    break\r\n                case \"ob3\":\r\n                    enemyBishop3 = i\r\n                    break\r\n                case \"ob4\":\r\n                    enemyBishop4 = i\r\n                    break\r\n                case \"ob5\":\r\n                    enemyBishop5 = i\r\n                    break\r\n                case \"ob6\":\r\n                    enemyBishop6 = i\r\n                    break\r\n                case \"ob7\":\r\n                    enemyBishop7 = i\r\n                    break\r\n                case \"ob8\":\r\n                    enemyBishop8 = i\r\n                    break\r\n                case \"ob9\":\r\n                    enemyBishop9 = i\r\n                    break\r\n                case \"ob01\":\r\n                    enemyBishop01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            enemyBishops = [enemyBishop1, \r\n                            enemyBishop2, \r\n                            enemyBishop3, \r\n                            enemyBishop4, \r\n                            enemyBishop5, \r\n                            enemyBishop6, \r\n                            enemyBishop7, \r\n                            enemyBishop8, \r\n                            enemyBishop9, \r\n                            enemyBishop01]\r\n\r\n            moveBishop(i, activePiece)\r\n        } \r\n\r\n        if (/^or/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n            \r\n            switch (activePiece) {\r\n                case \"or1\":\r\n                    enemyRook1 = i\r\n                    break\r\n                case \"or2\":\r\n                    enemyRook2 = i\r\n                    break\r\n                case \"or3\":\r\n                    enemyRook3 = i\r\n                    break\r\n                case \"or4\":\r\n                    enemyRook4 = i\r\n                    break\r\n                case \"or5\":\r\n                    enemyRook5 = i\r\n                    break\r\n                case \"or6\":\r\n                    enemyRook6 = i\r\n                    break\r\n                case \"or7\":\r\n                    enemyRook7 = i\r\n                    break\r\n                case \"or8\":\r\n                    enemyRook8 = i\r\n                    break\r\n                case \"or9\":\r\n                    enemyRook9 = i\r\n                    break\r\n                case \"or01\":\r\n                    enemyRook01 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            enemyRooks = [enemyRook1, \r\n                          enemyRook2, \r\n                          enemyRook3, \r\n                          enemyRook4, \r\n                          enemyRook5, \r\n                          enemyRook6, \r\n                          enemyRook7, \r\n                          enemyRook8, \r\n                          enemyRook9, \r\n                          enemyRook01]\r\n\r\n            moveRook(i, activePiece)\r\n        }\r\n\r\n        if (/^oq/.test(activePiece) && moveSquares.includes(i)) {\r\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\r\n\r\n            switch (activePiece) {\r\n                case \"oqw1\": case \"oqb1\":\r\n                    enemyQueen1 = i\r\n                    break\r\n                case \"oqw2\": case \"oqb2\":\r\n                    enemyQueen2 = i\r\n                    break\r\n                case \"oqw3\": case \"oqb3\":\r\n                    enemyQueen3 = i\r\n                    break\r\n                case \"oqw4\": case \"oqb4\":\r\n                    enemyQueen4 = i\r\n                    break\r\n                case \"oqw5\": case \"oqb5\":\r\n                    enemyQueen5 = i\r\n                    break\r\n                case \"oqw6\": case \"oqb6\":\r\n                    enemyQueen6 = i\r\n                    break\r\n                case \"oqw7\": case \"oqb7\":\r\n                    enemyQueen7 = i\r\n                    break\r\n                case \"oqw8\": case \"oqb8\":\r\n                    enemyQueen8 = i\r\n                    break\r\n                case \"oqw9\": case \"oqb9\":\r\n                    enemyQueen9 = i\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            enemyQueens = [enemyQueen1, \r\n                           enemyQueen2, \r\n                           enemyQueen3, \r\n                           enemyQueen4, \r\n                           enemyQueen5, \r\n                           enemyQueen6, \r\n                           enemyQueen7, \r\n                           enemyQueen8, \r\n                           enemyQueen9]\r\n\r\n            moveQueen(i, activePiece)\r\n        } \r\n\r\n        if (/^ok/.test(activePiece) \r\n            && moveSquares.includes(i)\r\n            && !attackedByPlayerArr.current.includes(i)) {\r\n            enemyKing = i\r\n\r\n            updateStateBoard(i, activePiece)\r\n\r\n            moveKing(i, activePiece)\r\n\r\n            kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\r\n        } \r\n    }\r\n\r\n    const updateStateBoard = (i, string) => {\r\n        if (/^pp/.test(string) || /^op/.test(string)) {\r\n            store.dispatch({\r\n                type: \"pawnMoved\",\r\n                payload: string\r\n            })\r\n        }\r\n\r\n        if (/(pr1)|(pr2)/.test(string) || /^pk/.test(string)) {\r\n            store.dispatch({\r\n                type: \"castlingPlayerMoved\",\r\n                payload: string\r\n            })\r\n        } \r\n        \r\n        if (/(or1)|(or2)/.test(string) || /^ok/.test(string)){\r\n            store.dispatch({\r\n                type: \"castlingEnemyMoved\",\r\n                payload: string\r\n            })\r\n        }\r\n\r\n        store.dispatch({\r\n            type: \"newSquare\",\r\n            payload: i\r\n        })\r\n\r\n        pieceNewSquare.current = i\r\n        playerNewSquareForEngine.current = boardEntries.filter(([key, value]) => value[0] === pieceNewSquare.current).flat()[1][1]\r\n\r\n        store.dispatch({\r\n            type: \"highlightMove\",\r\n            payload: i\r\n        })\r\n\r\n        if (/^o/.test(string)) {\r\n            if (playerSquaresRender.includes(i)) {\r\n                store.dispatch({\r\n                    type: string,\r\n                    payload: \"takes\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: string\r\n                })\r\n            }\r\n        }\r\n\r\n        if (/^p/.test(string)) {\r\n            if (enemySquaresRender.includes(i)) {\r\n                store.dispatch({\r\n                    type: string,\r\n                    payload: \"takes\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: string\r\n                })\r\n            }\r\n        } \r\n\r\n        recordBoard()\r\n    }\r\n\r\n    const checkGameEnd = () => {\r\n        attacked(enemyRooks, \r\n                 enemyKnights, \r\n                 enemyBishops, \r\n                 enemyQueens, \r\n                 enemyPawns, \r\n                 enemySquaresRender, \r\n                 playerSquaresRender, \r\n                 attackedByOpponentArr, \r\n                 false)\r\n        attacked(playerRooks, \r\n                 playerKnights, \r\n                 playerBishops, \r\n                 playerQueens, \r\n                 playerPawns, \r\n                 playerSquaresRender, \r\n                 enemySquaresRender, \r\n                 attackedByPlayerArr, \r\n                 false)\r\n\r\n        let arrPlayerCheckmate = []\r\n        let arrEnemyCheckmate = []\r\n        let arrPlayerStalemate = []\r\n        let arrEnemyStalemate = []\r\n        \r\n        recordPlayerKingMoves(playerKing, arrPlayerCheckmate)\r\n        recordEnemyKingMoves(enemyKing, arrEnemyCheckmate)\r\n\r\n        if (\r\n            (\r\n                playerKingAttacked \r\n                && !attackedByPlayerArr.current.includes(checkingPiece.current) \r\n                && arrPlayerCheckmate.length === 0 \r\n                && !playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\r\n                                                            .flat()\r\n                                                            .some(a => attackedByPlayerArr.current.includes(a))\r\n            ) \r\n                ||\r\n            (\r\n                enemyKingAttacked \r\n                && !attackedByOpponentArr.current.includes(checkingPiece.current) \r\n                && arrEnemyCheckmate.length === 0 \r\n                && !enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\r\n                                                           .flat()\r\n                                                           .some(a => attackedByOpponentArr.current.includes(a))\r\n            )\r\n            ) {\r\n            \r\n            if (sounds) {\r\n                gameEndSound.play()\r\n            }\r\n\r\n            store.dispatch({\r\n                type: \"gameEnd\"\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"modalOpen\",\r\n                payload: true\r\n            })\r\n\r\n            if (playerKingAttacked) {\r\n                store.dispatch({\r\n                    type: \"endMessage\",\r\n                    payload: \"You've been checkmated.\"\r\n                })\r\n            }\r\n\r\n            if (enemyKingAttacked) {\r\n                store.dispatch({\r\n                    type: \"endMessage\",\r\n                    payload: \"You checkmated your opponent.\"\r\n                })\r\n            }\r\n        }\r\n\r\n        playerRooks.forEach(a => checkArrays(rookMoves.current, \r\n                                             a, \r\n                                             arrPlayerStalemate, \r\n                                             playerSquaresRender, \r\n                                             enemySquaresRender, \r\n                                             true, \r\n                                             true))\r\n\r\n        playerKnights.forEach(a => recordKnightMoves(a, arrPlayerStalemate, playerSquaresRender))\r\n\r\n        playerBishops.forEach(a => checkArrays(whiteBishopMoves, \r\n                                               a, \r\n                                               arrPlayerStalemate, \r\n                                               playerSquaresRender, \r\n                                               enemySquaresRender, \r\n                                               true, \r\n                                               true))\r\n\r\n        playerBishops.forEach(a => checkArrays(blackBishopMoves, \r\n                                               a, \r\n                                               arrPlayerStalemate, \r\n                                               playerSquaresRender, \r\n                                               enemySquaresRender, \r\n                                               true, \r\n                                               true))\r\n\r\n        playerQueens.forEach(a => checkArrays(whiteBishopMoves, \r\n                                               a, \r\n                                               arrPlayerStalemate, \r\n                                               playerSquaresRender, \r\n                                               enemySquaresRender, \r\n                                               true, \r\n                                               true))\r\n\r\n        playerQueens.forEach(a => checkArrays(blackBishopMoves, \r\n                                               a, \r\n                                               arrPlayerStalemate, \r\n                                               playerSquaresRender, \r\n                                               enemySquaresRender, \r\n                                               true, \r\n                                               true))\r\n\r\n        playerQueens.forEach(a => checkArrays(rookMoves.current, \r\n                                               a, \r\n                                               arrPlayerStalemate, \r\n                                               playerSquaresRender, \r\n                                               enemySquaresRender, \r\n                                               true, \r\n                                               true))\r\n\r\n        playerPawns.forEach(a => recordPlayerPawnMoves(a, null, arrPlayerStalemate))\r\n\r\n        recordPlayerKingMoves(playerKing, arrPlayerStalemate)\r\n\r\n        enemyRooks.forEach(a => checkArrays(rookMoves.current, \r\n                                            a, \r\n                                            arrEnemyStalemate, \r\n                                            enemySquaresRender, \r\n                                            playerSquaresRender, \r\n                                            true, \r\n                                            true))\r\n\r\n        enemyKnights.forEach(a => recordKnightMoves(a, arrEnemyStalemate, enemySquaresRender))\r\n\r\n        enemyBishops.forEach(a => checkArrays(whiteBishopMoves, \r\n                                              a, \r\n                                              arrEnemyStalemate, \r\n                                              enemySquaresRender, \r\n                                              playerSquaresRender, \r\n                                              true, \r\n                                              true))\r\n\r\n        enemyBishops.forEach(a => checkArrays(blackBishopMoves, \r\n                                              a, \r\n                                              arrEnemyStalemate, \r\n                                              enemySquaresRender, \r\n                                              playerSquaresRender, \r\n                                              true, \r\n                                              true))\r\n\r\n        enemyQueens.forEach(a => checkArrays(whiteBishopMoves, \r\n                                             a, \r\n                                             arrEnemyStalemate, \r\n                                             enemySquaresRender,\r\n                                              playerSquaresRender, \r\n                                             true, \r\n                                             true))\r\n\r\n        enemyQueens.forEach(a => checkArrays(blackBishopMoves, \r\n                                             a, \r\n                                             arrEnemyStalemate, \r\n                                             enemySquaresRender, \r\n                                             playerSquaresRender, \r\n                                             true, \r\n                                             true))\r\n\r\n        enemyQueens.forEach(a => checkArrays(rookMoves.current, \r\n                                             a, \r\n                                             arrEnemyStalemate, \r\n                                             enemySquaresRender, \r\n                                             playerSquaresRender, \r\n                                             true, \r\n                                             true))\r\n\r\n        enemyPawns.forEach(a => recordOpponentPawnMoves(a, null, arrEnemyStalemate))\r\n\r\n        recordEnemyKingMoves(enemyKing, arrEnemyStalemate)\r\n\r\n        arrPlayerStalemate = arrPlayerStalemate.filter(a => a > 0 && a < 65)\r\n        arrEnemyStalemate = arrEnemyStalemate.filter(a => a > 0 && a < 65)\r\n\r\n        if ((arrPlayerStalemate.length === 0 && !playerKingAttacked) \r\n            || (arrEnemyStalemate.length === 0 && !enemyKingAttacked) \r\n            || occupiedSquaresRender.length === 2 \r\n            || halfMoveCounter === 50) {\r\n \r\n            if (sounds) {\r\n                gameEndSound.play()\r\n            }\r\n\r\n            store.dispatch({\r\n                type: \"gameEnd\"\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"modalOpen\",\r\n                payload: true\r\n            })\r\n\r\n            if (halfMoveCounter === 50) {\r\n                store.dispatch({\r\n                    type: \"endMessage\",\r\n                    payload: \"Draw due to 50 move rule.\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"endMessage\",\r\n                    payload: \"Game ended due to stalemate.\"\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < moves.length; i++) {\r\n            if (JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 4]) && \r\n                JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 8])) {\r\n                    if (sounds) {\r\n                        gameEndSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"gameEnd\"\r\n                    })\r\n\r\n                    store.dispatch({\r\n                        type: \"modalOpen\",\r\n                        payload: true\r\n                    })\r\n\r\n                    store.dispatch({\r\n                        type: \"endMessage\",\r\n                        payload: \"Draw due to threefold repetition.\"\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    const animatePiece = (i, string, num1, num2) => {   \r\n        if (moves.length === 1) {\r\n            gameEndSound.play()\r\n        } \r\n\r\n        if (color === \"black\" && !sandbox) {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [num1 * -1, num2 * -1]\r\n            })\r\n        } else {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [num1, num2]\r\n            })\r\n        }\r\n\r\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\r\n            store.dispatch({\r\n                type: \"moveNumbers\"\r\n            })\r\n        }\r\n\r\n        if (/^o/.test(string)) {\r\n            if (playerSquaresRender.includes(i)){\r\n                if (playerPawns.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainOpponent\",\r\n                        payload: \"♙\"\r\n                    })  \r\n                }\r\n\r\n                if (playerKnights.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainOpponent\",\r\n                        payload: \"♘\"\r\n                    })  \r\n                }\r\n\r\n                if (playerBishops.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainOpponent\",\r\n                        payload: \"♗\"\r\n                    })  \r\n                }\r\n\r\n                if (playerRooks.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainOpponent\",\r\n                        payload: \"♖\"\r\n                    })  \r\n                }\r\n\r\n                if (playerQueens.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainOpponent\",\r\n                        payload: \"♕\"\r\n                    })  \r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"halfMoveCounter/reset\",\r\n                })\r\n\r\n                if (/^op/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^oh/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♘x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ob/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♗x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^or/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♖x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^oq/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♕x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ok/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♔x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\r\n                    setPawnPromotes(string)\r\n                }\r\n                \r\n                if (enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (/^ok/.test(string) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n                \r\n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                } \r\n\r\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\r\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\r\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if (sounds) {\r\n                    captureSound.play()\r\n                }\r\n            } else {\r\n                if (/^op/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: playerNewSquareForEngine.current\r\n                    })\r\n                }\r\n\r\n                if (/^oh/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♘${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ob/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♗${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^or/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♖${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^oq/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♕${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ok/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♔${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ok/.test(string) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (enemyKing8StarArr.current.flat().includes(i) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n                \r\n                if (checkedByPlayerArr.current.includes(i) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n                    \r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\r\n                    setPawnPromotes(string)\r\n                }\r\n\r\n                if (/^op/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"halfMoveCounter/reset\",\r\n                    })\r\n                } else {\r\n                    store.dispatch({\r\n                        type: \"halfMoveCounter/increase\",\r\n                    })\r\n                }\r\n                \r\n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: true\r\n                    })\r\n\r\n                    checkingPiece.current = i\r\n                } \r\n                \r\n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                } \r\n\r\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\r\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\r\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n                \r\n                if (sounds) {\r\n                    moveSound.play()\r\n                }\r\n            }\r\n\r\n            if (color === \"white\") {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            }\r\n\r\n            if ((color === \"black\" && toMove === \"w\") || (color === \"white\" && toMove === \"b\")) {\r\n                store.dispatch({\r\n                    type: \"moveCounter\"\r\n                })\r\n            }\r\n\r\n            if (/^pp/.test(enPassantSquare.current[1])) {\r\n                enPassantSquare.current = [0, \"\"]\r\n            } \r\n        }\r\n\r\n        if (/^p/.test(string)) {\r\n            if (enemySquaresRender.includes(i)) {\r\n                store.dispatch({\r\n                    type: \"halfMoveCounter/reset\",\r\n                })\r\n\r\n                if (enemyPawns.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainPlayer\",\r\n                        payload: \"♙\"\r\n                    })  \r\n                }\r\n\r\n                if (enemyKnights.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainPlayer\",\r\n                        payload: \"♘\"\r\n                    })  \r\n                }\r\n\r\n                if (enemyBishops.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainPlayer\",\r\n                        payload: \"♗\"\r\n                    })  \r\n                }\r\n\r\n                if (enemyRooks.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainPlayer\",\r\n                        payload: \"♖\"\r\n                    })  \r\n                }\r\n\r\n                if (enemyQueens.includes(i)) {\r\n                    store.dispatch({\r\n                        type: \"pieceGainPlayer\",\r\n                        payload: \"♕\"\r\n                    })  \r\n                }\r\n\r\n                if (/^pp/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^ph/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♘x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pb/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♗x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pr/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♖x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pq/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♕x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pk/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♔x${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (playerKingAttacked) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\r\n                    setPawnPromotes(string)\r\n                }\r\n\r\n                if (/^pk/.test(string) && playerKingAttacked) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n                \r\n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        captureSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                } \r\n\r\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \r\n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \r\n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if (sounds) {\r\n                    captureSound.play()\r\n                }\r\n            } else {\r\n                if (/^pp/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: playerNewSquareForEngine.current\r\n                    })\r\n                }\r\n\r\n                if (/^ph/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♘${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pb/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♗${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pr/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♖${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pq/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♕${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pk/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: `♔${playerNewSquareForEngine.current}`\r\n                    })\r\n                }\r\n\r\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\r\n                    setPawnPromotes(string)\r\n                }\r\n\r\n                if (/^pp/.test(string)) {\r\n                    store.dispatch({\r\n                        type: \"halfMoveCounter/reset\",\r\n                    })\r\n                } else {\r\n                    store.dispatch({\r\n                        type: \"halfMoveCounter/increase\",\r\n                    })\r\n                }\r\n\r\n                if (checkedByOpponentArr.current.includes(i) && playerKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (playerKing8StarArr.current.flat().includes(i) && playerKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n\r\n                if (/^pk/.test(string) && playerKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"playerKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                }\r\n                \r\n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: true\r\n                    })\r\n\r\n                    checkingPiece.current = i\r\n                } \r\n                \r\n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\r\n                    if (sounds) {\r\n                        moveSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: false\r\n                    })\r\n                } \r\n\r\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \r\n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \r\n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\r\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\r\n                    if (sounds) {\r\n                        checkSound.play()\r\n                    }\r\n\r\n                    store.dispatch({\r\n                        type: \"enemyKingAttacked\",\r\n                        payload: true\r\n                    })\r\n                }\r\n\r\n                if (sounds) {\r\n                    moveSound.play()\r\n                }\r\n            }\r\n\r\n            if (color === \"white\") {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            }\r\n\r\n            if (/^op/.test(enPassantSquare.current[1])) {\r\n                enPassantSquare.current = [0, \"\"]\r\n            }\r\n        }\r\n\r\n        checkedByOpponentArr.current = []\r\n        checkedByPlayerArr.current = []\r\n\r\n        store.dispatch({\r\n            type:\"moveSquares\",\r\n            payload: []\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"pieceSquare\",\r\n            payload: null\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"recordMoves\",\r\n            payload: JSON.stringify(store.getState().board.board)\r\n        })\r\n    }  \r\n\r\n    const moveKnight = (i, string) => {\r\n        switch (pieceSquareForEngine.current - i) {\r\n            case -17:\r\n                animatePiece(i, string, -80, -160)\r\n                break\r\n            case -15:\r\n                animatePiece(i, string, 80, -160)\r\n                break\r\n            case -10:\r\n                animatePiece(i, string, -160, -80)\r\n                break\r\n            case -6:\r\n                animatePiece(i, string, 160, -80)\r\n                break\r\n            case 6:\r\n                animatePiece(i, string, -160, 80)\r\n                break\r\n            case 10:\r\n                animatePiece(i, string, 160, 80)\r\n                break\r\n            case 15:\r\n                animatePiece(i, string, -80, 160)\r\n                break\r\n            case 17:\r\n                animatePiece(i, string, 80, 160)\r\n                break\r\n            default:\r\n                break\r\n        }   \r\n    }\r\n\r\n    const movePawn = (i, string) => {\r\n        if (i === enPassantSquare.current[0]) {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case -9:\r\n                    animateEnPassant(-80, -80, string, i)\r\n                    break\r\n                case -7:\r\n                    animateEnPassant(80, -80, string, i)\r\n                    break\r\n                case 7:\r\n                    animateEnPassant(-80, 80, string, i)\r\n                    break\r\n                case 9:\r\n                    animateEnPassant(80, 80, string, i)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        } else {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case 7:\r\n                    animatePiece(i, string, -80, 80)\r\n                    break\r\n                case 8:\r\n                    animatePiece(i, string, 0, 80)\r\n                    break\r\n                case 9:\r\n                    animatePiece(i, string, 80, 80)\r\n                    break\r\n                case 16:\r\n                    enPassantSquare.current = [i + 8, string]\r\n                    animatePiece(i, string, 0, 160)\r\n                    break\r\n                case -16: \r\n                    enPassantSquare.current = [i - 8, string]\r\n                    animatePiece(i, string, 0, -160)\r\n                    break\r\n                case -8: \r\n                    animatePiece(i, string, 0, -80)\r\n                    break\r\n                case -7: \r\n                    animatePiece(i, string, 80, -80)\r\n                    break\r\n                case -9: \r\n                    animatePiece(i, string, -80, -80)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    const moveBishop = (i, string) => {\r\n        switch (pieceSquareForEngine.current - i) {\r\n            case 9:\r\n                animatePiece(i, string, 80, 80)\r\n                break\r\n            case 18:\r\n                animatePiece(i, string, 160, 160)\r\n                break\r\n            case 27:\r\n                animatePiece(i, string, 240, 240)\r\n                break\r\n            case 36:\r\n                animatePiece(i, string, 320, 320)\r\n                break\r\n            case 45:\r\n                animatePiece(i, string, 400, 400)\r\n                break\r\n            case 54:\r\n                animatePiece(i, string, 480, 480)\r\n                break\r\n            case 63:\r\n                animatePiece(i, string, 560, 560)\r\n                break\r\n            case -9: \r\n                animatePiece(i, string, -80, -80)\r\n                break\r\n            case -18:\r\n                animatePiece(i, string, -160, -160)\r\n                break\r\n            case -27:\r\n                animatePiece(i, string, -240, -240)\r\n                break\r\n            case -36:\r\n                animatePiece(i, string, -320, -320)\r\n                break\r\n            case -45:\r\n                animatePiece(i, string, -400, -400)\r\n                break\r\n            case -54:\r\n                animatePiece(i, string, -480, -480)\r\n                break\r\n            case -63:\r\n                animatePiece(i, string, -560, -560)\r\n                break\r\n            case 7:\r\n                animatePiece(i, string, -80, 80)\r\n                break\r\n            case 14:\r\n                animatePiece(i, string, -160, 160)\r\n                break\r\n            case 21: \r\n                animatePiece(i, string, -240, 240)\r\n                break\r\n            case 28: \r\n                animatePiece(i, string, -320, 320)\r\n                break\r\n            case 35: \r\n                animatePiece(i, string, -400, 400)\r\n                break\r\n            case 42: \r\n                animatePiece(i, string, -480, 480)\r\n                break\r\n            case -7:\r\n                animatePiece(i, string, 80, -80)\r\n                break\r\n            case -14:\r\n                animatePiece(i, string, 160, -160)\r\n                break\r\n            case -21: \r\n                animatePiece(i, string, 240, -240)\r\n                break\r\n            case -28: \r\n                animatePiece(i, string, 320, -320)\r\n                break\r\n            case -35: \r\n                animatePiece(i, string, 400, -400)\r\n                break\r\n            case -42: \r\n                animatePiece(i, string, 480, -480)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const moveRook = (i, string) => {\r\n        switch (pieceSquareForEngine.current - i) {\r\n            case 8:\r\n                animatePiece(i, string, 0, 80)\r\n                break\r\n            case 16:\r\n                animatePiece(i, string, 0, 160)\r\n                break\r\n            case 24:\r\n                animatePiece(i, string, 0, 240)\r\n                break\r\n            case 32:\r\n                animatePiece(i, string, 0, 320)\r\n                break\r\n            case 40:\r\n                animatePiece(i, string, 0, 400)\r\n                break\r\n            case 48:\r\n                animatePiece(i, string, 0, 480)\r\n                break\r\n            case 56:\r\n                animatePiece(i, string, 0, 560)\r\n                break\r\n            case -8:\r\n                animatePiece(i, string, 0, -80)\r\n                break\r\n            case -16:\r\n                animatePiece(i, string, 0, -160)\r\n                break\r\n            case -24:\r\n                animatePiece(i, string, 0, -240)\r\n                break\r\n            case -32:\r\n                animatePiece(i, string, 0, -320)\r\n                break\r\n            case -40:\r\n                animatePiece(i, string, 0, -400)\r\n                break\r\n            case -48:\r\n                animatePiece(i, string, 0, -480)\r\n                break\r\n            case -56:\r\n                animatePiece(i, string, 0, -560)\r\n                break\r\n            case 1:\r\n                animatePiece(i, string, 80, 0)\r\n                break\r\n            case 2:\r\n                animatePiece(i, string, 160, 0)\r\n                break\r\n            case 3:\r\n                animatePiece(i, string, 240, 0)\r\n                break\r\n            case 4:\r\n                animatePiece(i, string, 320, 0)\r\n                break\r\n            case 5:\r\n                animatePiece(i, string, 400, 0)\r\n                break\r\n            case 6:\r\n                animatePiece(i, string, 480, 0)\r\n                break\r\n            case 7:\r\n                animatePiece(i, string, 560, 0)\r\n                break\r\n            case -1:\r\n                animatePiece(i, string, -80, 0)\r\n                break\r\n            case -2:\r\n                animatePiece(i, string, -160, 0)\r\n                break\r\n            case -3:\r\n                animatePiece(i, string, -240, 0)\r\n                break\r\n            case -4:\r\n                animatePiece(i, string, -320, 0)\r\n                break\r\n            case -5:\r\n                animatePiece(i, string, -400, 0)\r\n                break\r\n            case -6:\r\n                animatePiece(i, string, -480, 0)\r\n                break\r\n            case -7:\r\n                animatePiece(i, string, -560, 0)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const moveQueen = (i, string) => {\r\n        if ((knightLimits.current[0].includes(pieceSquare) || knightLimits.current[3].includes(pieceSquare)) \r\n            && (knightLimits.current[0].includes(i) || knightLimits.current[3].includes(i))) {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case -7:\r\n                    animatePiece(i, string, -560, 0)\r\n                    break\r\n                case 7:\r\n                    animatePiece(i, string, 560, 0)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        } else {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case -7:\r\n                    animatePiece(i, string, 80, -80)\r\n                    break\r\n                case 7:\r\n                    animatePiece(i, string, -80, 80)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        switch (pieceSquareForEngine.current - i) {                                                   \r\n            case 9:\r\n                animatePiece(i, string, 80, 80)\r\n                break\r\n            case 18:\r\n                animatePiece(i, string, 160, 160)\r\n                break\r\n            case 27:\r\n                animatePiece(i, string, 240, 240)\r\n                break\r\n            case 36:\r\n                animatePiece(i, string, 320, 320)\r\n                break\r\n            case 45:\r\n                animatePiece(i, string, 400, 400)\r\n                break\r\n            case 54:\r\n                animatePiece(i, string, 480, 480)\r\n                break\r\n            case 63:\r\n                animatePiece(i, string, 560, 560)\r\n                break\r\n            case -9: \r\n                animatePiece(i, string, -80, -80)\r\n                break\r\n            case -18:\r\n                animatePiece(i, string, -160, -160)\r\n                break\r\n            case -27:\r\n                animatePiece(i, string, -240, -240)\r\n                break\r\n            case -36:\r\n                animatePiece(i, string, -320, -320)\r\n                break\r\n            case -45:\r\n                animatePiece(i, string, -400, -400)\r\n                break\r\n            case -54:\r\n                animatePiece(i, string, -480, -480)\r\n                break\r\n            case -63:\r\n                animatePiece(i, string, -560, -560)\r\n                break\r\n            case 14:\r\n                animatePiece(i, string, -160, 160)\r\n                break\r\n            case 21: \r\n                animatePiece(i, string, -240, 240)\r\n                break\r\n            case 28: \r\n                animatePiece(i, string, -320, 320)\r\n                break\r\n            case 35: \r\n                animatePiece(i, string, -400, 400)\r\n                break\r\n            case 42: \r\n                animatePiece(i, string, -480, 480)\r\n                break\r\n            case -14:\r\n                animatePiece(i, string, 160, -160)\r\n                break\r\n            case -21: \r\n                animatePiece(i, string, 240, -240)\r\n                break\r\n            case -28: \r\n                animatePiece(i, string, 320, -320)\r\n                break\r\n            case -35: \r\n                animatePiece(i, string, 400, -400)\r\n                break\r\n            case -42: \r\n                animatePiece(i, string, 480, -480)\r\n                break\r\n            case 8:\r\n                animatePiece(i, string, 0, 80)\r\n                break\r\n            case 16:\r\n                animatePiece(i, string, 0, 160)\r\n                break\r\n            case 24:\r\n                animatePiece(i, string, 0, 240)\r\n                break\r\n            case 32:\r\n                animatePiece(i, string, 0, 320)\r\n                break\r\n            case 40:\r\n                animatePiece(i, string, 0, 400)\r\n                break\r\n            case 48:\r\n                animatePiece(i, string, 0, 480)\r\n                break\r\n            case 56:\r\n                animatePiece(i, string, 0, 560)\r\n                break\r\n            case -8:\r\n                animatePiece(i, string, 0, -80)\r\n                break\r\n            case -16:\r\n                animatePiece(i, string, 0, -160)\r\n                break\r\n            case -24:\r\n                animatePiece(i, string, 0, -240)\r\n                break\r\n            case -32:\r\n                animatePiece(i, string, 0, -320)\r\n                break\r\n            case -40:\r\n                animatePiece(i, string, 0, -400)\r\n                break\r\n            case -48:\r\n                animatePiece(i, string, 0, -480)\r\n                break\r\n            case -56:\r\n                animatePiece(i, string, 0, -560)\r\n                break\r\n            case 1:\r\n                animatePiece(i, string, 80, 0)\r\n                break\r\n            case 2:\r\n                animatePiece(i, string, 160, 0)\r\n                break\r\n            case 3:\r\n                animatePiece(i, string, 240, 0)\r\n                break\r\n            case 4:\r\n                animatePiece(i, string, 320, 0)\r\n                break\r\n            case 5:\r\n                animatePiece(i, string, 400, 0)\r\n                break\r\n            case 6:\r\n                animatePiece(i, string, 480, 0)\r\n                break\r\n            case -1:\r\n                animatePiece(i, string, -80, 0)\r\n                break\r\n            case -2:\r\n                animatePiece(i, string, -160, 0)\r\n                break\r\n            case -3:\r\n                animatePiece(i, string, -240, 0)\r\n                break\r\n            case -4:\r\n                animatePiece(i, string, -320, 0)\r\n                break\r\n            case -5:\r\n                animatePiece(i, string, -400, 0)\r\n                break\r\n            case -6:\r\n                animatePiece(i, string, -480, 0)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const animateCastling = (coor1, coor2, rookOldSq, newSqRook, rookToMove) => {\r\n        if (sounds) {\r\n           castlingSound.play()\r\n        }\r\n        \r\n        if (color === \"black\" && sandbox) {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [coor1, coor2]\r\n            })\r\n            \r\n            if (/or/.test(rookToMove)) {\r\n                store.dispatch({\r\n                    type: \"oldSquare\",\r\n                    payload: rookOldSq\r\n                })\r\n                store.dispatch({\r\n                    type: \"newSquare\",\r\n                    payload: newSqRook - 1\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"oldSquare\",\r\n                    payload: rookOldSq\r\n                })\r\n                store.dispatch({\r\n                    type: \"newSquare\",\r\n                    payload: newSqRook - 1\r\n                })\r\n            }\r\n\r\n            if (rookToMove === \"pr1\") {\r\n                playerRook1 = newSqRook - 1\r\n            }\r\n\r\n            if (rookToMove === \"pr2\") {\r\n                playerRook2 = newSqRook - 1\r\n            }\r\n\r\n            if (rookToMove === \"or1\") {\r\n                enemyRook1 = newSqRook - 1\r\n            }\r\n\r\n            if (rookToMove === \"or2\") {\r\n                enemyRook2 = newSqRook - 1\r\n            }\r\n        } else if (color === \"black\" && !sandbox) {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [coor1 * -1, coor2 * -1]\r\n            })\r\n\r\n            if (/or/.test(rookToMove)) {\r\n                store.dispatch({\r\n                    type: \"oldSquare\",\r\n                    payload: rookOldSq + 56\r\n                })\r\n                store.dispatch({\r\n                    type: \"newSquare\",\r\n                    payload: newSqRook + 56\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"oldSquare\",\r\n                    payload: rookOldSq - 56\r\n                })\r\n                store.dispatch({\r\n                    type: \"newSquare\",\r\n                    payload: newSqRook - 56\r\n                })\r\n            }\r\n\r\n            if (rookToMove === \"pr1\") {\r\n                playerRook1 = newSqRook - 56\r\n            }\r\n\r\n            if (rookToMove === \"pr2\") {\r\n                playerRook2 = newSqRook - 56\r\n            }\r\n\r\n            if (rookToMove === \"or1\") {\r\n                enemyRook1 = newSqRook + 56\r\n            }\r\n            \r\n            if (rookToMove === \"or2\") {\r\n                enemyRook2 = newSqRook + 56\r\n            }\r\n        } else {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [coor1, coor2]\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"oldSquare\",\r\n                payload: rookOldSq\r\n            })\r\n    \r\n            store.dispatch({\r\n                type: \"newSquare\",\r\n                payload: newSqRook\r\n            })\r\n\r\n            if (rookToMove === \"pr1\") {\r\n                playerRook1 = newSqRook\r\n            }\r\n\r\n            if (rookToMove === \"pr2\") {\r\n                playerRook2 = newSqRook\r\n            }\r\n\r\n            if (rookToMove === \"or1\") {\r\n                enemyRook1 = newSqRook\r\n            }\r\n\r\n            if (rookToMove === \"or2\") {\r\n                enemyRook2 = newSqRook\r\n            }\r\n        }\r\n\r\n        store.dispatch({\r\n            type: rookToMove\r\n        })\r\n\r\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"b\")) {\r\n            store.dispatch({\r\n                type: \"moveNumbers\"\r\n            })\r\n        }\r\n\r\n        playerRooks = [playerRook1, \r\n                       playerRook2, \r\n                       playerRook3, \r\n                       playerRook4, \r\n                       playerRook5, \r\n                       playerRook6, \r\n                       playerRook7, \r\n                       playerRook8, \r\n                       playerRook9, \r\n                       playerRook01]\r\n        enemyRooks = [enemyRook1, \r\n                      enemyRook2, \r\n                      enemyRook3, \r\n                      enemyRook4, \r\n                      enemyRook5, \r\n                      enemyRook6, \r\n                      enemyRook7, \r\n                      enemyRook8, \r\n                      enemyRook9, \r\n                      enemyRook01]\r\n\r\n        recordBoard()\r\n\r\n        if (/^pr/.test(rookToMove)) {\r\n            if ((playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        } else {\r\n            if ((enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                      .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        store.dispatch({\r\n            type:\"moveSquares\",\r\n            payload: []\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"pieceSquare\",\r\n            payload: null\r\n        })\r\n\r\n        if (color === \"white\") {\r\n            if (/^pr/.test(rookToMove)) {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            }\r\n        } else {\r\n            if (/^or/.test(rookToMove)) {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            }\r\n        }\r\n\r\n        store.dispatch({\r\n            type: \"recordMoves\",\r\n            payload: JSON.stringify(store.getState().board.board)\r\n        })\r\n    }\r\n\r\n    const animateEnPassant = (coor1, coor2, string, i) => {\r\n        if (color === \"black\" && !sandbox) {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [coor1 * -1, coor2 * -1]\r\n            })\r\n        } else {\r\n            store.dispatch({\r\n                type: \"setMoveVar\",\r\n                payload: [coor1, coor2]\r\n            })\r\n        }\r\n\r\n        let capturedPawn = i\r\n\r\n        if (/^pp/.test(string)) {\r\n            capturedPawn += 8\r\n        } else {\r\n            capturedPawn -= 8\r\n        }\r\n\r\n        store.dispatch({\r\n            type: \"oldSquare\",\r\n            payload: i\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"newSquare\",\r\n            payload: capturedPawn\r\n        })\r\n\r\n        store.dispatch({\r\n            type: string,\r\n            payload: \"takes\"\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"oldSquare\",\r\n            payload: capturedPawn\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"newSquare\",\r\n            payload: i\r\n        })\r\n\r\n        store.dispatch({\r\n            type: string\r\n        })\r\n\r\n        recordBoard()\r\n\r\n        if (/^pp/.test(string)) {\r\n            store.dispatch({\r\n                type: \"moveNumbers\"\r\n            })\r\n\r\n            store.dispatch({\r\n                type: \"notationArr\",\r\n                payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\r\n            })\r\n            \r\n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \r\n                || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                      .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n\r\n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \r\n                || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\r\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"enemyKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        } else {\r\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\r\n                || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                      .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n\r\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\r\n                || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\r\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\r\n                                    .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\r\n                if (sounds) {\r\n                    checkSound.play()\r\n                }\r\n\r\n                store.dispatch({\r\n                    type: \"playerKingAttacked\",\r\n                    payload: true\r\n                })\r\n            }\r\n        }\r\n\r\n        if (sounds) {\r\n            captureSound.play()\r\n        }\r\n\r\n        store.dispatch({\r\n            type:\"moveSquares\",\r\n            payload: []\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"pieceSquare\",\r\n            payload: null\r\n        })\r\n\r\n        if (color === \"white\") {\r\n            if (/^pp/.test(string)) {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            }\r\n        } else {\r\n            if (/^op/.test(string)) {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"w\"\r\n                })\r\n            } else {\r\n                store.dispatch({\r\n                    type: \"toMove\",\r\n                    payload: \"b\"\r\n                })\r\n            }\r\n        }\r\n\r\n        store.dispatch({\r\n            type: \"recordMoves\",\r\n            payload: JSON.stringify(store.getState().board.board)\r\n        })\r\n    }\r\n\r\n    const moveKing = (i, string) => {\r\n        if (/^pk/.test(string)) {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case -2:\r\n                    animateCastling(-160, 0, 64, 62, \"pr2\")\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: \"O-O\"\r\n                    })\r\n                    break\r\n                case 2:\r\n                    animateCastling(160, 0, 57, 60, \"pr1\")\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: \"O-O-O\"\r\n                    })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n        if (/^ok/.test(string)) {\r\n            switch (pieceSquareForEngine.current - i) {\r\n                case 2:\r\n                    animateCastling(160, 0, 1, 4, \"or2\")\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: \"O-O-O\"\r\n                    })\r\n                    break\r\n                case -2:\r\n                    animateCastling(-160, 0, 8, 6, \"or1\")\r\n                    store.dispatch({\r\n                        type: \"notationArr\",\r\n                        payload: \"O-O\"\r\n                    })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n        switch (pieceSquareForEngine.current - i) {\r\n            case 9:\r\n                animatePiece(i, string, 80, 80)\r\n                break\r\n            case 8:\r\n                animatePiece(i, string, 0, 80)\r\n                break\r\n            case 7:\r\n                animatePiece(i, string, -80, 80)\r\n                break\r\n            case 1:\r\n                animatePiece(i, string, 80, 0)\r\n                break\r\n            case -1:\r\n                animatePiece(i, string, -80, 0)\r\n                break\r\n            case -7:\r\n                animatePiece(i, string, 80, -80)\r\n                break\r\n            case -8:\r\n                animatePiece(i, string, 0, -80)\r\n                break\r\n            case -9:\r\n                animatePiece(i, string, -80, -80)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderPieces()}\r\n            {renderMovement()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pieces"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","stringToSend","enemyQueen1","enemyQueen2","enemyQueen3","enemyQueen4","enemyQueen5","enemyQueen6","enemyQueen7","enemyQueen8","enemyQueen9","useState","pawnPromotes","setPawnPromotes","activePiece","useSelector","state","board","castlingEnemyMoved","castlingPlayerMoved","enemyKingAttacked","gameEnd","halfMoveCounter","moveCounter","moveSquares","moveVar","pawnsFirstMove","pieceSquare","playerKingAttacked","toMove","sandbox","options","color","animations","behavior","sounds","moves","progression","currentMove","boardEntries","Object","entries","filteredEnemyRender","filter","key","test","filteredEnemyLive","store","justEnemyRender","fromEntries","justEnemyLive","filteredPlayerRender","filteredPlayerLive","justPlayerRender","justPlayerLive","filteredOccupiedRender","filteredOccupiedLive","justOccupiedRender","justOccupiedLive","enemySquaresRender","values","map","a","playerSquaresRender","occupiedSquaresRender","enemySquaresLive","playerSquaresLive","occupiedSquaresLive","enPassantSquare","useRef","pieceSquareForEngine","pieceNewSquare","notInitialRender","checkingPiece","wasmSupported","WebAssembly","validate","Uint8Array","of","stockfish","Worker","playerPiece","playerNewSquareForEngine","animationSpeed","moveSound","Audio","moveSoundFile","captureSound","captureSoundFile","castlingSound","castlingSoundFile","checkSound","checkSoundFile","gameEndSound","gameEndSoundFile","knightLimits","whiteBishopMoves","blackBishopMoves","rookMoves","enemyBishop1","ob1","enemyBishop2","ob2","enemyBishop3","ob3","enemyBishop4","ob4","enemyBishop5","ob5","enemyBishop6","ob6","enemyBishop7","ob7","enemyBishop8","ob8","enemyBishop9","ob9","enemyBishop01","ob01","enemyKnight1","oh1","enemyKnight2","oh2","enemyKnight3","oh3","enemyKnight4","oh4","enemyKnight5","oh5","enemyKnight6","oh6","enemyKnight7","oh7","enemyKnight8","oh8","enemyKnight9","oh9","enemyKnight01","oh01","enemyRook1","or1","enemyRook2","or2","enemyRook3","or3","enemyRook4","or4","enemyRook5","or5","enemyRook6","or6","enemyRook7","or7","enemyRook8","or8","enemyRook9","or9","enemyRook01","or01","oqb1","oqw1","oqb2","oqw2","oqb3","oqw3","oqb4","oqw4","oqb5","oqw5","oqb6","oqw6","oqb7","oqw7","oqb8","oqw8","oqb9","oqw9","playerQueen1","playerQueen2","playerQueen3","playerQueen4","playerQueen5","playerQueen6","playerQueen7","playerQueen8","playerQueen9","enemyKing","okw","okb","enemyPawn1","op1","enemyPawn2","op2","enemyPawn3","op3","enemyPawn4","op4","enemyPawn5","op5","enemyPawn6","op6","enemyPawn7","op7","enemyPawn8","op8","playerBishop1","pb1","playerBishop2","pb2","playerBishop3","pb3","playerBishop4","pb4","playerBishop5","pb5","playerBishop6","pb6","playerBishop7","pb7","playerBishop8","pb8","playerBishop9","pb9","playerBishop01","pb01","playerKnight1","ph1","playerKnight2","ph2","playerKnight3","ph3","playerKnight4","ph4","playerKnight5","ph5","playerKnight6","ph6","playerKnight7","ph7","playerKnight8","ph8","playerKnight9","ph9","playerKnight01","ph01","playerRook1","pr1","playerRook2","pr2","playerRook3","pr3","playerRook4","pr4","playerRook5","pr5","playerRook6","pr6","playerRook7","pr7","playerRook8","pr8","playerRook9","pr9","playerRook01","pr01","pqw1","pqb1","pqw2","pqb2","pqw3","pqb3","pqw4","pqb4","pqw5","pqb5","pqw6","pqb6","pqw7","pqb7","pqw8","pqb8","pqw9","pqb9","playerKing","pkw","pkb","playerPawn1","pp1","playerPawn2","pp2","playerPawn3","pp3","playerPawn4","pp4","playerPawn5","pp5","playerPawn6","pp6","playerPawn7","pp7","playerPawn8","pp8","checkedByPlayerArr","attackedByPlayerArr","attackedByOpponentArr","checkedByOpponentArr","playerHorseSafetyArr","enemyHorseSafetyArr","playerKing8StarArr","enemyKing8StarArr","protectedByPlayerArr","protectedByOpponentArr","playerKing8StarXrayArr","enemyKing8StarXrayArr","playerKingSpiderSenseArr","enemyKingSpiderSenseArr","playerRooks","playerKnights","playerBishops","playerQueens","playerPawns","enemyRooks","enemyKnights","enemyBishops","enemyQueens","enemyPawns","recordBoard","kingSpiderSense","attacked","king8Star","horseSafety","some","current","includes","useEffect","type","payload","JSON","stringify","postMessage","checkGameEnd","movePiece","setTimeout","resetPiece","clearTimeout","engineTurn","useMemo","push","addEventListener","data","engineOldSquare","slice","engineNewSquare","enginePieceToMove","flat","enginePieceSquare","engineWhereToMove","recordOpponentPawnAttacks","split","promotePawn","updateStateBoard","movePawn","checkArrays","moveBishop","recordKnightMoves","moveKnight","moveRook","moveQueen","moveKing","encode","string","fen","arr","fenEncode","fenArrays","j","fenString","temp","reducedArr","elem","join","customReducer","pk","ok","combThroughSubArrayPlus","index","subArr","arrResult","ownArr","oppArr","exclude","Math","max","combThroughSubArrayMinus","min","king","squares","ownSquares","oppSquares","arrRes","boolean","rooks","knights","bishops","queens","pawns","protect","forEach","recordPlayerPawnAttacks","pawn","pieceToPromoteTo","play","arrayChecked","exclude1","exclude2","arr2","k","arrMoves","excArr","number","arrTech","recordPlayerPawnMoves","piece","recordOpponentPawnMoves","recordPlayerKingMoves","recordEnemyKingAttacks","x","recordEnemyKingMoves","recordPlayerKingAttacks","onSquareClick","oldSquare","arrPlayerCheckmate","arrEnemyCheckmate","arrPlayerStalemate","arrEnemyStalemate","animatePiece","num1","num2","every","animateEnPassant","animateCastling","coor1","coor2","rookOldSq","newSqRook","rookToMove","capturedPawn","renderEachPiece","src1","src2","alt1","alt2","src","alt","className","style","transform","transition","height","renderRoyals","renderPlayerPromotion","display","whiteQueen","blackQueen","onClick","whiteRook","blackRook","whiteBishop","blackBishop","whiteKnight","blackKnight","renderOpponentPromotion","renderEntries","whiteKing","blackKing","blackPawn","whitePawn","parse","renderPieces","renderMovement"],"sourceRoot":""}