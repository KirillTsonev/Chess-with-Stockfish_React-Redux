{"version":3,"file":"static/js/344.5d9c102b.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/pieces/Pieces.jsx"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/* eslint-disable array-callback-return */\n/* eslint-disable no-loop-func */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport whiteKing from \"../../images/whiteKing.png\"\nimport blackKing from \"../../images/blackKing.png\"\nimport whiteQueen from \"../../images/whiteQueen.png\"\nimport blackQueen from \"../../images/blackQueen.png\"\nimport whiteRook from \"../../images/whiteRook.png\"\nimport blackRook from \"../../images/blackRook.png\"\nimport whiteKnight from \"../../images/whiteKnight.png\"\nimport blackKnight from \"../../images/blackKnight.png\"\nimport whiteBishop from \"../../images/whiteBishop.png\"\nimport blackBishop from \"../../images/blackBishop.png\"\nimport whitePawn from \"../../images/whitePawn.png\"\nimport blackPawn from \"../../images/blackPawn.png\"\n\nimport moveSoundFile from \"../../sounds/move.ogg\"\nimport captureSoundFile from \"../../sounds/capture.ogg\"\nimport checkSoundFile from \"../../sounds/check.ogg\"\nimport castlingSoundFile from \"../../sounds/castling.ogg\"\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\n\nimport { useSelector } from \"react-redux\"\nimport { useState, useEffect, useRef, useMemo } from \"react\"\n\nimport store from \"../redux/store\"\n\nimport \"./pieces.sass\"\n\nconst Pieces = () => {\n    const [pawnPromotes, setPawnPromotes] = useState(\"\")\n\n    const activePiece = useSelector(state => state.board.activePiece)\n    const board = useSelector(state => state.board.board)\n    const castlingEnemyMoved = useSelector(state => state.board.castlingEnemyMoved)\n    const castlingPlayerMoved = useSelector(state => state.board.castlingPlayerMoved)\n    const enemyKingAttacked = useSelector(state => state.board.enemyKingAttacked)\n    const gameEnd = useSelector(state => state.board.gameEnd)\n    const halfMoveCounter = useSelector(state => state.board.halfMoveCounter)\n    const moveCounter = useSelector(state => state.board.moveCounter)\n    const moveSquares = useSelector(state => state.board.moveSquares)\n    const moveVar = useSelector(state => state.board.moveVar)\n    const pawnsFirstMove = useSelector(state => state.board.pawnsFirstMove)  \n    const pieceSquare = useSelector(state => state.board.pieceSquare)\n    const playerKingAttacked = useSelector(state => state.board.playerKingAttacked)\n    const toMove = useSelector(state => state.board.toMove)\n    const checkArrPlayer = useSelector(state => state.board.checkArrPlayer)\n    const checkArrOpponent = useSelector(state => state.board.checkArrOpponent)\n\n    const sandbox = useSelector(state => state.options.sandbox)\n    const color = useSelector(state => state.options.color)\n    const options = useSelector(state => state.options.options)\n    const skillLevel = useSelector(state => state.options.skillLevel)\n    const depth = useSelector(state => state.options.depth)\n    const milliseconds = useSelector(state => state.options.milliseconds)\n\n    const numbers = useSelector(state => state.behavior.numbers)\n    const animations = useSelector(state => state.behavior.animations)\n    const sounds = useSelector(state => state.behavior.sounds)\n\n    const moves = useSelector(state => state.progression.moves)\n    const currentMove = useSelector(state => state.progression.currentMove)\n\n    const wasmSupported = typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\n    const stockfish = useMemo(() => !sandbox ? new Worker(wasmSupported ? 'stockfish.wasm.js' : 'stockfish.js') : null, []) \n    \n    let boardEntries = Object.entries(board)\n\n    let filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n    let filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n    let justEnemyRender = Object.fromEntries(filteredEnemyRender)\n    let justEnemyLive = Object.fromEntries(filteredEnemyLive)\n    \n    let filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n    let filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))\n    let justPlayerRender = Object.fromEntries(filteredPlayerRender)\n    let justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n    let filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n    let filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n    let justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n    let justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n    let enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n    let playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n    let occupiedSquaresRender =  Object.values(justOccupiedRender).map(a => a = a[0])\n\n    let enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n    let playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n    let occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n    const enPassantSquare = useRef([0, \"\"])\n\n    const pieceSquareForEngine = useRef(1)\n    const pieceNewSquare = useRef(1)\n    const notInitialRender = useRef(false)\n    const checkingPiece = useRef(null)\n\n    const playerPiece = useRef(null)\n    const playerNewSquareForEngine = useRef(null)\n\n    const animationSpeed = useRef()\n\n    const engineData = useRef(\"\")\n\n    const moveSound = new Audio(moveSoundFile)\n    const captureSound = new Audio(captureSoundFile)\n    const castlingSound = new Audio(castlingSoundFile)\n    const checkSound = new Audio(checkSoundFile)\n    const gameEndSound = new Audio(gameEndSoundFile)\n\n    const knightLimits = useRef([[], [], [], []])\n\n    const whiteBishopMoves = [\n        [7, 16],\n        [5, 14, 23, 32],\n        [3, 12, 21, 30, 39, 48],\n        [1, 10, 19, 28, 37, 46, 55, 64],\n        [17, 26, 35, 44, 53, 62],\n        [33, 42, 51, 60],\n        [49, 58],\n        [3, 10, 17],\n        [5, 12, 19, 26, 33],\n        [7, 14, 21, 28, 35, 42, 49],\n        [16, 23, 30, 37, 44, 51, 58],\n        [32, 39, 46, 53, 60],\n        [48, 55, 62]\n    ]\n\n    const blackBishopMoves = [\n        [2, 9],\n        [4, 11, 18, 25],\n        [6, 13, 20, 27, 34, 41],\n        [8, 15, 22, 29, 36, 43, 50, 57],\n        [24, 31, 38, 45, 52, 59],\n        [40, 47, 54, 61],\n        [56, 63],\n        [6, 15, 24],\n        [4, 13, 22, 31, 40],\n        [2, 11, 20, 29, 38, 47, 56],\n        [9, 18, 27, 36, 45, 54, 63],\n        [25, 34, 43, 52, 61],\n        [41, 50, 59]\n    ]\n\n    const rookMoves = useRef([[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []])\n\n    let stringToSend\n\n    let enemyBishop1 = board.ob1 ? board.ob1[0] : null\n    let enemyBishop2 = board.ob2 ? board.ob2[0] : null\n    let enemyBishop3 = board.ob3 ? board.ob3[0] : null\n    let enemyBishop4 = board.ob4 ? board.ob4[0] : null\n    let enemyBishop5 = board.ob5 ? board.ob5[0] : null\n    let enemyBishop6 = board.ob6 ? board.ob6[0] : null\n    let enemyBishop7 = board.ob7 ? board.ob7[0] : null\n    let enemyBishop8 = board.ob8 ? board.ob8[0] : null\n    let enemyBishop9 = board.ob9 ? board.ob9[0] : null\n    let enemyBishop01 = board.ob01 ? board.ob01[0] : null\n\n    let enemyKnight1 = board.oh1 ? board.oh1[0] : null\n    let enemyKnight2 = board.oh2 ? board.oh2[0] : null\n    let enemyKnight3 = board.oh3 ? board.oh3[0] : null\n    let enemyKnight4 = board.oh4 ? board.oh4[0] : null\n    let enemyKnight5 = board.oh5 ? board.oh5[0] : null\n    let enemyKnight6 = board.oh6 ? board.oh6[0] : null\n    let enemyKnight7 = board.oh7 ? board.oh7[0] : null\n    let enemyKnight8 = board.oh8 ? board.oh8[0] : null\n    let enemyKnight9 = board.oh9 ? board.oh9[0] : null\n    let enemyKnight01 = board.oh01 ? board.oh01[0] : null\n\n    let enemyRook1 = board.or1 ? board.or1[0] : null\n    let enemyRook2 = board.or2 ? board.or2[0] : null\n    let enemyRook3 = board.or3 ? board.or3[0] : null\n    let enemyRook4 = board.or4 ? board.or4[0] : null\n    let enemyRook5 = board.or5 ? board.or5[0] : null\n    let enemyRook6 = board.or6 ? board.or6[0] : null\n    let enemyRook7 = board.or7 ? board.or7[0] : null\n    let enemyRook8 = board.or8 ? board.or8[0] : null\n    let enemyRook9 = board.or9 ? board.or9[0] : null\n    let enemyRook01 = board.or01 ? board.or01[0] : null\n\n    let enemyQueen1\n    let enemyQueen2\n    let enemyQueen3\n    let enemyQueen4\n    let enemyQueen5\n    let enemyQueen6\n    let enemyQueen7\n    let enemyQueen8\n    let enemyQueen9\n\n    color === \"white\" ? (enemyQueen1 = board.oqb1 ? board.oqb1[0] : null) \n                      : (enemyQueen1 = board.oqw1 ? board.oqw1[0] : null)\n    \n    color === \"white\" ? (enemyQueen2 = board.oqb2 ? board.oqb2[0] : null) \n                      : (enemyQueen2 = board.oqw2 ? board.oqw2[0] : null)\n    \n    color === \"white\" ? (enemyQueen3 = board.oqb3 ? board.oqb3[0] : null) \n                      : (enemyQueen3 = board.oqw3 ? board.oqw3[0] : null)\n    \n    color === \"white\" ? (enemyQueen4 = board.oqb4 ? board.oqb4[0] : null) \n                      : (enemyQueen4 = board.oqw4 ? board.oqw4[0] : null)\n    \n    color === \"white\" ? (enemyQueen5 = board.oqb5 ? board.oqb5[0] : null) \n                      : (enemyQueen5 = board.oqw5 ? board.oqw5[0] : null)\n    \n    color === \"white\" ? (enemyQueen6 = board.oqb6 ? board.oqb6[0] : null) \n                      : (enemyQueen6 = board.oqw6 ? board.oqw6[0] : null)\n    \n    color === \"white\" ? (enemyQueen7 = board.oqb7 ? board.oqb7[0] : null) \n                      : (enemyQueen7 = board.oqw7 ? board.oqw7[0] : null)\n    \n    color === \"white\" ? (enemyQueen8 = board.oqb8 ? board.oqb8[0] : null) \n                      : (enemyQueen8 = board.oqw8 ? board.oqw8[0] : null)\n    \n    color === \"white\" ? (enemyQueen9 = board.oqb9 ? board.oqb9[0] : null) \n                      : (enemyQueen9 = board.oqw9 ? board.oqw9[0] : null)\n\n    let enemyKing = board.okw ? board.okw[0] : board.okb[0]\n\n    let enemyPawn1 = board.op1 ? board.op1[0] : null\n    let enemyPawn2 = board.op2 ? board.op2[0] : null\n    let enemyPawn3 = board.op3 ? board.op3[0] : null\n    let enemyPawn4 = board.op4 ? board.op4[0] : null\n    let enemyPawn5 = board.op5 ? board.op5[0] : null\n    let enemyPawn6 = board.op6 ? board.op6[0] : null\n    let enemyPawn7 = board.op7 ? board.op7[0] : null\n    let enemyPawn8 = board.op8 ? board.op8[0] : null\n\n    let playerBishop1 = board.pb1 ? board.pb1[0] : null\n    let playerBishop2 = board.pb2 ? board.pb2[0] : null\n    let playerBishop3 = board.pb3 ? board.pb3[0] : null\n    let playerBishop4 = board.pb4 ? board.pb4[0] : null\n    let playerBishop5 = board.pb5 ? board.pb5[0] : null\n    let playerBishop6 = board.pb6 ? board.pb6[0] : null\n    let playerBishop7 = board.pb7 ? board.pb7[0] : null\n    let playerBishop8 = board.pb8 ? board.pb8[0] : null\n    let playerBishop9 = board.pb9 ? board.pb9[0] : null\n    let playerBishop01 = board.pb01 ? board.pb01[0] : null\n\n    let playerKnight1 = board.ph1 ? board.ph1[0] : null\n    let playerKnight2 = board.ph2 ? board.ph2[0] : null\n    let playerKnight3 = board.ph3 ? board.ph3[0] : null\n    let playerKnight4 = board.ph4 ? board.ph4[0] : null\n    let playerKnight5 = board.ph5 ? board.ph5[0] : null\n    let playerKnight6 = board.ph6 ? board.ph6[0] : null\n    let playerKnight7 = board.ph7 ? board.ph7[0] : null\n    let playerKnight8 = board.ph8 ? board.ph8[0] : null\n    let playerKnight9 = board.ph9 ? board.ph9[0] : null\n    let playerKnight01 = board.ph01 ? board.ph01[0] : null\n\n    let playerRook1 = board.pr1 ? board.pr1[0] : null\n    let playerRook2 = board.pr2 ? board.pr2[0] : null\n    let playerRook3 = board.pr3 ? board.pr3[0] : null\n    let playerRook4 = board.pr4 ? board.pr4[0] : null\n    let playerRook5 = board.pr5 ? board.pr5[0] : null\n    let playerRook6 = board.pr6 ? board.pr6[0] : null\n    let playerRook7 = board.pr7 ? board.pr7[0] : null\n    let playerRook8 = board.pr8 ? board.pr8[0] : null\n    let playerRook9 = board.pr9 ? board.pr9[0] : null\n    let playerRook01 = board.pr01 ? board.pr01[0] : null\n\n    let playerQueen1\n    let playerQueen2\n    let playerQueen3\n    let playerQueen4\n    let playerQueen5\n    let playerQueen6\n    let playerQueen7\n    let playerQueen8\n    let playerQueen9\n\n    color === \"white\" ? (playerQueen1 = board.pqw1 ? board.pqw1[0] : null) \n                      : (playerQueen1 = board.pqb1 ? board.pqb1[0] : null)\n    \n    color === \"white\" ? (playerQueen2 = board.pqw2 ? board.pqw2[0] : null) \n                      : (playerQueen2 = board.pqb2 ? board.pqb2[0] : null)\n    \n    color === \"white\" ? (playerQueen3 = board.pqw3 ? board.pqw3[0] : null) \n                      : (playerQueen3 = board.pqb3 ? board.pqb3[0] : null)\n    \n    color === \"white\" ? (playerQueen4 = board.pqw4 ? board.pqw4[0] : null) \n                      : (playerQueen4 = board.pqb4 ? board.pqb4[0] : null)\n    \n    color === \"white\" ? (playerQueen5 = board.pqw5 ? board.pqw5[0] : null) \n                      : (playerQueen5 = board.pqb5 ? board.pqb5[0] : null)\n    \n    color === \"white\" ? (playerQueen6 = board.pqw6 ? board.pqw6[0] : null) \n                      : (playerQueen6 = board.pqb6 ? board.pqb6[0] : null)\n    \n    color === \"white\" ? (playerQueen7 = board.pqw7 ? board.pqw7[0] : null) \n                      : (playerQueen7 = board.pqb7 ? board.pqb7[0] : null)\n    \n    color === \"white\" ? (playerQueen8 = board.pqw8 ? board.pqw8[0] : null) \n                      : (playerQueen8 = board.pqb8 ? board.pqb8[0] : null)\n    \n    color === \"white\" ? (playerQueen9 = board.pqw9 ? board.pqw9[0] : null) \n                      : (playerQueen9 = board.pqb9 ? board.pqb9[0] : null)\n\n    let playerKing = board.pkw ? board.pkw[0] : board.pkb[0]\n\n    let playerPawn1 = board.pp1 ? board.pp1[0] : null\n    let playerPawn2 = board.pp2 ? board.pp2[0] : null\n    let playerPawn3 = board.pp3 ? board.pp3[0] : null\n    let playerPawn4 = board.pp4 ? board.pp4[0] : null\n    let playerPawn5 = board.pp5 ? board.pp5[0] : null\n    let playerPawn6 = board.pp6 ? board.pp6[0] : null\n    let playerPawn7 = board.pp7 ? board.pp7[0] : null\n    let playerPawn8 = board.pp8 ? board.pp8[0] : null\n\n    const checkedByPlayerArr = useRef([])\n    const attackedByPlayerArr = useRef([])\n\n    const attackedByOpponentArr = useRef([])\n    const checkedByOpponentArr = useRef([])\n\n    const playerHorseSafetyArr = useRef([])\n    const enemyHorseSafetyArr = useRef([])\n\n    const playerKing8StarArr = useRef([])\n    const enemyKing8StarArr = useRef([])\n\n    const protectedByPlayerArr = useRef([])\n    const protectedByOpponentArr = useRef([])\n\n    const playerKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n    const enemyKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n\n    const playerKingSpiderSenseArr = useRef([])\n    const enemyKingSpiderSenseArr = useRef([])\n    \n    const playerKingArr = useRef([])\n    const opponentKingArr = useRef([])\n\n    let playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n    let playerKnights = [playerKnight1, \n                         playerKnight2, \n                         playerKnight3, \n                         playerKnight4, \n                         playerKnight5, \n                         playerKnight6, \n                         playerKnight7, \n                         playerKnight8, \n                         playerKnight9, \n                         playerKnight01]\n    let playerBishops = [playerBishop1, \n                         playerBishop2, \n                         playerBishop3, \n                         playerBishop4, \n                         playerBishop5, \n                         playerBishop6, \n                         playerBishop7, \n                         playerBishop8, \n                         playerBishop9, \n                         playerBishop01]\n    let playerQueens = [playerQueen1, \n                        playerQueen2, \n                        playerQueen3, \n                        playerQueen4, \n                        playerQueen5, \n                        playerQueen6, \n                        playerQueen7, \n                        playerQueen8, \n                        playerQueen9]\n    let playerPawns = [playerPawn1, \n                       playerPawn2, \n                       playerPawn3, \n                       playerPawn4, \n                       playerPawn5, \n                       playerPawn6, \n                       playerPawn7, \n                       playerPawn8]\n\n    let enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n    let enemyKnights = [enemyKnight1, \n                        enemyKnight2, \n                        enemyKnight3, \n                        enemyKnight4, \n                        enemyKnight5, \n                        enemyKnight6, \n                        enemyKnight7, \n                        enemyKnight8, \n                        enemyKnight9, \n                        enemyKnight01]\n    let enemyBishops = [enemyBishop1, \n                        enemyBishop2, \n                        enemyBishop3, \n                        enemyBishop4, \n                        enemyBishop5, \n                        enemyBishop6, \n                        enemyBishop7, \n                        enemyBishop8, \n                        enemyBishop9, \n                        enemyBishop01]\n    let enemyQueens = [enemyQueen1, \n                       enemyQueen2, \n                       enemyQueen3, \n                       enemyQueen4, \n                       enemyQueen5, \n                       enemyQueen6, \n                       enemyQueen7, \n                       enemyQueen8, \n                       enemyQueen9]\n    let enemyPawns = [enemyPawn1, \n                      enemyPawn2, \n                      enemyPawn3, \n                      enemyPawn4, \n                      enemyPawn5, \n                      enemyPawn6, \n                      enemyPawn7, \n                      enemyPawn8]\n\n    useEffect(() => {\n        recordBoard()\n\n        if (stockfish) {\n            stockfish.postMessage('uci')\n            stockfish.postMessage('isready')\n            stockfish.postMessage('ucinewgame')\n        }\n    }, [])\n\n    useEffect(() => {\n        if (!store.getState().options.options) {\n            store.dispatch({\n                type: \"recordMoves\",\n                payload: JSON.stringify(board)\n            })\n        }  \n    }, [!store.getState().options.options])\n\n    useEffect(() => {\n        recordBoard()\n        checkGameEnd()\n    }, [board])\n\n    useEffect(() => {\n        if (notInitialRender.current) {\n            const movePiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"setMoveVar\",\n                    payload: [0, 0]\n                })\n            }, animations === \"none\" ? 0 : 50)\n\n            const resetPiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: null\n                })\n\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: null\n                })\n            }, 150)\n\n            return () => {\n                clearTimeout(movePiece)\n                clearTimeout(resetPiece)\n            }\n        } else {\n            notInitialRender.current = true\n        }\n    }, [JSON.stringify(board)])\n\n    useEffect(() => {\n        if (((color === \"white\" && toMove === \"b\") \n            || (color === \"black\" && toMove === \"w\")) \n            && !sandbox \n            && !pawnPromotes) {\n            engineTurn()\n        }\n    }, [toMove, options])\n\n    useMemo(() => {\n        if (animations === \"fast\") {\n            animationSpeed.current = .2\n        } else if (animations === \"average\") {\n            animationSpeed.current = .5\n        } else if (animations === \"slow\") {\n            animationSpeed.current = .8\n        } else {\n            animationSpeed.current = 0\n        }\n    }, [animations])\n\n    useMemo(() => {\n        for (let i = 1; i < 64; i += 8) {\n            knightLimits.current[0].push(i)\n            knightLimits.current[1].push(i + 1)\n            knightLimits.current[2].push(i + 6)\n            knightLimits.current[3].push(i + 7)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 9; i++) {\n            rookMoves.current[0].push(i)\n            rookMoves.current[1].push(i + 8)\n            rookMoves.current[2].push(i + 16)\n            rookMoves.current[3].push(i + 24)\n            rookMoves.current[4].push(i + 32)\n            rookMoves.current[5].push(i + 40)\n            rookMoves.current[6].push(i + 48)\n            rookMoves.current[7].push(i + 56)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 65; i += 8) {\n            rookMoves.current[8].push(i)\n            rookMoves.current[9].push(i + 1)\n            rookMoves.current[10].push(i + 2)\n            rookMoves.current[11].push(i + 3)\n            rookMoves.current[12].push(i + 4)\n            rookMoves.current[13].push(i + 5)\n            rookMoves.current[14].push(i + 6)\n            rookMoves.current[15].push(i + 7)\n        }\n    }, [])\n\n    useMemo(() => {\n        try {\n            stockfish.addEventListener('message', function(e) {\n                if (/^bestmove/.test(e.data)) {\n                    engineData.current = e.data\n                } \n            })\n        } catch (error) {\n\n        }\n    }, [])\n\n    const listener = (data) => {\n        const engineOldSquare = data.slice(9, 11)\n        const engineNewSquare = data.slice(11, 13)\n        const enginePieceToMove = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[0]\n        const enginePieceSquare = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[1][0]\n        const engineWhereToMove = boardEntries.filter(([key, value]) => value[1] === engineNewSquare).flat()[1][0]\n        \n        store.dispatch({\n            type: \"activePiece\",\n            payload: enginePieceToMove\n        })\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: enginePieceSquare\n        })\n\n        pieceSquareForEngine.current = enginePieceSquare    \n\n        if (/^op/.test(enginePieceToMove)) {\n            recordOpponentPawnAttacks(engineWhereToMove, checkedByOpponentArr.current)\n\n            switch (enginePieceToMove) {\n                case \"op1\":\n                    enemyPawn1 = engineWhereToMove\n                    break\n                case \"op2\":\n                    enemyPawn2 = engineWhereToMove\n                    break\n                case \"op3\":\n                    enemyPawn3 = engineWhereToMove\n                    break\n                case \"op4\":\n                    enemyPawn4 = engineWhereToMove\n                    break\n                case \"op5\":\n                    enemyPawn5 = engineWhereToMove\n                    break\n                case \"op6\":\n                    enemyPawn6 = engineWhereToMove\n                    break\n                case \"op7\":\n                    enemyPawn7 = engineWhereToMove\n                    break\n                case \"op8\":\n                    enemyPawn8 = engineWhereToMove\n                    break\n                default:\n                    break\n            }\n\n            enemyPawns = [enemyPawn1, \n                          enemyPawn2, \n                          enemyPawn3, \n                          enemyPawn4, \n                          enemyPawn5, \n                          enemyPawn6, \n                          enemyPawn7, \n                          enemyPawn8]\n\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n            movePawn(engineWhereToMove, enginePieceToMove)\n\n            if (data.split(\" \")[1].length === 5) {\n                if (data.split(\" \")[1].slice(4) === \"q\") {\n                    promotePawn(enginePieceToMove, \"oq\", engineWhereToMove - 1)\n                }\n\n                if (data.split(\" \")[1].slice(4) === \"r\") {\n                    promotePawn(enginePieceToMove, \"or\", engineWhereToMove - 1)\n                }\n\n                if (data.split(\" \")[1].slice(4) === \"b\") {\n                    promotePawn(enginePieceToMove, \"ob\", engineWhereToMove - 1)\n                }\n\n                if (data.split(\" \")[1].slice(4) === \"k\") {\n                    promotePawn(enginePieceToMove, \"oh\", engineWhereToMove - 1)\n                }\n            }\n        } \n        \n        if (/^ob/.test(enginePieceToMove)) {\n            checkArrays(whiteBishopMoves, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n            checkArrays(blackBishopMoves, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n            \n            switch (enginePieceToMove) {\n                case \"ob1\":\n                    enemyBishop1 = engineWhereToMove\n                    break;\n                case \"ob2\":\n                    enemyBishop2 = engineWhereToMove\n                    break;\n                case \"ob3\":\n                    enemyBishop3 = engineWhereToMove\n                    break;\n                case \"ob4\":\n                    enemyBishop4 = engineWhereToMove\n                    break;\n                case \"ob5\":\n                    enemyBishop5 = engineWhereToMove\n                    break;\n                case \"ob6\":\n                    enemyBishop6 = engineWhereToMove\n                    break;\n                case \"ob7\":\n                    enemyBishop7 = engineWhereToMove\n                    break;\n                case \"ob8\":\n                    enemyBishop8 = engineWhereToMove\n                    break;\n                case \"ob9\":\n                    enemyBishop9 = engineWhereToMove\n                    break;\n                case \"ob01\":\n                    enemyBishop01 = engineWhereToMove\n                    break;\n                default:\n                    break;\n            }\n\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n            enemyBishops = [enemyBishop1, \n                            enemyBishop2, \n                            enemyBishop3, \n                            enemyBishop4, \n                            enemyBishop5, \n                            enemyBishop6, \n                            enemyBishop7, \n                            enemyBishop8, \n                            enemyBishop9, \n                            enemyBishop01]\n\n            moveBishop(engineWhereToMove, enginePieceToMove)\n        } \n        \n        if (/^oh/.test(enginePieceToMove)) {\n            recordKnightMoves(engineWhereToMove, checkedByOpponentArr.current, enemySquaresLive)\n\n            switch (enginePieceToMove) {\n                case \"oh1\":\n                    enemyKnight1 = engineWhereToMove\n                    break;\n                case \"oh2\":\n                    enemyKnight2 = engineWhereToMove\n                    break;\n                case \"oh3\":\n                    enemyKnight3 = engineWhereToMove\n                    break;\n                case \"oh4\":\n                    enemyKnight4 = engineWhereToMove\n                    break;\n                case \"oh5\":\n                    enemyKnight5 = engineWhereToMove\n                    break;\n                case \"oh6\":\n                    enemyKnight6 = engineWhereToMove\n                    break;\n                case \"oh7\":\n                    enemyKnight7 = engineWhereToMove\n                    break;\n                case \"oh8\":\n                    enemyKnight8 = engineWhereToMove\n                    break;\n                case \"oh9\":\n                    enemyKnight9 = engineWhereToMove\n                    break;\n                case \"oh01\":\n                    enemyKnight01 = engineWhereToMove\n                    break;\n                default:\n                    break;\n            }\n\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n            enemyKnights = [enemyKnight1, \n                            enemyKnight2, \n                            enemyKnight3, \n                            enemyKnight4, \n                            enemyKnight5, \n                            enemyKnight6, \n                            enemyKnight7, \n                            enemyKnight8, \n                            enemyKnight9, \n                            enemyKnight01]\n\n            moveKnight(engineWhereToMove, enginePieceToMove)\n        } \n        \n        if (/^or/.test(enginePieceToMove)) {\n            checkArrays(rookMoves.current, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n\n            switch (enginePieceToMove) {\n                case \"or1\":\n                    enemyRook1 = engineWhereToMove\n                    break;\n                case \"or2\":\n                    enemyRook2 = engineWhereToMove\n                    break;\n                case \"or3\":\n                    enemyRook3 = engineWhereToMove\n                    break;\n                case \"or4\":\n                    enemyRook4 = engineWhereToMove\n                    break;\n                case \"or5\":\n                    enemyRook5 = engineWhereToMove\n                    break;\n                case \"or6\":\n                    enemyRook6 = engineWhereToMove\n                    break;\n                case \"or7\":\n                    enemyRook7 = engineWhereToMove\n                    break;\n                case \"or8\":\n                    enemyRook8 = engineWhereToMove\n                    break;\n                case \"or9\":\n                    enemyRook9 = engineWhereToMove\n                    break;\n                case \"or01\":\n                    enemyRook01 = engineWhereToMove\n                    break;\n                default:\n                    break;\n            }\n\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n            \n            enemyRooks = [enemyRook1, \n                            enemyRook2, \n                            enemyRook3, \n                            enemyRook4, \n                            enemyRook5, \n                            enemyRook6, \n                            enemyRook7, \n                            enemyRook8, \n                            enemyRook9, \n                            enemyRook01]\n\n            moveRook(engineWhereToMove, enginePieceToMove)\n        } \n        \n        if (/^oq/.test(enginePieceToMove)) {\n            checkArrays(whiteBishopMoves, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n            checkArrays(blackBishopMoves, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n            checkArrays(rookMoves.current, \n                        engineWhereToMove, \n                        checkedByOpponentArr.current, \n                        enemySquaresLive, \n                        playerSquaresLive, \n                        true, \n                        true)\n\n            switch (enginePieceToMove) {\n                case \"oqw1\": case \"oqb1\":\n                    enemyQueen1 = engineWhereToMove\n                    break;\n                case \"oqw2\": case \"oqb2\":\n                    enemyQueen2 = engineWhereToMove\n                    break;\n                case \"oqw3\": case \"oqb3\":\n                    enemyQueen3 = engineWhereToMove\n                    break;\n                case \"oqw4\": case \"oqb4\":\n                    enemyQueen4 = engineWhereToMove\n                    break;\n                case \"oqw5\": case \"oqb5\":\n                    enemyQueen5 = engineWhereToMove\n                    break;\n                case \"oqw6\": case \"oqb6\":\n                    enemyQueen6 = engineWhereToMove\n                    break;\n                case \"oqw7\": case \"oqb7\":\n                    enemyQueen7 = engineWhereToMove\n                    break;\n                case \"oqw8\": case \"oqb8\":\n                    enemyQueen8 = engineWhereToMove\n                    break;\n                case \"oqw9\": case \"oqb9\":\n                    enemyQueen9 = engineWhereToMove\n                    break;\n                default:\n                    break;\n            }\n\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n            enemyQueens = [enemyQueen1, \n                            enemyQueen2, \n                            enemyQueen3, \n                            enemyQueen4, \n                            enemyQueen5, \n                            enemyQueen6, \n                            enemyQueen7, \n                            enemyQueen8, \n                            enemyQueen9]\n\n            moveQueen(engineWhereToMove, enginePieceToMove)\n        } \n        \n        if (/^ok/.test(enginePieceToMove)) {\n            updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n            moveKing(engineWhereToMove, enginePieceToMove)\n            \n            kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n        }\n    }\n\n    const recordBoard = () => {\n        filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n        filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n        justEnemyRender = Object.fromEntries(filteredEnemyRender)\n        justEnemyLive = Object.fromEntries(filteredEnemyLive)\n\n        filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n        filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))        \n        justPlayerRender = Object.fromEntries(filteredPlayerRender)\n        justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n        filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n        filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n        justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n        justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n        enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n        playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n        occupiedSquaresRender = Object.values(justOccupiedRender).map(a => a = a[0])\n\n        enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n        playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n        occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n        kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n\n        attacked(playerRooks, \n                 playerKnights,\n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 protectedByPlayerArr, \n                 true,\n                 false)\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 protectedByOpponentArr, \n                 true,\n                 false)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarArr, true)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarArr, true)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarXrayArr, false)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarXrayArr, false)\n\n        recordKnightMoves(playerKing, playerHorseSafetyArr.current, playerSquaresRender)\n        recordKnightMoves(enemyKing, enemyHorseSafetyArr.current, enemySquaresRender)\n       \n        if (playerKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyRooks.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyBishops.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n        }\n\n        if (enemyKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerRooks.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerBishops.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current =enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n        }\n    }\n\n    const engineTurn = () => {\n        encode()\n\n        let string = `position fen ${stringToSend} moves ${playerPiece.current}${playerNewSquareForEngine.current}`\n\n        if (moves.length === 1) {\n            stockfish.postMessage(`setoption name Skill Level value ${skillLevel}`)\n            stockfish.postMessage(\"position startpos\")\n            stockfish.postMessage(`go movetime ${milliseconds} depth ${depth}`)\n        } else {\n            if (moves.length === 3) {\n                stockfish.postMessage(`setoption name Skill Level value ${skillLevel}`)\n            }\n            stockfish.postMessage(string)\n            stockfish.postMessage(`go movetime ${milliseconds} depth ${depth}`)\n        }\n\n        setTimeout(() => {\n            listener(engineData.current)\n        }, 1500);\n    }\n\n    const encode = () => {\n        const fenEncode = (arr) => {\n            switch (arr[0]) {\n                case \"or1\": case \"or2\": case \"or3\": case \"or4\": case \"or5\": \n                case \"or6\": case \"or7\": case \"or8\": case \"or9\": case \"or01\": \n                    if (color === \"white\") {\n                        return arr = \"r\"\n                    } else {\n                        return arr = \"R\"\n                    }\n                case \"oh1\": case \"oh2\": case \"oh3\": case \"oh4\": case \"oh5\": \n                case \"oh6\": case \"oh7\": case \"oh8\": case \"oh9\": case \"oh01\": \n                    if (color === \"white\") {\n                        return arr = \"n\"\n                    } else {\n                        return arr = \"N\"\n                    }\n                case \"ob1\": case \"ob2\": case \"ob3\": case \"ob4\": case \"ob5\": \n                case \"ob6\": case \"ob7\": case \"ob8\": case \"ob9\": case \"ob01\": \n                    if (color === \"white\") {\n                        return arr = \"b\"\n                    } else {\n                        return arr = \"B\"\n                    }\n                case \"oqw1\": case \"oqb1\": case \"oqw2\": case \"oqb2\": case \"oqw3\": case \"oqb3\": \n                case \"oqw4\": case \"oqb4\": case \"oqb9\": case \"oqw5\": case \"oqb5\": case \"oqw6\": \n                case \"oqb6\": case \"oqw7\": case \"oqb7\": case \"oqw8\": case \"oqb8\": case \"oqw9\":\n                    if (color === \"white\") {\n                        return arr = \"q\"\n                    } else {\n                        return arr = \"Q\"\n                    }\n                case \"okw\": case \"okb\":\n                    if (color === \"white\") {\n                        return arr = \"k\"\n                    } else {\n                        return arr = \"K\"\n                    }\n                case \"op1\": case \"op2\": case \"op3\": case \"op4\": \n                case \"op5\": case \"op6\": case \"op7\": case \"op8\":\n                    if (color === \"white\") {\n                        return arr = \"p\"\n                    } else {\n                        return arr = \"P\"\n                    }\n                case \"pr1\": case \"pr2\": case \"pr3\": case \"pr4\": case \"pr5\": \n                case \"pr6\": case \"pr7\": case \"pr8\": case \"pr9\": case \"pr01\":\n                    if (color === \"white\") {\n                        return arr = \"R\"\n                    } else {\n                        return arr = \"r\"\n                    }\n                case \"ph1\": case \"ph2\": case \"ph3\": case \"ph4\": case \"ph5\": \n                case \"ph6\": case \"ph7\": case \"ph8\": case \"ph9\": case \"ph01\":\n                    if (color === \"white\") {\n                        return arr = \"N\"\n                    } else {\n                        return arr = \"n\"\n                    }\n                case \"pb1\": case \"pb2\": case \"pb3\": case \"pb4\": case \"pb5\": \n                case \"pb6\": case \"pb7\": case \"pb8\": case \"pb9\": case \"pb01\":\n                    if (color === \"white\") {\n                        return arr = \"B\"\n                    } else {\n                        return arr = \"b\"\n                    }\n                case \"pqw1\": case \"pqb1\": case \"pqw2\": case \"pqb2\": case \"pqw3\": case \"pqb3\": \n                case \"pqw4\": case \"pqb4\": case \"pqb9\": case \"pqw5\": case \"pqb5\": case \"pqw6\": \n                case \"pqb6\": case \"pqw7\": case \"pqb7\": case \"pqw8\": case \"pqb8\": case \"pqw9\":\n                    if (color === \"white\") {\n                        return arr = \"Q\"\n                    } else {\n                        return arr = \"q\"\n                    }\n                case \"pkw\": case \"pkb\":\n                    if (color === \"white\") {\n                        return arr = \"K\"\n                    } else {\n                        return arr = \"k\"\n                    }\n                case \"pp1\": case \"pp2\": case \"pp3\": case \"pp4\": \n                case \"pp5\": case \"pp6\": case \"pp7\": case \"pp8\":\n                    if (color === \"white\") {\n                        return arr = \"P\"\n                    } else {\n                        return arr = \"p\"\n                    }\n                default:\n                    return arr = 1\n            }\n        }\n\n        const fen = boardEntries.map(a => fenEncode(a))\n\n        let fenArrays = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = i * 8; j < i * 8 + 8; j++) {\n                fenArrays[i].push(fen[j])\n            }\n        }\n\n        const customReducer = (arr) => {\n            if (arr.includes(1)) {\n                let temp = 0\n                let reducedArr = 0\n\n                for (let elem of arr) {\n                    if (typeof elem === \"number\") {\n                        temp += elem\n                    } else {\n                        reducedArr += temp\n                        temp = 0\n                        reducedArr += elem\n                    }\n                }\n\n                reducedArr += temp\n\n                if (typeof reducedArr === \"number\") {\n                    return reducedArr\n                } else {\n                    return reducedArr.split(\"\").filter(a => a !== \"0\").join(\"\")\n                }\n            } else {\n                return arr.join(\"\")\n            }\n        }\n\n        fenArrays = fenArrays.map(a => customReducer(a))\n\n        let fenString = fenArrays.join(\"/\")\n\n        fenString += ` ${toMove} `\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"KQ\"\n            } else {\n                fenString += \"kq\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && !castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"Q\"\n            } else {\n                fenString += \"q\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && !castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"K\"\n            } else {\n                fenString += \"k\"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"kq \"\n            } else {\n                fenString += \"KQ \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && !castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"q \"\n            } else {\n                fenString += \"Q \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && !castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"k \"\n            } else {\n                fenString += \"K \"\n            }\n        }\n\n        if (enPassantSquare.current[0]) {\n            fenString += boardEntries.filter(([key, value]) => value[0] === enPassantSquare.current[0]).flat()[1][1]\n        } else {\n            fenString += \"-\"\n        }\n        \n        fenString += ` ${halfMoveCounter} `\n\n        fenString += moveCounter\n\n        stringToSend = fenString\n    }\n\n    const combThroughSubArrayPlus = (index, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(index)) {\n            for (let j = index + 1; j <= Math.max(...subArr); j++) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const combThroughSubArrayMinus = (i, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(i)) {\n            for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const king8Star = (index, ownSquares, oppSquares, arrRes, boolean) => {\n        let arr = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[0], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[1], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 8; i < 16; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[2], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[3], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        arrRes.current = arr\n    }\n\n    const kingSpiderSense = (king, ownArr, oppArr, arrRes) => {\n        let arr = [[], []]\n\n        checkArrays(whiteBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(blackBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(rookMoves.current, king, arr[1], ownArr, oppArr, true, true)\n\n        arrRes.current = arr\n    }\n\n    const attacked = (rooks, knights, bishops, queens, pawns, oppSquares, ownSquares, arrRes, protect, coverCheck) => {\n        let arr = []\n        let arrPawn = []\n\n        rooks.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        knights.forEach(a => recordKnightMoves(a, arr, ownSquares))\n\n        bishops.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        bishops.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n\n        queens.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        if (coverCheck) {\n            if (pawns === playerPawns) {\n                pawns.forEach(a => recordPlayerPawnMoves(a, \"\", arrPawn))\n            } else {\n                pawns.forEach(a => recordOpponentPawnMoves(a, \"\", arrPawn))\n            }\n        } else {\n            if (pawns === playerPawns) {\n                pawns.forEach(a => recordPlayerPawnAttacks(a, arrPawn))\n            } else {\n                pawns.forEach(a => recordOpponentPawnAttacks(a, arrPawn))\n            }\n        }\n\n        arr = [...arr, ...arrPawn]\n\n        if (protect) {\n            arrRes.current = arr.filter(a => occupiedSquaresRender.includes(a))\n        } else {\n            arrRes.current = arr\n        }\n    }\n\n    const promotePawn = (pawn, pieceToPromoteTo, i) => {\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        store.dispatch({\n            type: \"pawnPromotion\",\n            payload: {pieceToPromoteTo, i}\n        })\n\n        if (/^ph/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, playerSquaresLive)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oh/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, enemySquaresRender)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pr/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^or/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pb/.test(pieceToPromoteTo)) {\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^ob/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pq/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oq/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        setPawnPromotes(\"\")\n\n        if (!sandbox && /^pp/.test(pawn)) {\n            engineTurn()\n        }\n    }\n\n    const renderPieces = () => {\n        const renderEachPiece = (a, src1, src2, alt1, alt2) => {\n            return (\n                (color === \"white\"\n                    ?\n                    <img src={src1}\n                         key={a}\n                         alt={alt1}\n                         className=\"piece\"\n                         style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                    : \n                    <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                         style={{height: \"80px\"}}\n                         key={a}>\n                        <img src={src2}\n                             alt={alt2}\n                             className=\"piece\"\n                             style={activePiece === `${a}`\n                                ?\n                                {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                                :\n                                {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                        </img>\n                    </div>)\n            )\n        }\n\n        const renderRoyals = (a, src, alt) => {\n            return (\n                <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                     style={{height: \"80px\"}}\n                     key={a}>\n                    <img src={src}\n                        alt={alt}\n                        className={`piece ${((/^ok/.test(a) && enemyKingAttacked && !currentMove) \n                                        || (/^ok/.test(a) && checkArrOpponent.some(a => a === currentMove))) \n                                    || ((/^pk/.test(a) && playerKingAttacked && !currentMove) \n                                        || (/^pk/.test(a) && checkArrPlayer.some(a => a === currentMove))) ? \"kingInCheck\" : null}`}\n                        style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                </div>\n            )\n        }\n\n        const renderPlayerPromotion = (pawn, i) => {\n            return (\n                <div className={`pawnPromotionPlayer ${color === \"black\" && !sandbox ? \"reversePromotion\" : null}`} \n                     style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteQueen : blackQueen} \n                             alt=\"Player Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pq\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteRook : blackRook} \n                             alt=\"Player Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pr\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteBishop : blackBishop} \n                             alt=\"Player Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pb\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteKnight : blackKnight} \n                             alt=\"Player Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ph\", i)}/>\n                    </div>\n                </div>\n            )\n        }\n    \n        const renderOpponentPromotion = (pawn, i) => {\n            return (\n                <div className=\"pawnPromotionOpponent\" style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackKnight : whiteKnight} \n                             alt=\"Opponent Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oh\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackBishop : whiteBishop} \n                             alt=\"Opponent Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ob\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackRook : whiteRook} \n                             alt=\"Opponent Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"or\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackQueen : whiteQueen} \n                             alt=\"Opponent Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oq\", i)}/>\n                    </div>  \n                </div>\n            )\n        }\n\n        const renderEntries = (a, i) => {\n            switch (a) {\n                case \"or1\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or2\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or3\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or4\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or5\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or6\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or7\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or8\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or9\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or01\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"oh1\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh2\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh3\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh4\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh5\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh6\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh7\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh8\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh9\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh01\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"ob1\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob2\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob3\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob4\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob5\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob6\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob7\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob8\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob9\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob01\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"okw\":\n                    return renderRoyals(a, whiteKing, \"White King\") \n                case \"okb\":\n                    return renderRoyals(a, blackKing, \"Black King\") \n                case \"oqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"op1\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op1\", i)}\n                    </div>\n                case \"op2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op2\", i)}\n                    </div>\n                case \"op3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op3\", i)}\n                    </div>\n                case \"op4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op4\", i)}\n                    </div>\n                case \"op5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op5\", i)}\n                    </div>\n                case \"op6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op6\", i)}\n                    </div>\n                case \"op7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op7\", i)}\n                    </div>\n                case \"op8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op8\", i)}\n                    </div>\n                case \"pr1\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr2\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr3\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr4\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr5\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr6\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr7\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr8\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr9\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr01\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"ph1\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph2\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph3\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph4\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph5\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph6\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph7\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph8\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph9\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph01\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"pb1\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb2\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb3\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb4\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb5\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb6\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb7\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb8\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb9\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb01\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pkw\":\n                    return renderRoyals(a, whiteKing, \"White King\")\n                case \"pkb\":\n                    return renderRoyals(a, blackKing, \"Black King\")\n                case \"pqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pp1\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp1\", i)}\n                    </div>\n                case \"pp2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp2\", i)}\n                    </div>\n                case \"pp3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp3\", i)}\n                    </div>\n                case \"pp4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp4\", i)}\n                    </div>\n                case \"pp5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp5\", i)}\n                    </div>\n                case \"pp6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp6\", i)}\n                    </div>\n                case \"pp7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp7\", i)}\n                    </div>\n                case \"pp8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp8\", i)}\n                    </div>\n                default:\n                    return (\n                        <div className=\"piece\" key={i * 100 + \"b\"}></div>\n                    )\n            }\n        }\n\n        return (\n            <div className=\"piecesGrid\">\n                {currentMove === null \n                    ? \n                    boardEntries.map((a, i) => renderEntries(a[0], i))\n                    : \n                    Object.entries(JSON.parse(moves[currentMove])).map((a, i) => renderEntries(a[0], i))}\n            </div>\n        )\n    }\n\n    const renderMovement = () => {\n        let arr = [0, 0, 0, 0, 0, 0, 0, 0]\n\n        return (\n            <div className=\"movementGrid\">\n                <div className=\"pawnPromotionOverlay\" style={pawnPromotes ? {display: \"block\"} : {display: \"none\"}}></div>\n\n                {arr.map((a, i) => <div key={i + 1 * 100} \n                                        onClick={() => onSquareClick(i + 1, boardEntries[i][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 1 : \"\"}\n                                            {moveSquares.includes(i + 1) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n                                    \n                {arr.map((a, i) => <div key={i + 9 * 100}\n                                        onClick={() => onSquareClick(i + 9, boardEntries[i + 8][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 9 : \"\"}\n                                            {moveSquares.includes(i + 9) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 17 * 100} \n                                        onClick={() => onSquareClick(i + 17, boardEntries[i + 16][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 17 : \"\"}\n                                            {moveSquares.includes(i + 17) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 25 * 100}\n                                        onClick={() => onSquareClick(i + 25, boardEntries[i + 24][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 25 : \"\"}\n                                            {moveSquares.includes(i + 25) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 33 * 100} \n                                        onClick={() => onSquareClick(i + 33, boardEntries[i + 32][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 33 : \"\"}\n                                            {moveSquares.includes(i + 33) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 41 * 100}\n                                        onClick={() => onSquareClick(i + 41, boardEntries[i + 40][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 41 : \"\"}\n                                            {moveSquares.includes(i + 41) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 49 * 100}\n                                        onClick={() => onSquareClick(i + 49, boardEntries[i + 48][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 49 : \"\"}\n                                            {moveSquares.includes(i + 49) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 57 * 100} \n                                        onClick={() => onSquareClick(i + 57, boardEntries[i + 56][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 57 : \"\"}\n                                            {moveSquares.includes(i + 57) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n            </div>\n        )\n    }\n\n    const checkArrays = (arrayChecked, i, arr, ownArr, oppArr, exclude1, exclude2) => {\n        let arr2 = []\n\n        if (i) {\n            if (i !== playerKing && i !== enemyKing) {\n                if (playerSquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n    \n                if (enemySquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n            }\n    \n            for (const subArr of arrayChecked) {\n                if (subArr.includes(i)) {\n                    for (let j = i + 1; j <= Math.max(...subArr); j++) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing\n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j) \n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n    \n                    for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing \n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j)\n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const recordKnightMoves = (i, arrMoves, excArr) => {  \n        let arr = []\n        let arr2 = []\n\n        if (playerSquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (enemySquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (i) {\n            if (knightLimits.current[0].includes(i)) {\n                arr = [i - 15, i - 6, i + 10, i + 17]\n            } else if (knightLimits.current[1].includes(i)) {\n                arr = [i - 17, i - 15, i - 6, i + 10, i + 15, i + 17]\n            } else if (knightLimits.current[2].includes(i)) {\n                arr = [i - 17, i - 15, i - 10, i + 6, i + 15, i + 17]\n            } else if (knightLimits.current[3].includes(i)) {\n                arr = [i - 17, i - 10, i + 6, i + 15]\n            } else {\n                arr = [i - 17, i - 15, i - 10, i - 6, i + 6, i + 10, i + 15, i + 17]\n            }\n\n            for (const number of arr) {\n                if (excArr.includes(number)) {\n                    arr = arr.filter(a => a !== number)\n                }\n\n                if (arr2.length > 0) {\n                    arr = arr.filter(a => arr2.includes(a))\n                }\n            }\n\n            if (playerKnights.includes(i)) {\n                if (playerKingAttacked \n                    && playerSquaresRender.includes(i) \n                    && i !== playerKing \n                    && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                    let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n                    \n                    arr = arr.filter(a => arrTech.includes(a))\n                } else if (playerKingAttacked \n                    && !playerKing8StarArr.current.flat().includes(checkingPiece.current)\n                    && arr.includes(checkingPiece.current)) {\n                    arr = [checkingPiece.current]\n                } else if (playerKingAttacked) {\n                    arr = []\n                }\n            }\n\n            if (enemyKnights.includes(i)) {\n                if (enemyKingAttacked \n                    && enemySquaresRender.includes(i) \n                    && i !== enemyKing \n                    && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                    let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n    \n                    arr = arr.filter(a => arrTech.includes(a))\n                } else if (enemyKingAttacked \n                    && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)\n                    && arr.includes(checkingPiece.current)) {\n                    arr = [checkingPiece.current]\n                } else if (enemyKingAttacked) {\n                    arr = []\n                }\n            }\n\n            for (const number of arr) {\n                arrMoves.push(number)\n            }\n        }\n    }\n\n    const recordPlayerPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n\n        for (let k = 0; k < 4; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        for (let k = 4; k < 8; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (color === \"black\" && !sandbox) {\n            if (pawnsFirstMove[piece]) {\n                arr = [i + 8, i + 16]\n            } else {\n                arr = [i + 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i + 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i + 16)) {\n                arr = [i + 8]\n            }\n    \n            if ((enemySquaresRender.includes(i + 9) \n                || (rookMoves.current[4].includes(i) \n                && i + 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i + 9)\n            }\n\n            if ((enemySquaresRender.includes(i + 7) \n                || (rookMoves.current[4].includes(i) \n                && i + 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i + 7)\n            }\n        } else {\n            if (pawnsFirstMove[piece]) {\n                arr = [i - 8, i - 16]\n            } else {\n                arr = [i - 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i - 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i - 16)) {\n                arr = [i - 8]\n            }\n    \n            if ((enemySquaresRender.includes(i - 9) \n                || (rookMoves.current[3].includes(i) \n                && i - 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i - 9)\n            }\n    \n            if ((enemySquaresRender.includes(i - 7) \n                || (rookMoves.current[3].includes(i) \n                && i - 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i - 7)\n            }\n        }\n\n        if (arr2.filter(a => playerSquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (store.getState().board.playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n            \n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (store.getState().board.playerKingAttacked\n            && !playerKing8StarArr.current.flat().includes(checkingPiece.current) \n            && arr.includes(checkingPiece.current)) {\n            arr = [checkingPiece.current]\n        } else if (store.getState().board.playerKingAttacked) {\n            arr = []\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n        \n        for (let k = 0; k < 4; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n        for (let k = 4; k < 8; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (pawnsFirstMove[piece]) {\n            arr = [i + 8, i + 16]\n        } else {\n            arr = [i + 8]\n        }\n\n        if (occupiedSquaresRender.includes(i + 8)) {\n            arr = []\n        } else if (occupiedSquaresRender.includes(i + 16)) {\n            arr = [i + 8]\n        }\n\n        if ((playerSquaresRender.includes(i + 7) \n            || (rookMoves.current[4].includes(i) \n            && i + 7 === enPassantSquare.current[0])) \n            && !knightLimits.current[0].includes(i)) {\n            arr.push(i + 7)\n        }\n\n        if ((playerSquaresRender.includes(i + 9) \n            || (rookMoves.current[4].includes(i) \n            && i + 9 === enPassantSquare.current[0])) \n            && !knightLimits.current[3].includes(i)) {\n            arr.push(i + 9)\n        }\n\n        if (arr2.filter(a => enemySquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (enemyKingAttacked \n            && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)\n            && arr.includes(checkingPiece.current)) {\n            arr = [checkingPiece.current]\n        } else if (enemyKingAttacked ) {\n            arr = []\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n        \n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingMoves = (i, arrMoves) => {\n        let arr = []\n        let arr2 = []\n        recordEnemyKingAttacks(enemyKing, arr2)\n\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 playerKingArr, \n                 false,\n                 false)\n\n        if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2 && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n   \n        for (const number of arr) {\n            if (playerSquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(60) && i === 61) || (playerKingAttacked && playerKingArr.current.includes(59))) {\n                    arr = arr.filter(x => x !== 59)\n                }\n\n                if ((!arr.includes(62) && i === 61) || (playerKingAttacked && playerKingArr.current.includes(63))) {\n                    arr = arr.filter(x => x !== 63)\n                }\n\n                arr = arr.filter(a => !playerKingArr.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !playerKingArr.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingMoves = (i, arrMoves) => {\n        let arr = []              \n        let arr2 = []\n\n        recordPlayerKingAttacks(playerKing, arr2)\n\n        attacked(playerRooks, \n                 playerKnights, \n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 opponentKingArr, \n                 false,\n                 false) \n\n        if (castlingEnemyMoved.ok && castlingEnemyMoved.or2 && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            if (enemySquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(4) && i === 5) || (enemyKingAttacked && opponentKingArr.current.includes(3))) {\n                    arr = arr.filter(x => x !== 3)\n                }\n\n                if ((!arr.includes(6) && i === 5) || (enemyKingAttacked && opponentKingArr.current.includes(7))) {\n                    arr = arr.filter(x => x !== 7)\n                }\n\n                arr = arr.filter(a => !opponentKingArr.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !opponentKingArr.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingAttacks = (i, arrMoves) => {\n        let arr = []              \n        \n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const onSquareClick = (i, piece) => {   \n        if (((!moveSquares.includes(i) && moveSquares.length > 0) || activePiece === piece) \n            && \n            (\n             (\n              (\n               (color === \"white\" && toMove === \"b\") \n                || \n               (color === \"black\" && toMove === \"w\")\n              ) \n                && !playerSquaresRender.includes(i)\n             ) \n            || \n             (\n              (\n               (color === \"white\" && toMove === \"w\") \n                || \n               (color === \"black\" && toMove === \"b\")\n              ) \n                && !enemySquaresRender.includes(i)\n             )\n            )){\n            store.dispatch({\n                type:\"moveSquares\",\n                payload: []\n            })\n\n            store.dispatch({\n                type: \"activePiece\",\n                payload: \"\"\n            })\n            \n            store.dispatch({\n                type: \"pieceSquare\",\n                payload: null\n            })\n        }\n    \n        if (occupiedSquaresRender.includes(i) \n            && activePiece !== piece \n            && !currentMove \n            && !gameEnd) {\n            if (((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"b\")) \n                && playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n\n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                if (/^ph/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, playerSquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pp/.test(piece)) {\n                    let arr = []\n\n                    recordPlayerPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pr/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pb/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pq/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pk/.test(piece)) {\n                    let arr = []\n\n                    recordPlayerKingMoves(i, arr)\n                    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            } else if (((color === \"white\" && toMove === \"b\") || (color === \"black\" && toMove === \"w\")) \n                        && sandbox \n                        && enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n    \n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                if (/^oh/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, enemySquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^op/.test(piece)) {\n                    let arr = []\n\n                    recordOpponentPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^or/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ob/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^oq/.test(piece)) {\n                    let arr = []\n    \n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ok/.test(piece)) {\n                    let arr = []\n\n                    recordEnemyKingMoves(i, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            }\n\n        }\n\n        if (/^ph/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByPlayerArr.current, playerSquaresLive)\n\n            switch (activePiece) {\n                case \"ph1\":\n                    playerKnight1 = i\n                    break\n                case \"ph2\":\n                    playerKnight2 = i\n                    break\n                case \"ph3\":\n                    playerKnight3 = i\n                    break\n                case \"ph4\":\n                    playerKnight4 = i\n                    break\n                case \"ph5\":\n                    playerKnight5 = i\n                    break\n                case \"ph6\":\n                    playerKnight6 = i\n                    break\n                case \"ph7\":\n                    playerKnight7 = i\n                    break\n                case \"ph8\":\n                    playerKnight8 = i\n                    break\n                case \"ph9\":\n                    playerKnight9 = i\n                    break\n                case \"ph01\":\n                    playerKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerKnights = [playerKnight1, \n                             playerKnight2, \n                             playerKnight3, \n                             playerKnight4, \n                             playerKnight5, \n                             playerKnight6, \n                             playerKnight7, \n                             playerKnight8, \n                             playerKnight9, \n                             playerKnight01]\n\n            moveKnight(i, activePiece)\n        } \n\n        if (/^pp/.test(activePiece) && moveSquares.includes(i)) {\n            recordPlayerPawnMoves(i, activePiece, checkedByPlayerArr.current)\n\n            switch (activePiece) {\n                case \"pp1\":\n                    playerPawn1 = i\n                    break\n                case \"pp2\":\n                    playerPawn2 = i\n                    break\n                case \"pp3\":\n                    playerPawn3 = i\n                    break\n                case \"pp4\":\n                    playerPawn4 = i\n                    break\n                case \"pp5\":\n                    playerPawn5 = i\n                    break\n                case \"pp6\":\n                    playerPawn6 = i\n                    break\n                case \"pp7\":\n                    playerPawn7 = i\n                    break;\n                case \"pp8\":\n                    playerPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerPawns = [playerPawn1, \n                           playerPawn2, \n                           playerPawn3, \n                           playerPawn4, \n                           playerPawn5, \n                           playerPawn6, \n                           playerPawn7, \n                           playerPawn8]\n           \n            movePawn(i, activePiece)\n        } \n\n        if (/^pb/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pb1\":\n                    playerBishop1 = i\n                    break\n                case \"pb2\":\n                    playerBishop2 = i\n                    break\n                case \"pb3\":\n                    playerBishop3 = i\n                    break\n                case \"pb4\":\n                    playerBishop4 = i\n                    break\n                case \"pb5\":\n                    playerBishop5 = i\n                    break\n                case \"pb6\":\n                    playerBishop6 = i\n                    break\n                case \"pb7\":\n                    playerBishop7 = i\n                    break\n                case \"pb8\":\n                    playerBishop8 = i\n                    break\n                case \"pb9\":\n                    playerBishop9 = i\n                    break\n                case \"pb01\":\n                    playerBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerBishops = [playerBishop1, \n                             playerBishop2, \n                             playerBishop3, \n                             playerBishop4, \n                             playerBishop5, \n                             playerBishop6, \n                             playerBishop7, \n                             playerBishop8, \n                             playerBishop9, \n                             playerBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^pr/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pr1\":\n                    playerRook1 = i\n                    break\n                case \"pr2\":\n                    playerRook2 = i\n                    break\n                case \"pr3\":\n                    playerRook3 = i\n                    break\n                case \"pr4\":\n                    playerRook4 = i\n                    break\n                case \"pr5\":\n                    playerRook5 = i\n                    break\n                case \"pr6\":\n                    playerRook6 = i\n                    break\n                case \"pr7\":\n                    playerRook7 = i\n                    break\n                case \"pr8\":\n                    playerRook8 = i\n                    break\n                case \"pr9\":\n                    playerRook9 = i\n                    break\n                case \"pr01\":\n                    playerRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerRooks = [playerRook1, \n                           playerRook2, \n                           playerRook3, \n                           playerRook4, \n                           playerRook5, \n                           playerRook6, \n                           playerRook7, \n                           playerRook8, \n                           playerRook9, \n                           playerRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^pq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"pqw1\": case \"pqb1\":\n                    playerQueen1 = i\n                    break\n                case \"pqw2\": case \"pqb2\":\n                    playerQueen2 = i\n                    break\n                case \"pqw3\": case \"pqb3\":\n                    playerQueen3 = i\n                    break\n                case \"pqw4\": case \"pqb4\":\n                    playerQueen4 = i\n                    break\n                case \"pqw5\": case \"pqb5\":\n                    playerQueen5 = i\n                    break\n                case \"pqw6\": case \"pqb6\":\n                    playerQueen6 = i\n                    break\n                case \"pqw7\": case \"pqb7\":\n                    playerQueen7 = i\n                    break\n                case \"pqw8\": case \"pqb8\":\n                    playerQueen8 = i\n                    break\n                case \"pqw9\": case \"pqb9\":\n                    playerQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerQueens = [playerQueen1, \n                            playerQueen2, \n                            playerQueen3, \n                            playerQueen4, \n                            playerQueen5, \n                            playerQueen6, \n                            playerQueen7, \n                            playerQueen8, \n                            playerQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^pk/.test(activePiece) \n            && moveSquares.includes(i)) {\n            playerKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        } \n                \n        if (/^oh/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByOpponentArr.current, enemySquaresLive)\n            \n            switch (activePiece) {\n                case \"oh1\":\n                    enemyKnight1 = i\n                    break\n                case \"oh2\":\n                    enemyKnight2 = i\n                    break\n                case \"oh3\":\n                    enemyKnight3 = i\n                    break\n                case \"oh4\":\n                    enemyKnight4 = i\n                    break\n                case \"oh5\":\n                    enemyKnight5 = i\n                    break\n                case \"oh6\":\n                    enemyKnight6 = i\n                    break\n                case \"oh7\":\n                    enemyKnight7 = i\n                    break\n                case \"oh8\":\n                    enemyKnight8 = i\n                    break\n                case \"oh9\":\n                    enemyKnight9 = i\n                    break\n                case \"oh01\":\n                    enemyKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyKnights = [enemyKnight1, \n                            enemyKnight2, \n                            enemyKnight3, \n                            enemyKnight4, \n                            enemyKnight5, \n                            enemyKnight6, \n                            enemyKnight7, \n                            enemyKnight8, \n                            enemyKnight9, \n                            enemyKnight01]\n            \n            moveKnight(i, activePiece)\n        } \n        \n        if (/^op/.test(activePiece) && moveSquares.includes(i)) {\n            recordOpponentPawnMoves(i, activePiece, checkedByOpponentArr.current)\n\n            switch (activePiece) {\n                case \"op1\":\n                    enemyPawn1 = i\n                    break\n                case \"op2\":\n                    enemyPawn2 = i\n                    break\n                case \"op3\":\n                    enemyPawn3 = i\n                    break\n                case \"op4\":\n                    enemyPawn4 = i\n                    break\n                case \"op5\":\n                    enemyPawn5 = i\n                    break\n                case \"op6\":\n                    enemyPawn6 = i\n                    break\n                case \"op7\":\n                    enemyPawn7 = i\n                    break\n                case \"op8\":\n                    enemyPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyPawns = [enemyPawn1, \n                          enemyPawn2, \n                          enemyPawn3, \n                          enemyPawn4, \n                          enemyPawn5, \n                          enemyPawn6, \n                          enemyPawn7, \n                          enemyPawn8]\n\n            movePawn(i, activePiece)\n        } \n\n        if (/^ob/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"ob1\":\n                    enemyBishop1 = i\n                    break\n                case \"ob2\":\n                    enemyBishop2 = i\n                    break\n                case \"ob3\":\n                    enemyBishop3 = i\n                    break\n                case \"ob4\":\n                    enemyBishop4 = i\n                    break\n                case \"ob5\":\n                    enemyBishop5 = i\n                    break\n                case \"ob6\":\n                    enemyBishop6 = i\n                    break\n                case \"ob7\":\n                    enemyBishop7 = i\n                    break\n                case \"ob8\":\n                    enemyBishop8 = i\n                    break\n                case \"ob9\":\n                    enemyBishop9 = i\n                    break\n                case \"ob01\":\n                    enemyBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyBishops = [enemyBishop1, \n                            enemyBishop2, \n                            enemyBishop3, \n                            enemyBishop4, \n                            enemyBishop5, \n                            enemyBishop6, \n                            enemyBishop7, \n                            enemyBishop8, \n                            enemyBishop9, \n                            enemyBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^or/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"or1\":\n                    enemyRook1 = i\n                    break\n                case \"or2\":\n                    enemyRook2 = i\n                    break\n                case \"or3\":\n                    enemyRook3 = i\n                    break\n                case \"or4\":\n                    enemyRook4 = i\n                    break\n                case \"or5\":\n                    enemyRook5 = i\n                    break\n                case \"or6\":\n                    enemyRook6 = i\n                    break\n                case \"or7\":\n                    enemyRook7 = i\n                    break\n                case \"or8\":\n                    enemyRook8 = i\n                    break\n                case \"or9\":\n                    enemyRook9 = i\n                    break\n                case \"or01\":\n                    enemyRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyRooks = [enemyRook1, \n                          enemyRook2, \n                          enemyRook3, \n                          enemyRook4, \n                          enemyRook5, \n                          enemyRook6, \n                          enemyRook7, \n                          enemyRook8, \n                          enemyRook9, \n                          enemyRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^oq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"oqw1\": case \"oqb1\":\n                    enemyQueen1 = i\n                    break\n                case \"oqw2\": case \"oqb2\":\n                    enemyQueen2 = i\n                    break\n                case \"oqw3\": case \"oqb3\":\n                    enemyQueen3 = i\n                    break\n                case \"oqw4\": case \"oqb4\":\n                    enemyQueen4 = i\n                    break\n                case \"oqw5\": case \"oqb5\":\n                    enemyQueen5 = i\n                    break\n                case \"oqw6\": case \"oqb6\":\n                    enemyQueen6 = i\n                    break\n                case \"oqw7\": case \"oqb7\":\n                    enemyQueen7 = i\n                    break\n                case \"oqw8\": case \"oqb8\":\n                    enemyQueen8 = i\n                    break\n                case \"oqw9\": case \"oqb9\":\n                    enemyQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyQueens = [enemyQueen1, \n                           enemyQueen2, \n                           enemyQueen3, \n                           enemyQueen4, \n                           enemyQueen5, \n                           enemyQueen6, \n                           enemyQueen7, \n                           enemyQueen8, \n                           enemyQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^ok/.test(activePiece) \n            && moveSquares.includes(i)) {\n            enemyKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n        } \n    }\n\n    const updateStateBoard = (i, string) => {\n        if (/^pp/.test(string) || /^op/.test(string)) {\n            store.dispatch({\n                type: \"pawnMoved\",\n                payload: string\n            })\n        }\n\n        if (/(pr1)|(pr2)/.test(string) || /^pk/.test(string)) {\n            store.dispatch({\n                type: \"castlingPlayerMoved\",\n                payload: string\n            })\n        } \n        \n        if (/(or1)|(or2)/.test(string) || /^ok/.test(string)){\n            store.dispatch({\n                type: \"castlingEnemyMoved\",\n                payload: string\n            })\n        }\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        pieceNewSquare.current = i\n        playerNewSquareForEngine.current = boardEntries.filter(([key, value]) => value[0] === pieceNewSquare.current).flat()[1][1]\n\n        store.dispatch({\n            type: \"highlightMove\",\n            payload: i\n        })\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        } \n\n        recordBoard()\n    }\n\n    const checkGameEnd = () => {\n        let arrPlayerCheckmate = []\n        let arrEnemyCheckmate = []\n        let arrPlayerStalemate = []\n        let arrEnemyStalemate = []\n        \n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 attackedByOpponentArr, \n                 false,\n                 true)\n        attacked(playerRooks, \n                 playerKnights, \n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 attackedByPlayerArr, \n                 false,\n                 true)\n        \n        recordPlayerKingMoves(playerKing, arrPlayerCheckmate)\n        recordEnemyKingMoves(enemyKing, arrEnemyCheckmate)\n\n        if (\n            (\n                playerKingAttacked \n                && !attackedByPlayerArr.current.includes(checkingPiece.current) \n                && arrPlayerCheckmate.length === 0 \n                && !playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                            .flat()\n                                                            .some(a => attackedByPlayerArr.current.includes(a))\n            ) \n                ||\n            (\n                enemyKingAttacked \n                && !attackedByOpponentArr.current.includes(checkingPiece.current) \n                && arrEnemyCheckmate.length === 0 \n                && !enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                           .flat()\n                                                           .some(a => attackedByOpponentArr.current.includes(a))\n            )\n            ) {\n            \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (playerKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You've been checkmated.\"\n                })\n            }\n\n            if (enemyKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You checkmated your opponent.\"\n                })\n            }\n        }\n\n        playerRooks.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrPlayerStalemate, \n                                             playerSquaresRender, \n                                             enemySquaresRender, \n                                             true, \n                                             true))\n\n        playerKnights.forEach(a => recordKnightMoves(a, arrPlayerStalemate, playerSquaresRender))\n\n        playerBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerBishops.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(rookMoves.current, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerPawns.forEach(a => recordPlayerPawnMoves(a, null, arrPlayerStalemate))\n\n        recordPlayerKingMoves(playerKing, arrPlayerStalemate)\n\n        enemyRooks.forEach(a => checkArrays(rookMoves.current, \n                                            a, \n                                            arrEnemyStalemate, \n                                            enemySquaresRender, \n                                            playerSquaresRender, \n                                            true, \n                                            true))\n\n        enemyKnights.forEach(a => recordKnightMoves(a, arrEnemyStalemate, enemySquaresRender))\n\n        enemyBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyBishops.forEach(a => checkArrays(blackBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender,\n                                              playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(blackBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyPawns.forEach(a => recordOpponentPawnMoves(a, null, arrEnemyStalemate))\n\n        recordEnemyKingMoves(enemyKing, arrEnemyStalemate)\n\n        arrPlayerStalemate = arrPlayerStalemate.filter(a => a > 0 && a < 65)\n        arrEnemyStalemate = arrEnemyStalemate.filter(a => a > 0 && a < 65)\n\n        if ((arrPlayerStalemate.length === 0 && !playerKingAttacked) \n            || (arrEnemyStalemate.length === 0 && !enemyKingAttacked) \n            || occupiedSquaresRender.length === 2 \n            || halfMoveCounter === 50) {\n \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (halfMoveCounter === 50) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Draw due to 50 move rule.\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Game ended due to stalemate.\"\n                })\n            }\n        }\n\n        for (let i = 0; i < moves.length; i++) {\n            if (JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 4]) && \n                JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 8])) {\n                    if (sounds) {\n                        gameEndSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"gameEnd\"\n                    })\n\n                    store.dispatch({\n                        type: \"modalOpen\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"endMessage\",\n                        payload: \"Draw due to threefold repetition.\"\n                    })\n            }\n        }\n    }\n    \n    const animatePiece = (i, string, num1, num2) => { \n        if (moves.length === 1 && sounds) {\n            gameEndSound.play()\n        } \n\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1 * -1, num2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1, num2]\n            })\n        }\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)){\n                if (playerPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (playerKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (playerBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (playerRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (playerQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n                \n                if (enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (enemyKing8StarArr.current.flat().includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n                    \n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n                \n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n                \n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n\n            if ((color === \"black\" && toMove === \"w\") || (color === \"white\" && toMove === \"b\")) {\n                store.dispatch({\n                    type: \"moveCounter\"\n                })\n            }\n\n            if (/^pp/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            } \n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                    \n                    checkingPiece.current = i\n                } \n\n                if (enemyPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (enemyKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (enemyBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (enemyRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (enemyQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n\n                if (checkedByOpponentArr.current.includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (playerKing8StarArr.current.flat().includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n\n            if (/^op/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n\n        checkedByOpponentArr.current = []\n        checkedByPlayerArr.current = []\n    }  \n\n    const moveKnight = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case -17:\n                animatePiece(i, string, -80, -160)\n                break\n            case -15:\n                animatePiece(i, string, 80, -160)\n                break\n            case -10:\n                animatePiece(i, string, -160, -80)\n                break\n            case -6:\n                animatePiece(i, string, 160, -80)\n                break\n            case 6:\n                animatePiece(i, string, -160, 80)\n                break\n            case 10:\n                animatePiece(i, string, 160, 80)\n                break\n            case 15:\n                animatePiece(i, string, -80, 160)\n                break\n            case 17:\n                animatePiece(i, string, 80, 160)\n                break\n            default:\n                break\n        }   \n    }\n\n    const movePawn = (i, string) => {\n        if (i === enPassantSquare.current[0]) {\n            switch (pieceSquareForEngine.current - i) {\n                case -9:\n                    animateEnPassant(-80, -80, string, i)\n                    break\n                case -7:\n                    animateEnPassant(80, -80, string, i)\n                    break\n                case 7:\n                    animateEnPassant(-80, 80, string, i)\n                    break\n                case 9:\n                    animateEnPassant(80, 80, string, i)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                case 8:\n                    animatePiece(i, string, 0, 80)\n                    break\n                case 9:\n                    animatePiece(i, string, 80, 80)\n                    break\n                case 16:\n                    enPassantSquare.current = [i + 8, string]\n                    animatePiece(i, string, 0, 160)\n                    break\n                case -16: \n                    enPassantSquare.current = [i - 8, string]\n                    animatePiece(i, string, 0, -160)\n                    break\n                case -8: \n                    animatePiece(i, string, 0, -80)\n                    break\n                case -7: \n                    animatePiece(i, string, 80, -80)\n                    break\n                case -9: \n                    animatePiece(i, string, -80, -80)\n                    break\n                default:\n                    break\n            }\n        }\n    }\n\n    const moveBishop = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveRook = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case 7:\n                animatePiece(i, string, 560, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            case -7:\n                animatePiece(i, string, -560, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveQueen = (i, string) => {\n        if ((knightLimits.current[0].includes(pieceSquare) || knightLimits.current[3].includes(pieceSquare)) \n            && (knightLimits.current[0].includes(i) || knightLimits.current[3].includes(i))) {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, -560, 0)\n                    break\n                case 7:\n                    animatePiece(i, string, 560, 0)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, 80, -80)\n                    break\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                default:\n                    break\n            }\n        }\n        switch (pieceSquareForEngine.current - i) {                                                   \n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const animateCastling = (coor1, coor2, rookOldSq, newSqRook, rookToMove) => {\n        if (sounds) {\n           castlingSound.play()\n        }\n        \n        if (color === \"black\" && sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n            \n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook - 1\n            }\n        } else if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n\n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq + 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook + 56\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq - 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 56\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 56\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 56\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook + 56\n            }\n            \n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook + 56\n            }\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n\n            store.dispatch({\n                type: \"oldSquare\",\n                payload: rookOldSq\n            })\n    \n            store.dispatch({\n                type: \"newSquare\",\n                payload: newSqRook\n            })\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook\n            }\n        }\n\n        store.dispatch({\n            type: rookToMove\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n        enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n\n        recordBoard()\n\n        if (/^pr/.test(rookToMove)) {\n            if ((playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pr/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const animateEnPassant = (coor1, coor2, string, i) => {\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n        }\n\n        let capturedPawn = i\n\n        if (/^pp/.test(string)) {\n            capturedPawn += 8\n        } else {\n            capturedPawn -= 8\n        }\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: string,\n            payload: \"takes\"\n        })\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: string\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        recordBoard()\n\n        if (/^pp/.test(string)) {\n            store.dispatch({\n                type: \"notationArr\",\n                payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n            })\n            \n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n\n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                    .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (sounds) {\n            captureSound.play()\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pp/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^op/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const moveKing = (i, string) => {\n        if (/^pk/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case -2:\n                    animateCastling(-160, 0, 64, 62, \"pr2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                case 2:\n                    animateCastling(160, 0, 57, 60, \"pr1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (/^ok/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case 2:\n                    animateCastling(160, 0, 1, 4, \"or2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                case -2:\n                    animateCastling(-160, 0, 8, 6, \"or1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -9:\n                animatePiece(i, string, -80, -80)\n                break\n            default:\n                break\n        }\n    }\n\n    return (\n        <div>\n            {renderPieces()}\n            {renderMovement()}\n        </div>\n    )\n}\n\nexport default Pieces"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","stringToSend","enemyQueen1","enemyQueen2","enemyQueen3","enemyQueen4","enemyQueen5","enemyQueen6","enemyQueen7","enemyQueen8","enemyQueen9","useState","pawnPromotes","setPawnPromotes","activePiece","useSelector","state","board","castlingEnemyMoved","castlingPlayerMoved","enemyKingAttacked","gameEnd","halfMoveCounter","moveCounter","moveSquares","moveVar","pawnsFirstMove","pieceSquare","playerKingAttacked","toMove","checkArrPlayer","checkArrOpponent","sandbox","options","color","skillLevel","depth","milliseconds","numbers","behavior","animations","sounds","moves","progression","currentMove","wasmSupported","WebAssembly","validate","Uint8Array","of","stockfish","useMemo","Worker","boardEntries","Object","entries","filteredEnemyRender","filter","key","test","filteredEnemyLive","store","justEnemyRender","fromEntries","justEnemyLive","filteredPlayerRender","filteredPlayerLive","justPlayerRender","justPlayerLive","filteredOccupiedRender","filteredOccupiedLive","justOccupiedRender","justOccupiedLive","enemySquaresRender","values","map","a","playerSquaresRender","occupiedSquaresRender","enemySquaresLive","playerSquaresLive","occupiedSquaresLive","enPassantSquare","useRef","pieceSquareForEngine","pieceNewSquare","notInitialRender","checkingPiece","playerPiece","playerNewSquareForEngine","animationSpeed","engineData","moveSound","Audio","moveSoundFile","captureSound","captureSoundFile","castlingSound","castlingSoundFile","checkSound","checkSoundFile","gameEndSound","gameEndSoundFile","knightLimits","whiteBishopMoves","blackBishopMoves","rookMoves","enemyBishop1","ob1","enemyBishop2","ob2","enemyBishop3","ob3","enemyBishop4","ob4","enemyBishop5","ob5","enemyBishop6","ob6","enemyBishop7","ob7","enemyBishop8","ob8","enemyBishop9","ob9","enemyBishop01","ob01","enemyKnight1","oh1","enemyKnight2","oh2","enemyKnight3","oh3","enemyKnight4","oh4","enemyKnight5","oh5","enemyKnight6","oh6","enemyKnight7","oh7","enemyKnight8","oh8","enemyKnight9","oh9","enemyKnight01","oh01","enemyRook1","or1","enemyRook2","or2","enemyRook3","or3","enemyRook4","or4","enemyRook5","or5","enemyRook6","or6","enemyRook7","or7","enemyRook8","or8","enemyRook9","or9","enemyRook01","or01","oqb1","oqw1","oqb2","oqw2","oqb3","oqw3","oqb4","oqw4","oqb5","oqw5","oqb6","oqw6","oqb7","oqw7","oqb8","oqw8","oqb9","oqw9","playerQueen1","playerQueen2","playerQueen3","playerQueen4","playerQueen5","playerQueen6","playerQueen7","playerQueen8","playerQueen9","enemyKing","okw","okb","enemyPawn1","op1","enemyPawn2","op2","enemyPawn3","op3","enemyPawn4","op4","enemyPawn5","op5","enemyPawn6","op6","enemyPawn7","op7","enemyPawn8","op8","playerBishop1","pb1","playerBishop2","pb2","playerBishop3","pb3","playerBishop4","pb4","playerBishop5","pb5","playerBishop6","pb6","playerBishop7","pb7","playerBishop8","pb8","playerBishop9","pb9","playerBishop01","pb01","playerKnight1","ph1","playerKnight2","ph2","playerKnight3","ph3","playerKnight4","ph4","playerKnight5","ph5","playerKnight6","ph6","playerKnight7","ph7","playerKnight8","ph8","playerKnight9","ph9","playerKnight01","ph01","playerRook1","pr1","playerRook2","pr2","playerRook3","pr3","playerRook4","pr4","playerRook5","pr5","playerRook6","pr6","playerRook7","pr7","playerRook8","pr8","playerRook9","pr9","playerRook01","pr01","pqw1","pqb1","pqw2","pqb2","pqw3","pqb3","pqw4","pqb4","pqw5","pqb5","pqw6","pqb6","pqw7","pqb7","pqw8","pqb8","pqw9","pqb9","playerKing","pkw","pkb","playerPawn1","pp1","playerPawn2","pp2","playerPawn3","pp3","playerPawn4","pp4","playerPawn5","pp5","playerPawn6","pp6","playerPawn7","pp7","playerPawn8","pp8","checkedByPlayerArr","attackedByPlayerArr","attackedByOpponentArr","checkedByOpponentArr","playerHorseSafetyArr","enemyHorseSafetyArr","playerKing8StarArr","enemyKing8StarArr","protectedByPlayerArr","protectedByOpponentArr","playerKing8StarXrayArr","enemyKing8StarXrayArr","playerKingSpiderSenseArr","enemyKingSpiderSenseArr","playerKingArr","opponentKingArr","playerRooks","playerKnights","playerBishops","playerQueens","playerPawns","enemyRooks","enemyKnights","enemyBishops","enemyQueens","enemyPawns","useEffect","recordBoard","postMessage","type","payload","JSON","stringify","checkGameEnd","current","movePiece","setTimeout","resetPiece","clearTimeout","engineTurn","push","addEventListener","data","error","kingSpiderSense","attacked","king8Star","recordKnightMoves","some","includes","encode","string","engineOldSquare","slice","engineNewSquare","enginePieceToMove","flat","enginePieceSquare","engineWhereToMove","recordOpponentPawnAttacks","updateStateBoard","movePawn","split","promotePawn","checkArrays","moveBishop","moveKnight","moveRook","moveQueen","moveKing","listener","fen","arr","fenEncode","fenArrays","j","fenString","temp","reducedArr","elem","join","customReducer","pk","ok","combThroughSubArrayPlus","index","subArr","arrResult","ownArr","oppArr","exclude","Math","max","combThroughSubArrayMinus","min","ownSquares","oppSquares","arrRes","boolean","king","rooks","knights","bishops","queens","pawns","protect","coverCheck","arrPawn","forEach","recordPlayerPawnMoves","recordOpponentPawnMoves","recordPlayerPawnAttacks","pawn","pieceToPromoteTo","play","arrayChecked","exclude1","exclude2","arr2","k","arrMoves","excArr","number","arrTech","piece","recordPlayerKingMoves","recordEnemyKingAttacks","x","recordEnemyKingMoves","recordPlayerKingAttacks","onSquareClick","oldSquare","arrPlayerCheckmate","arrEnemyCheckmate","arrPlayerStalemate","arrEnemyStalemate","animatePiece","num1","num2","every","animateEnPassant","animateCastling","coor1","coor2","rookOldSq","newSqRook","rookToMove","capturedPawn","renderEachPiece","src1","src2","alt1","alt2","src","alt","className","style","transform","transition","height","renderRoyals","renderPlayerPromotion","display","whiteQueen","blackQueen","onClick","whiteRook","blackRook","whiteBishop","blackBishop","whiteKnight","blackKnight","renderOpponentPromotion","renderEntries","whiteKing","blackKing","blackPawn","whitePawn","parse","renderPieces","renderMovement"],"sourceRoot":""}