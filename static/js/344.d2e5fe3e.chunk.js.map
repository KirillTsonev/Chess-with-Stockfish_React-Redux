{"version":3,"file":"static/js/344.d2e5fe3e.chunk.js","mappings":"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AAA,EAAAA,QAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAE9DqP,IAA2BrP,EAAAA,EAAAA,QAAO,IAClCsP,IAA0BtP,EAAAA,EAAAA,QAAO,IAEjCuP,GAAc,CAACvE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IACfsD,GAAgB,CAAC5F,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IACjB2E,GAAgB,CAACjH,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IACjBgG,GAAe,CAAC9I,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAChBuI,GAAc,CAAClC,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IAEfqB,GAAa,CAACtL,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IACdqK,GAAe,CAAC3M,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IAChB0L,GAAe,CAAChO,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IAChB+M,GAAc,CAACrU,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACf8T,GAAa,CAACxI,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,KAElB2H,EAAAA,EAAAA,YAAU,WACNC,KAEAxR,EAAAA,EAAAA,SAAe,CACXyR,KAAM,cACNC,QAASC,KAAKC,UAAU7T,KAGvBe,KACDkD,GAAU6P,YAAY,OACtB7P,GAAU6P,YAAY,WACtB7P,GAAU6P,YAAY,cAE9B,GAAG,KAEHN,EAAAA,EAAAA,YAAU,WACNC,KACAM,IACJ,GAAG,CAAC/T,KAEJwT,EAAAA,EAAAA,YAAU,WACN,GAAI9P,GAAiBsQ,QAAS,CAC1B,IAAMC,EAAYC,YAAW,WACzBjS,EAAAA,EAAAA,SAAe,CACXyR,KAAM,cACNC,QAAS,KAGb1R,EAAAA,EAAAA,SAAe,CACXyR,KAAM,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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/pieces/Pieces.jsx"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/* eslint-disable array-callback-return */\n/* eslint-disable no-loop-func */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport whiteKing from \"../../images/whiteKing.png\"\nimport blackKing from \"../../images/blackKing.png\"\nimport whiteQueen from \"../../images/whiteQueen.png\"\nimport blackQueen from \"../../images/blackQueen.png\"\nimport whiteRook from \"../../images/whiteRook.png\"\nimport blackRook from \"../../images/blackRook.png\"\nimport whiteKnight from \"../../images/whiteKnight.png\"\nimport blackKnight from \"../../images/blackKnight.png\"\nimport whiteBishop from \"../../images/whiteBishop.png\"\nimport blackBishop from \"../../images/blackBishop.png\"\nimport whitePawn from \"../../images/whitePawn.png\"\nimport blackPawn from \"../../images/blackPawn.png\"\n\nimport moveSoundFile from \"../../sounds/move.ogg\"\nimport captureSoundFile from \"../../sounds/capture.ogg\"\nimport checkSoundFile from \"../../sounds/check.ogg\"\nimport castlingSoundFile from \"../../sounds/castling.ogg\"\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\n\nimport { useSelector } from \"react-redux\"\nimport { useState, useEffect, useRef, useMemo } from \"react\"\n\nimport store from \"../redux/store\"\n\nimport \"./pieces.sass\"\n\nconst Pieces = () => {\n    const [pawnPromotes, setPawnPromotes] = useState(\"\")\n\n    const activePiece = useSelector(state => state.board.activePiece)\n    const board = useSelector(state => state.board.board)\n    const castlingEnemyMoved = useSelector(state => state.board.castlingEnemyMoved)\n    const castlingPlayerMoved = useSelector(state => state.board.castlingPlayerMoved)\n    const enemyKingAttacked = useSelector(state => state.board.enemyKingAttacked)\n    const gameEnd = useSelector(state => state.board.gameEnd)\n    const halfMoveCounter = useSelector(state => state.board.halfMoveCounter)\n    const moveCounter = useSelector(state => state.board.moveCounter)\n    const moveSquares = useSelector(state => state.board.moveSquares)\n    const moveVar = useSelector(state => state.board.moveVar)\n    const pawnsFirstMove = useSelector(state => state.board.pawnsFirstMove)  \n    const pieceSquare = useSelector(state => state.board.pieceSquare)\n    const playerKingAttacked = useSelector(state => state.board.playerKingAttacked)\n    const toMove = useSelector(state => state.board.toMove)\n    const checkArrPlayer = useSelector(state => state.board.checkArrPlayer)\n    const checkArrOpponent = useSelector(state => state.board.checkArrOpponent)\n\n    const sandbox = useSelector(state => state.options.sandbox)\n    const color = useSelector(state => state.options.color)\n    const options = useSelector(state => state.options.options)\n\n    const numbers = useSelector(state => state.behavior.numbers)\n    const animations = useSelector(state => state.behavior.animations)\n    const sounds = useSelector(state => state.behavior.sounds)\n\n    const moves = useSelector(state => state.progression.moves)\n    const currentMove = useSelector(state => state.progression.currentMove)\n    \n    let boardEntries = Object.entries(board)\n\n    let filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n    let filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n    let justEnemyRender = Object.fromEntries(filteredEnemyRender)\n    let justEnemyLive = Object.fromEntries(filteredEnemyLive)\n    \n    let filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n    let filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))\n    let justPlayerRender = Object.fromEntries(filteredPlayerRender)\n    let justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n    let filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n    let filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n    let justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n    let justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n    let enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n    let playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n    let occupiedSquaresRender =  Object.values(justOccupiedRender).map(a => a = a[0])\n\n    let enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n    let playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n    let occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n    const enPassantSquare = useRef([0, \"\"])\n\n    const pieceSquareForEngine = useRef(1)\n    const pieceNewSquare = useRef(1)\n    const notInitialRender = useRef(false)\n    const checkingPiece = useRef(null)\n\n    const wasmSupported = typeof WebAssembly === 'object' \n        && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\n    const stockfish = new Worker(wasmSupported ? 'stockfish.wasm.js' : 'stockfish.js')\n\n    const playerPiece = useRef(null)\n    const playerNewSquareForEngine = useRef(null)\n\n    const animationSpeed = useRef()\n\n    const moveSound = new Audio(moveSoundFile)\n    const captureSound = new Audio(captureSoundFile)\n    const castlingSound = new Audio(castlingSoundFile)\n    const checkSound = new Audio(checkSoundFile)\n    const gameEndSound = new Audio(gameEndSoundFile)\n\n    const knightLimits = useRef([[], [], [], []])\n\n    const whiteBishopMoves = [\n        [7, 16],\n        [5, 14, 23, 32],\n        [3, 12, 21, 30, 39, 48],\n        [1, 10, 19, 28, 37, 46, 55, 64],\n        [17, 26, 35, 44, 53, 62],\n        [33, 42, 51, 60],\n        [49, 58],\n        [3, 10, 17],\n        [5, 12, 19, 26, 33],\n        [7, 14, 21, 28, 35, 42, 49],\n        [16, 23, 30, 37, 44, 51, 58],\n        [32, 39, 46, 53, 60],\n        [48, 55, 62]\n    ]\n\n    const blackBishopMoves = [\n        [2, 9],\n        [4, 11, 18, 25],\n        [6, 13, 20, 27, 34, 41],\n        [8, 15, 22, 29, 36, 43, 50, 57],\n        [24, 31, 38, 45, 52, 59],\n        [40, 47, 54, 61],\n        [56, 63],\n        [6, 15, 24],\n        [4, 13, 22, 31, 40],\n        [2, 11, 20, 29, 38, 47, 56],\n        [9, 18, 27, 36, 45, 54, 63],\n        [25, 34, 43, 52, 61],\n        [41, 50, 59]\n    ]\n\n    const rookMoves = useRef([[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []])\n\n    let stringToSend\n\n    let enemyBishop1 = board.ob1 ? board.ob1[0] : null\n    let enemyBishop2 = board.ob2 ? board.ob2[0] : null\n    let enemyBishop3 = board.ob3 ? board.ob3[0] : null\n    let enemyBishop4 = board.ob4 ? board.ob4[0] : null\n    let enemyBishop5 = board.ob5 ? board.ob5[0] : null\n    let enemyBishop6 = board.ob6 ? board.ob6[0] : null\n    let enemyBishop7 = board.ob7 ? board.ob7[0] : null\n    let enemyBishop8 = board.ob8 ? board.ob8[0] : null\n    let enemyBishop9 = board.ob9 ? board.ob9[0] : null\n    let enemyBishop01 = board.ob01 ? board.ob01[0] : null\n\n    let enemyKnight1 = board.oh1 ? board.oh1[0] : null\n    let enemyKnight2 = board.oh2 ? board.oh2[0] : null\n    let enemyKnight3 = board.oh3 ? board.oh3[0] : null\n    let enemyKnight4 = board.oh4 ? board.oh4[0] : null\n    let enemyKnight5 = board.oh5 ? board.oh5[0] : null\n    let enemyKnight6 = board.oh6 ? board.oh6[0] : null\n    let enemyKnight7 = board.oh7 ? board.oh7[0] : null\n    let enemyKnight8 = board.oh8 ? board.oh8[0] : null\n    let enemyKnight9 = board.oh9 ? board.oh9[0] : null\n    let enemyKnight01 = board.oh01 ? board.oh01[0] : null\n\n    let enemyRook1 = board.or1 ? board.or1[0] : null\n    let enemyRook2 = board.or2 ? board.or2[0] : null\n    let enemyRook3 = board.or3 ? board.or3[0] : null\n    let enemyRook4 = board.or4 ? board.or4[0] : null\n    let enemyRook5 = board.or5 ? board.or5[0] : null\n    let enemyRook6 = board.or6 ? board.or6[0] : null\n    let enemyRook7 = board.or7 ? board.or7[0] : null\n    let enemyRook8 = board.or8 ? board.or8[0] : null\n    let enemyRook9 = board.or9 ? board.or9[0] : null\n    let enemyRook01 = board.or01 ? board.or01[0] : null\n\n    let enemyQueen1\n    let enemyQueen2\n    let enemyQueen3\n    let enemyQueen4\n    let enemyQueen5\n    let enemyQueen6\n    let enemyQueen7\n    let enemyQueen8\n    let enemyQueen9\n\n    color === \"white\" ? (enemyQueen1 = board.oqb1 ? board.oqb1[0] : null) \n                      : (enemyQueen1 = board.oqw1 ? board.oqw1[0] : null)\n    \n    color === \"white\" ? (enemyQueen2 = board.oqb2 ? board.oqb2[0] : null) \n                      : (enemyQueen2 = board.oqw2 ? board.oqw2[0] : null)\n    \n    color === \"white\" ? (enemyQueen3 = board.oqb3 ? board.oqb3[0] : null) \n                      : (enemyQueen3 = board.oqw3 ? board.oqw3[0] : null)\n    \n    color === \"white\" ? (enemyQueen4 = board.oqb4 ? board.oqb4[0] : null) \n                      : (enemyQueen4 = board.oqw4 ? board.oqw4[0] : null)\n    \n    color === \"white\" ? (enemyQueen5 = board.oqb5 ? board.oqb5[0] : null) \n                      : (enemyQueen5 = board.oqw5 ? board.oqw5[0] : null)\n    \n    color === \"white\" ? (enemyQueen6 = board.oqb6 ? board.oqb6[0] : null) \n                      : (enemyQueen6 = board.oqw6 ? board.oqw6[0] : null)\n    \n    color === \"white\" ? (enemyQueen7 = board.oqb7 ? board.oqb7[0] : null) \n                      : (enemyQueen7 = board.oqw7 ? board.oqw7[0] : null)\n    \n    color === \"white\" ? (enemyQueen8 = board.oqb8 ? board.oqb8[0] : null) \n                      : (enemyQueen8 = board.oqw8 ? board.oqw8[0] : null)\n    \n    color === \"white\" ? (enemyQueen9 = board.oqb9 ? board.oqb9[0] : null) \n                      : (enemyQueen9 = board.oqw9 ? board.oqw9[0] : null)\n\n    let enemyKing = board.okw ? board.okw[0] : board.okb[0]\n\n    let enemyPawn1 = board.op1 ? board.op1[0] : null\n    let enemyPawn2 = board.op2 ? board.op2[0] : null\n    let enemyPawn3 = board.op3 ? board.op3[0] : null\n    let enemyPawn4 = board.op4 ? board.op4[0] : null\n    let enemyPawn5 = board.op5 ? board.op5[0] : null\n    let enemyPawn6 = board.op6 ? board.op6[0] : null\n    let enemyPawn7 = board.op7 ? board.op7[0] : null\n    let enemyPawn8 = board.op8 ? board.op8[0] : null\n\n    let playerBishop1 = board.pb1 ? board.pb1[0] : null\n    let playerBishop2 = board.pb2 ? board.pb2[0] : null\n    let playerBishop3 = board.pb3 ? board.pb3[0] : null\n    let playerBishop4 = board.pb4 ? board.pb4[0] : null\n    let playerBishop5 = board.pb5 ? board.pb5[0] : null\n    let playerBishop6 = board.pb6 ? board.pb6[0] : null\n    let playerBishop7 = board.pb7 ? board.pb7[0] : null\n    let playerBishop8 = board.pb8 ? board.pb8[0] : null\n    let playerBishop9 = board.pb9 ? board.pb9[0] : null\n    let playerBishop01 = board.pb01 ? board.pb01[0] : null\n\n    let playerKnight1 = board.ph1 ? board.ph1[0] : null\n    let playerKnight2 = board.ph2 ? board.ph2[0] : null\n    let playerKnight3 = board.ph3 ? board.ph3[0] : null\n    let playerKnight4 = board.ph4 ? board.ph4[0] : null\n    let playerKnight5 = board.ph5 ? board.ph5[0] : null\n    let playerKnight6 = board.ph6 ? board.ph6[0] : null\n    let playerKnight7 = board.ph7 ? board.ph7[0] : null\n    let playerKnight8 = board.ph8 ? board.ph8[0] : null\n    let playerKnight9 = board.ph9 ? board.ph9[0] : null\n    let playerKnight01 = board.ph01 ? board.ph01[0] : null\n\n    let playerRook1 = board.pr1 ? board.pr1[0] : null\n    let playerRook2 = board.pr2 ? board.pr2[0] : null\n    let playerRook3 = board.pr3 ? board.pr3[0] : null\n    let playerRook4 = board.pr4 ? board.pr4[0] : null\n    let playerRook5 = board.pr5 ? board.pr5[0] : null\n    let playerRook6 = board.pr6 ? board.pr6[0] : null\n    let playerRook7 = board.pr7 ? board.pr7[0] : null\n    let playerRook8 = board.pr8 ? board.pr8[0] : null\n    let playerRook9 = board.pr9 ? board.pr9[0] : null\n    let playerRook01 = board.pr01 ? board.pr01[0] : null\n\n    let playerQueen1\n    let playerQueen2\n    let playerQueen3\n    let playerQueen4\n    let playerQueen5\n    let playerQueen6\n    let playerQueen7\n    let playerQueen8\n    let playerQueen9\n\n    color === \"white\" ? (playerQueen1 = board.pqw1 ? board.pqw1[0] : null) \n                      : (playerQueen1 = board.pqb1 ? board.pqb1[0] : null)\n    \n    color === \"white\" ? (playerQueen2 = board.pqw2 ? board.pqw2[0] : null) \n                      : (playerQueen2 = board.pqb2 ? board.pqb2[0] : null)\n    \n    color === \"white\" ? (playerQueen3 = board.pqw3 ? board.pqw3[0] : null) \n                      : (playerQueen3 = board.pqb3 ? board.pqb3[0] : null)\n    \n    color === \"white\" ? (playerQueen4 = board.pqw4 ? board.pqw4[0] : null) \n                      : (playerQueen4 = board.pqb4 ? board.pqb4[0] : null)\n    \n    color === \"white\" ? (playerQueen5 = board.pqw5 ? board.pqw5[0] : null) \n                      : (playerQueen5 = board.pqb5 ? board.pqb5[0] : null)\n    \n    color === \"white\" ? (playerQueen6 = board.pqw6 ? board.pqw6[0] : null) \n                      : (playerQueen6 = board.pqb6 ? board.pqb6[0] : null)\n    \n    color === \"white\" ? (playerQueen7 = board.pqw7 ? board.pqw7[0] : null) \n                      : (playerQueen7 = board.pqb7 ? board.pqb7[0] : null)\n    \n    color === \"white\" ? (playerQueen8 = board.pqw8 ? board.pqw8[0] : null) \n                      : (playerQueen8 = board.pqb8 ? board.pqb8[0] : null)\n    \n    color === \"white\" ? (playerQueen9 = board.pqw9 ? board.pqw9[0] : null) \n                      : (playerQueen9 = board.pqb9 ? board.pqb9[0] : null)\n\n    let playerKing = board.pkw ? board.pkw[0] : board.pkb[0]\n\n    let playerPawn1 = board.pp1 ? board.pp1[0] : null\n    let playerPawn2 = board.pp2 ? board.pp2[0] : null\n    let playerPawn3 = board.pp3 ? board.pp3[0] : null\n    let playerPawn4 = board.pp4 ? board.pp4[0] : null\n    let playerPawn5 = board.pp5 ? board.pp5[0] : null\n    let playerPawn6 = board.pp6 ? board.pp6[0] : null\n    let playerPawn7 = board.pp7 ? board.pp7[0] : null\n    let playerPawn8 = board.pp8 ? board.pp8[0] : null\n\n    const checkedByPlayerArr = useRef([])\n    const attackedByPlayerArr = useRef([])\n\n    const attackedByOpponentArr = useRef([])\n    const checkedByOpponentArr = useRef([])\n\n    const playerHorseSafetyArr = useRef([])\n    const enemyHorseSafetyArr = useRef([])\n\n    const playerKing8StarArr = useRef([])\n    const enemyKing8StarArr = useRef([])\n\n    const protectedByPlayerArr = useRef([])\n    const protectedByOpponentArr = useRef([])\n\n    const playerKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n    const enemyKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n\n    let playerKingSpiderSenseArr = useRef([])\n    let enemyKingSpiderSenseArr = useRef([])\n\n    let playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n    let playerKnights = [playerKnight1, \n                         playerKnight2, \n                         playerKnight3, \n                         playerKnight4, \n                         playerKnight5, \n                         playerKnight6, \n                         playerKnight7, \n                         playerKnight8, \n                         playerKnight9, \n                         playerKnight01]\n    let playerBishops = [playerBishop1, \n                         playerBishop2, \n                         playerBishop3, \n                         playerBishop4, \n                         playerBishop5, \n                         playerBishop6, \n                         playerBishop7, \n                         playerBishop8, \n                         playerBishop9, \n                         playerBishop01]\n    let playerQueens = [playerQueen1, \n                        playerQueen2, \n                        playerQueen3, \n                        playerQueen4, \n                        playerQueen5, \n                        playerQueen6, \n                        playerQueen7, \n                        playerQueen8, \n                        playerQueen9]\n    let playerPawns = [playerPawn1, \n                       playerPawn2, \n                       playerPawn3, \n                       playerPawn4, \n                       playerPawn5, \n                       playerPawn6, \n                       playerPawn7, \n                       playerPawn8]\n\n    let enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n    let enemyKnights = [enemyKnight1, \n                        enemyKnight2, \n                        enemyKnight3, \n                        enemyKnight4, \n                        enemyKnight5, \n                        enemyKnight6, \n                        enemyKnight7, \n                        enemyKnight8, \n                        enemyKnight9, \n                        enemyKnight01]\n    let enemyBishops = [enemyBishop1, \n                        enemyBishop2, \n                        enemyBishop3, \n                        enemyBishop4, \n                        enemyBishop5, \n                        enemyBishop6, \n                        enemyBishop7, \n                        enemyBishop8, \n                        enemyBishop9, \n                        enemyBishop01]\n    let enemyQueens = [enemyQueen1, \n                       enemyQueen2, \n                       enemyQueen3, \n                       enemyQueen4, \n                       enemyQueen5, \n                       enemyQueen6, \n                       enemyQueen7, \n                       enemyQueen8, \n                       enemyQueen9]\n    let enemyPawns = [enemyPawn1, \n                      enemyPawn2, \n                      enemyPawn3, \n                      enemyPawn4, \n                      enemyPawn5, \n                      enemyPawn6, \n                      enemyPawn7, \n                      enemyPawn8]\n\n    useEffect(() => {\n        recordBoard()\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(board)\n        })\n\n        if (!sandbox) {\n            stockfish.postMessage('uci')\n            stockfish.postMessage('isready')\n            stockfish.postMessage('ucinewgame')\n        }\n    }, [])\n\n    useEffect(() => {\n        recordBoard()\n        checkGameEnd()\n    }, [board])\n\n    useEffect(() => {\n        if (notInitialRender.current) {\n            const movePiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"setMoveVar\",\n                    payload: [0, 0]\n                })\n            }, animations === \"none\" ? 0 : 50)\n\n            const resetPiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: null\n                })\n\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: null\n                })\n            }, 150)\n\n            return () => {\n                clearTimeout(movePiece)\n                clearTimeout(resetPiece)\n            }\n        } else {\n            notInitialRender.current = true\n        }\n    }, [JSON.stringify(board)])\n\n    useEffect(() => {\n        if (((color === \"white\" && toMove === \"b\") \n            || (color === \"black\" && toMove === \"w\")) \n            && !sandbox \n            && !pawnPromotes) {\n            engineTurn()\n        }\n    }, [toMove, options])\n\n    useMemo(() => {\n        if (animations === \"fast\") {\n            animationSpeed.current = .2\n        } else if (animations === \"average\") {\n            animationSpeed.current = .5\n        } else if (animations === \"slow\") {\n            animationSpeed.current = .8\n        } else {\n            animationSpeed.current = 0\n        }\n    }, [animations])\n\n    useMemo(() => {\n        for (let i = 1; i < 64; i += 8) {\n            knightLimits.current[0].push(i)\n            knightLimits.current[1].push(i + 1)\n            knightLimits.current[2].push(i + 6)\n            knightLimits.current[3].push(i + 7)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 9; i++) {\n            rookMoves.current[0].push(i)\n            rookMoves.current[1].push(i + 8)\n            rookMoves.current[2].push(i + 16)\n            rookMoves.current[3].push(i + 24)\n            rookMoves.current[4].push(i + 32)\n            rookMoves.current[5].push(i + 40)\n            rookMoves.current[6].push(i + 48)\n            rookMoves.current[7].push(i + 56)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 65; i += 8) {\n            rookMoves.current[8].push(i)\n            rookMoves.current[9].push(i + 1)\n            rookMoves.current[10].push(i + 2)\n            rookMoves.current[11].push(i + 3)\n            rookMoves.current[12].push(i + 4)\n            rookMoves.current[13].push(i + 5)\n            rookMoves.current[14].push(i + 6)\n            rookMoves.current[15].push(i + 7)\n        }\n    }, [])\n\n    stockfish.addEventListener('message', function(e) {\n        if (/^bestmove/.test(e.data)) {\n            console.log(e.data)\n            const engineOldSquare = e.data.slice(9, 11)\n            const engineNewSquare = e.data.slice(11, 13)\n            const enginePieceToMove = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[0]\n            const enginePieceSquare = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[1][0]\n            const engineWhereToMove = boardEntries.filter(([key, value]) => value[1] === engineNewSquare).flat()[1][0]\n\n            store.dispatch({\n                type: \"activePiece\",\n                payload: enginePieceToMove\n            })\n\n            store.dispatch({\n                type: \"oldSquare\",\n                payload: enginePieceSquare\n            })\n\n            pieceSquareForEngine.current = enginePieceSquare      \n\n            if (/^op/.test(enginePieceToMove)) {\n                recordOpponentPawnAttacks(engineWhereToMove, checkedByOpponentArr.current)\n\n                switch (enginePieceToMove) {\n                    case \"op1\":\n                        enemyPawn1 = engineWhereToMove\n                        break\n                    case \"op2\":\n                        enemyPawn2 = engineWhereToMove\n                        break\n                    case \"op3\":\n                        enemyPawn3 = engineWhereToMove\n                        break\n                    case \"op4\":\n                        enemyPawn4 = engineWhereToMove\n                        break\n                    case \"op5\":\n                        enemyPawn5 = engineWhereToMove\n                        break\n                    case \"op6\":\n                        enemyPawn6 = engineWhereToMove\n                        break\n                    case \"op7\":\n                        enemyPawn7 = engineWhereToMove\n                        break\n                    case \"op8\":\n                        enemyPawn8 = engineWhereToMove\n                        break\n                    default:\n                        break\n                }\n\n                if (e.data.split(\" \")[1].length === 5) {\n                    if (e.data.split(\" \")[1].slice(4) === \"q\") {\n                        promotePawn(enginePieceToMove, \"oq\", engineWhereToMove)\n                    }\n                    if (e.data.split(\" \")[1].slice(4) === \"r\") {\n                        promotePawn(enginePieceToMove, \"or\", engineWhereToMove)\n                    }\n                    if (e.data.split(\" \")[1].slice(4) === \"b\") {\n                        promotePawn(enginePieceToMove, \"ob\", engineWhereToMove)\n                    }\n                    if (e.data.split(\" \")[1].slice(4) === \"k\") {\n                        promotePawn(enginePieceToMove, \"oh\", engineWhereToMove)\n                    }\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyPawns = [enemyPawn1, \n                              enemyPawn2, \n                              enemyPawn3, \n                              enemyPawn4, \n                              enemyPawn5, \n                              enemyPawn6, \n                              enemyPawn7, \n                              enemyPawn8]\n\n                movePawn(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^ob/.test(enginePieceToMove)) {\n                checkArrays(whiteBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(blackBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                \n                switch (enginePieceToMove) {\n                    case \"ob1\":\n                        enemyBishop1 = engineWhereToMove\n                        break;\n                    case \"ob2\":\n                        enemyBishop2 = engineWhereToMove\n                        break;\n                    case \"ob3\":\n                        enemyBishop3 = engineWhereToMove\n                        break;\n                    case \"ob4\":\n                        enemyBishop4 = engineWhereToMove\n                        break;\n                    case \"ob5\":\n                        enemyBishop5 = engineWhereToMove\n                        break;\n                    case \"ob6\":\n                        enemyBishop6 = engineWhereToMove\n                        break;\n                    case \"ob7\":\n                        enemyBishop7 = engineWhereToMove\n                        break;\n                    case \"ob8\":\n                        enemyBishop8 = engineWhereToMove\n                        break;\n                    case \"ob9\":\n                        enemyBishop9 = engineWhereToMove\n                        break;\n                    case \"ob01\":\n                        enemyBishop01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyBishops = [enemyBishop1, \n                                enemyBishop2, \n                                enemyBishop3, \n                                enemyBishop4, \n                                enemyBishop5, \n                                enemyBishop6, \n                                enemyBishop7, \n                                enemyBishop8, \n                                enemyBishop9, \n                                enemyBishop01]\n\n                moveBishop(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^oh/.test(enginePieceToMove)) {\n                recordKnightMoves(engineWhereToMove, checkedByOpponentArr.current, enemySquaresLive)\n\n                switch (enginePieceToMove) {\n                    case \"oh1\":\n                        enemyKnight1 = engineWhereToMove\n                        break;\n                    case \"oh2\":\n                        enemyKnight2 = engineWhereToMove\n                        break;\n                    case \"oh3\":\n                        enemyKnight3 = engineWhereToMove\n                        break;\n                    case \"oh4\":\n                        enemyKnight4 = engineWhereToMove\n                        break;\n                    case \"oh5\":\n                        enemyKnight5 = engineWhereToMove\n                        break;\n                    case \"oh6\":\n                        enemyKnight6 = engineWhereToMove\n                        break;\n                    case \"oh7\":\n                        enemyKnight7 = engineWhereToMove\n                        break;\n                    case \"oh8\":\n                        enemyKnight8 = engineWhereToMove\n                        break;\n                    case \"oh9\":\n                        enemyKnight9 = engineWhereToMove\n                        break;\n                    case \"oh01\":\n                        enemyKnight01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyKnights = [enemyKnight1, \n                                enemyKnight2, \n                                enemyKnight3, \n                                enemyKnight4, \n                                enemyKnight5, \n                                enemyKnight6, \n                                enemyKnight7, \n                                enemyKnight8, \n                                enemyKnight9, \n                                enemyKnight01]\n\n                moveKnight(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^or/.test(enginePieceToMove)) {\n                checkArrays(rookMoves.current, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n\n                switch (enginePieceToMove) {\n                    case \"or1\":\n                        enemyRook1 = engineWhereToMove\n                        break;\n                    case \"or2\":\n                        enemyRook2 = engineWhereToMove\n                        break;\n                    case \"or3\":\n                        enemyRook3 = engineWhereToMove\n                        break;\n                    case \"or4\":\n                        enemyRook4 = engineWhereToMove\n                        break;\n                    case \"or5\":\n                        enemyRook5 = engineWhereToMove\n                        break;\n                    case \"or6\":\n                        enemyRook6 = engineWhereToMove\n                        break;\n                    case \"or7\":\n                        enemyRook7 = engineWhereToMove\n                        break;\n                    case \"or8\":\n                        enemyRook8 = engineWhereToMove\n                        break;\n                    case \"or9\":\n                        enemyRook9 = engineWhereToMove\n                        break;\n                    case \"or01\":\n                        enemyRook01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n                \n                enemyRooks = [enemyRook1, \n                              enemyRook2, \n                              enemyRook3, \n                              enemyRook4, \n                              enemyRook5, \n                              enemyRook6, \n                              enemyRook7, \n                              enemyRook8, \n                              enemyRook9, \n                              enemyRook01]\n\n                moveRook(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^oq/.test(enginePieceToMove)) {\n                checkArrays(whiteBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(blackBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(rookMoves.current, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n\n                switch (enginePieceToMove) {\n                    case \"oqw1\": case \"oqb1\":\n                        enemyQueen1 = engineWhereToMove\n                        break;\n                    case \"oqw2\": case \"oqb2\":\n                        enemyQueen2 = engineWhereToMove\n                        break;\n                    case \"oqw3\": case \"oqb3\":\n                        enemyQueen3 = engineWhereToMove\n                        break;\n                    case \"oqw4\": case \"oqb4\":\n                        enemyQueen4 = engineWhereToMove\n                        break;\n                    case \"oqw5\": case \"oqb5\":\n                        enemyQueen5 = engineWhereToMove\n                        break;\n                    case \"oqw6\": case \"oqb6\":\n                        enemyQueen6 = engineWhereToMove\n                        break;\n                    case \"oqw7\": case \"oqb7\":\n                        enemyQueen7 = engineWhereToMove\n                        break;\n                    case \"oqw8\": case \"oqb8\":\n                        enemyQueen8 = engineWhereToMove\n                        break;\n                    case \"oqw9\": case \"oqb9\":\n                        enemyQueen9 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyQueens = [enemyQueen1, \n                               enemyQueen2, \n                               enemyQueen3, \n                               enemyQueen4, \n                               enemyQueen5, \n                               enemyQueen6, \n                               enemyQueen7, \n                               enemyQueen8, \n                               enemyQueen9]\n\n                moveQueen(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^ok/.test(enginePieceToMove)) {\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                moveKing(engineWhereToMove, enginePieceToMove)\n                \n                kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n            }\n        }\n    })\n\n    const recordBoard = () => {\n        filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n        filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n        justEnemyRender = Object.fromEntries(filteredEnemyRender)\n        justEnemyLive = Object.fromEntries(filteredEnemyLive)\n\n        filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n        filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))        \n        justPlayerRender = Object.fromEntries(filteredPlayerRender)\n        justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n        filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n        filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n        justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n        justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n        enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n        playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n        occupiedSquaresRender = Object.values(justOccupiedRender).map(a => a = a[0])\n\n        enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n        playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n        occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n        kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n\n        attacked(playerRooks, \n                 playerKnights,\n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 protectedByPlayerArr, \n                 true)\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 protectedByOpponentArr, \n                 true)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarArr, true)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarArr, true)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarXrayArr, false)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarXrayArr, false)\n\n        horseSafety(playerKing, playerSquaresRender, playerHorseSafetyArr)\n        horseSafety(enemyKing, enemySquaresRender, enemyHorseSafetyArr)\n       \n        if (playerKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyRooks.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyBishops.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n        }\n\n        if (enemyKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerRooks.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerBishops.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current =enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n        }\n    }\n\n    const engineTurn = () => {\n        encode()\n\n        let string = `position fen ${stringToSend} moves ${playerPiece.current}${playerNewSquareForEngine.current}`\n\n        if (moves.length === 1) {\n            setTimeout(() => {\n                stockfish.postMessage(\"position startpos\")\n                stockfish.postMessage(\"go movetime 1000\")\n            }, 1000)\n        } else {\n            stockfish.postMessage(string)\n            stockfish.postMessage(\"go movetime 1000\")\n        }\n    }\n\n    const encode = () => {\n        const fenEncode = (arr) => {\n            switch (arr[0]) {\n                case \"or1\": case \"or2\": case \"or3\": case \"or4\": case \"or5\": \n                case \"or6\": case \"or7\": case \"or8\": case \"or9\": case \"or01\": \n                    if (color === \"white\") {\n                        return arr = \"r\"\n                    } else {\n                        return arr = \"R\"\n                    }\n                case \"oh1\": case \"oh2\": case \"oh3\": case \"oh4\": case \"oh5\": \n                case \"oh6\": case \"oh7\": case \"oh8\": case \"oh9\": case \"oh01\": \n                    if (color === \"white\") {\n                        return arr = \"n\"\n                    } else {\n                        return arr = \"N\"\n                    }\n                case \"ob1\": case \"ob2\": case \"ob3\": case \"ob4\": case \"ob5\": \n                case \"ob6\": case \"ob7\": case \"ob8\": case \"ob9\": case \"ob01\": \n                    if (color === \"white\") {\n                        return arr = \"b\"\n                    } else {\n                        return arr = \"B\"\n                    }\n                case \"oqw1\": case \"oqb1\": case \"oqw2\": case \"oqb2\": case \"oqw3\": case \"oqb3\": \n                case \"oqw4\": case \"oqb4\": case \"oqb9\": case \"oqw5\": case \"oqb5\": case \"oqw6\": \n                case \"oqb6\": case \"oqw7\": case \"oqb7\": case \"oqw8\": case \"oqb8\": case \"oqw9\":\n                    if (color === \"white\") {\n                        return arr = \"q\"\n                    } else {\n                        return arr = \"Q\"\n                    }\n                case \"okw\": case \"okb\":\n                    if (color === \"white\") {\n                        return arr = \"k\"\n                    } else {\n                        return arr = \"K\"\n                    }\n                case \"op1\": case \"op2\": case \"op3\": case \"op4\": \n                case \"op5\": case \"op6\": case \"op7\": case \"op8\":\n                    if (color === \"white\") {\n                        return arr = \"p\"\n                    } else {\n                        return arr = \"P\"\n                    }\n                case \"pr1\": case \"pr2\": case \"pr3\": case \"pr4\": case \"pr5\": \n                case \"pr6\": case \"pr7\": case \"pr8\": case \"pr9\": case \"pr01\":\n                    if (color === \"white\") {\n                        return arr = \"R\"\n                    } else {\n                        return arr = \"r\"\n                    }\n                case \"ph1\": case \"ph2\": case \"ph3\": case \"ph4\": case \"ph5\": \n                case \"ph6\": case \"ph7\": case \"ph8\": case \"ph9\": case \"ph01\":\n                    if (color === \"white\") {\n                        return arr = \"N\"\n                    } else {\n                        return arr = \"n\"\n                    }\n                case \"pb1\": case \"pb2\": case \"pb3\": case \"pb4\": case \"pb5\": \n                case \"pb6\": case \"pb7\": case \"pb8\": case \"pb9\": case \"pb01\":\n                    if (color === \"white\") {\n                        return arr = \"B\"\n                    } else {\n                        return arr = \"b\"\n                    }\n                case \"pqw1\": case \"pqb1\": case \"pqw2\": case \"pqb2\": case \"pqw3\": case \"pqb3\": \n                case \"pqw4\": case \"pqb4\": case \"pqb9\": case \"pqw5\": case \"pqb5\": case \"pqw6\": \n                case \"pqb6\": case \"pqw7\": case \"pqb7\": case \"pqw8\": case \"pqb8\": case \"pqw9\":\n                    if (color === \"white\") {\n                        return arr = \"Q\"\n                    } else {\n                        return arr = \"q\"\n                    }\n                case \"pkw\": case \"pkb\":\n                    if (color === \"white\") {\n                        return arr = \"K\"\n                    } else {\n                        return arr = \"k\"\n                    }\n                case \"pp1\": case \"pp2\": case \"pp3\": case \"pp4\": \n                case \"pp5\": case \"pp6\": case \"pp7\": case \"pp8\":\n                    if (color === \"white\") {\n                        return arr = \"P\"\n                    } else {\n                        return arr = \"p\"\n                    }\n                default:\n                    return arr = 1\n            }\n        }\n\n        const fen = boardEntries.map(a => fenEncode(a))\n\n        let fenArrays = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = i * 8; j < i * 8 + 8; j++) {\n                fenArrays[i].push(fen[j])\n            }\n        }\n\n        const customReducer = (arr) => {\n            if (arr.includes(1)) {\n                let temp = 0\n                let reducedArr = 0\n\n                for (let elem of arr) {\n                    if (typeof elem === \"number\") {\n                        temp += elem\n                    } else {\n                        reducedArr += temp\n                        temp = 0\n                        reducedArr += elem\n                    }\n                }\n\n                reducedArr += temp\n\n                if (typeof reducedArr === \"number\") {\n                    return reducedArr\n                } else {\n                    return reducedArr.split(\"\").filter(a => a !== \"0\").join(\"\")\n                }\n            } else {\n                return arr.join(\"\")\n            }\n        }\n\n        fenArrays = fenArrays.map(a => customReducer(a))\n\n        let fenString = fenArrays.join(\"/\")\n\n        fenString += ` ${toMove} `\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"KQ\"\n            } else {\n                fenString += \"kq\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && !castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"Q\"\n            } else {\n                fenString += \"q\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && !castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"K\"\n            } else {\n                fenString += \"k\"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"kq \"\n            } else {\n                fenString += \"KQ \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && !castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"q \"\n            } else {\n                fenString += \"Q \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && !castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"k \"\n            } else {\n                fenString += \"K \"\n            }\n        }\n\n        if (enPassantSquare.current[0]) {\n            fenString += boardEntries.filter(([key, value]) => value[0] === enPassantSquare.current[0]).flat()[1][1]\n        } else {\n            fenString += \"-\"\n        }\n        \n        fenString += ` ${halfMoveCounter} `\n\n        fenString += moveCounter\n\n        stringToSend = fenString\n    }\n\n    const combThroughSubArrayPlus = (index, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(index)) {\n            for (let j = index + 1; j <= Math.max(...subArr); j++) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const combThroughSubArrayMinus = (i, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(i)) {\n            for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const horseSafety = (king, squares, arrResult) => {\n        let arr = []\n\n        recordKnightMoves(king, arr, squares)\n\n        arrResult.current = arr\n    }\n\n    const king8Star = (index, ownSquares, oppSquares, arrRes, boolean) => {\n        let arr = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[0], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[1], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 8; i < 16; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[2], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[3], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        arrRes.current = arr\n    }\n\n    const kingSpiderSense = (king, ownArr, oppArr, arrRes) => {\n        let arr = [[], []]\n\n        checkArrays(whiteBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(blackBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(rookMoves.current, king, arr[1], ownArr, oppArr, true, true)\n\n        arrRes.current = arr\n    }\n\n    const attacked = (rooks, knights, bishops, queens, pawns, oppSquares, ownSquares, arrRes, protect) => {\n        let arr = []\n\n        rooks.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        knights.forEach(a => recordKnightMoves(a, arr, ownSquares))\n\n        bishops.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        bishops.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n\n        queens.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        if (pawns === playerPawns) {\n            pawns.forEach(a => recordPlayerPawnAttacks(a, arr))\n        } else {\n            pawns.forEach(a => recordOpponentPawnAttacks(a, arr))\n        }\n\n        if (protect) {\n            arrRes.current = arr.filter(a => occupiedSquaresRender.includes(a))\n        } else {\n            arrRes.current = arr\n        }\n    }\n\n    const promotePawn = (pawn, pieceToPromoteTo, i) => {\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        store.dispatch({\n            type: \"pawnPromotion\",\n            payload: {pawn, pieceToPromoteTo}\n        })\n\n        if (/^ph/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, playerSquaresLive)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oh/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, enemySquaresRender)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pr/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^or/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pb/.test(pieceToPromoteTo)) {\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^ob/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pq/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oq/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        setPawnPromotes(\"\")\n\n        if (!sandbox) {\n            engineTurn()\n        }\n    }\n\n    const renderPieces = () => {\n        const renderEachPiece = (a, src1, src2, alt1, alt2) => {\n            return (\n                (color === \"white\"\n                    ?\n                    <img src={src1}\n                         key={a}\n                         alt={alt1}\n                         className=\"piece\"\n                         style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                    : \n                    <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                         style={{height: \"80px\"}}\n                         key={a}>\n                        <img src={src2}\n                             alt={alt2}\n                             className=\"piece\"\n                             style={activePiece === `${a}`\n                                ?\n                                {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                                :\n                                {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                        </img>\n                    </div>)\n            )\n        }\n\n        const renderRoyals = (a, src, alt) => {\n            return (\n                <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                     style={{height: \"80px\"}}\n                     key={a}>\n                    <img src={src}\n                        alt={alt}\n                        className={`piece ${((/^ok/.test(a) && enemyKingAttacked && !currentMove) \n                                        || (/^ok/.test(a) && checkArrOpponent.some(a => a === currentMove))) \n                                    || ((/^pk/.test(a) && playerKingAttacked && !currentMove) \n                                        || (/^pk/.test(a) && checkArrPlayer.some(a => a === currentMove))) ? \"kingInCheck\" : null}`}\n                        style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                </div>\n            )\n        }\n\n        const renderPlayerPromotion = (pawn, i) => {\n            return (\n                <div className={`pawnPromotionPlayer ${color === \"black\" && !sandbox ? \"reversePromotion\" : null}`} \n                     style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteQueen : blackQueen} \n                             alt=\"Player Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pq\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteRook : blackRook} \n                             alt=\"Player Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pr\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteBishop : blackBishop} \n                             alt=\"Player Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pb\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteKnight : blackKnight} \n                             alt=\"Player Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ph\", i)}/>\n                    </div>\n                </div>\n            )\n        }\n    \n        const renderOpponentPromotion = (pawn, i) => {\n            return (\n                <div className=\"pawnPromotionOpponent\" style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackKnight : whiteKnight} \n                             alt=\"Opponent Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oh\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackBishop : whiteBishop} \n                             alt=\"Opponent Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ob\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackRook : whiteRook} \n                             alt=\"Opponent Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"or\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackQueen : whiteQueen} \n                             alt=\"Opponent Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oq\", i)}/>\n                    </div>  \n                </div>\n            )\n        }\n\n        const renderEntries = (a, i) => {\n            switch (a) {\n                case \"or1\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or2\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or3\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or4\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or5\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or6\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or7\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or8\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or9\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or01\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"oh1\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh2\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh3\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh4\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh5\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh6\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh7\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh8\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh9\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh01\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"ob1\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob2\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob3\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob4\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob5\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob6\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob7\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob8\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob9\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob01\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"okw\":\n                    return renderRoyals(a, whiteKing, \"White King\") \n                case \"okb\":\n                    return renderRoyals(a, blackKing, \"Black King\") \n                case \"oqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"op1\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op1\", i)}\n                    </div>\n                case \"op2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op2\", i)}\n                    </div>\n                case \"op3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op3\", i)}\n                    </div>\n                case \"op4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op4\", i)}\n                    </div>\n                case \"op5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op5\", i)}\n                    </div>\n                case \"op6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op6\", i)}\n                    </div>\n                case \"op7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op7\", i)}\n                    </div>\n                case \"op8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op8\", i)}\n                    </div>\n                case \"pr1\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr2\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr3\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr4\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr5\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr6\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr7\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr8\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr9\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr01\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"ph1\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph2\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph3\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph4\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph5\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph6\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph7\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph8\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph9\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph01\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"pb1\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb2\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb3\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb4\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb5\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb6\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb7\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb8\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb9\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb01\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pkw\":\n                    return renderRoyals(a, whiteKing, \"White King\")\n                case \"pkb\":\n                    return renderRoyals(a, blackKing, \"Black King\")\n                case \"pqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pp1\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp1\", i)}\n                    </div>\n                case \"pp2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp2\", i)}\n                    </div>\n                case \"pp3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp3\", i)}\n                    </div>\n                case \"pp4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp4\", i)}\n                    </div>\n                case \"pp5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp5\", i)}\n                    </div>\n                case \"pp6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp6\", i)}\n                    </div>\n                case \"pp7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp7\", i)}\n                    </div>\n                case \"pp8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp8\", i)}\n                    </div>\n                default:\n                    return (\n                        <div className=\"piece\" key={i * 100 + \"b\"}></div>\n                    )\n            }\n        }\n\n        return (\n            <div className=\"piecesGrid\">\n                {currentMove === null \n                    ? \n                    boardEntries.map((a, i) => renderEntries(a[0], i))\n                    : \n                    Object.entries(JSON.parse(moves[currentMove])).map((a, i) => renderEntries(a[0], i))}\n            </div>\n        )\n    }\n\n    const renderMovement = () => {\n        let arr = [0, 0, 0, 0, 0, 0, 0, 0]\n\n        return (\n            <div className=\"movementGrid\">\n                <div className=\"pawnPromotionOverlay\" style={pawnPromotes ? {display: \"block\"} : {display: \"none\"}}></div>\n\n                {arr.map((a, i) => <div key={i + 1 * 100} \n                                        onClick={() => onSquareClick(i + 1, boardEntries[i][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 1 : \"\"}\n                                            {moveSquares.includes(i + 1) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n                                    \n                {arr.map((a, i) => <div key={i + 9 * 100}\n                                        onClick={() => onSquareClick(i + 9, boardEntries[i + 8][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 9 : \"\"}\n                                            {moveSquares.includes(i + 9) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 17 * 100} \n                                        onClick={() => onSquareClick(i + 17, boardEntries[i + 16][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 17 : \"\"}\n                                            {moveSquares.includes(i + 17) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 25 * 100}\n                                        onClick={() => onSquareClick(i + 25, boardEntries[i + 24][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 25 : \"\"}\n                                            {moveSquares.includes(i + 25) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 33 * 100} \n                                        onClick={() => onSquareClick(i + 33, boardEntries[i + 32][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 33 : \"\"}\n                                            {moveSquares.includes(i + 33) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 41 * 100}\n                                        onClick={() => onSquareClick(i + 41, boardEntries[i + 40][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 41 : \"\"}\n                                            {moveSquares.includes(i + 41) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 49 * 100}\n                                        onClick={() => onSquareClick(i + 49, boardEntries[i + 48][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 49 : \"\"}\n                                            {moveSquares.includes(i + 49) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 57 * 100} \n                                        onClick={() => onSquareClick(i + 57, boardEntries[i + 56][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 57 : \"\"}\n                                            {moveSquares.includes(i + 57) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n            </div>\n        )\n    }\n\n    const checkArrays = (arrayChecked, i, arr, ownArr, oppArr, exclude1, exclude2) => {\n        let arr2 = []\n\n        if (i) {\n            if (i !== playerKing && i !== enemyKing) {\n                if (playerSquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n    \n                if (enemySquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n            }\n    \n            for (const subArr of arrayChecked) {\n                if (subArr.includes(i)) {\n                    for (let j = i + 1; j <= Math.max(...subArr); j++) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing\n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j) \n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n    \n                    for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing \n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j)\n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const recordKnightMoves = (i, arrMoves, excArr) => {  \n        let arr = []\n        let arr2 = []\n\n        if (playerSquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (enemySquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (i) {\n            if (knightLimits.current[0].includes(i)) {\n                arr = [i - 15, i - 6, i + 10, i + 17]\n            } else if (knightLimits.current[1].includes(i)) {\n                arr = [i - 17, i - 15, i - 6, i + 10, i + 15, i + 17]\n            } else if (knightLimits.current[2].includes(i)) {\n                arr = [i - 17, i - 15, i - 10, i + 6, i + 15, i + 17]\n            } else if (knightLimits.current[3].includes(i)) {\n                arr = [i - 17, i - 10, i + 6, i + 15]\n            } else {\n                arr = [i - 17, i - 15, i - 10, i - 6, i + 6, i + 10, i + 15, i + 17]\n            }\n\n            for (const number of arr) {\n                if (excArr.includes(number)) {\n                    arr = arr.filter(a => a !== number)\n                }\n\n                if (arr2.length > 0) {\n                    arr = arr.filter(a => arr2.includes(a))\n                }\n            }\n\n            if (playerKingAttacked \n                && playerSquaresRender.includes(i) \n                && i !== playerKing \n                && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                arr = arr.filter(a => arrTech.includes(a))\n            } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                arr = arr.filter(a => playerHorseSafetyArr.current.includes(a))\n            }\n\n            if (enemyKingAttacked \n                && enemySquaresRender.includes(i) \n                && i !== enemyKing \n                && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                arr = arr.filter(a => arrTech.includes(a))\n            } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                arr = arr.filter(a => enemyHorseSafetyArr.current.includes(a))\n            }\n\n            for (const number of arr) {\n                arrMoves.push(number)\n            }\n        }\n    }\n\n    const recordPlayerPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n\n        for (let k = 0; k < 4; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        for (let k = 4; k < 8; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (color === \"black\" && !sandbox) {\n            if (pawnsFirstMove[piece]) {\n                arr = [i + 8, i + 16]\n            } else {\n                arr = [i + 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i + 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i + 16)) {\n                arr = [i + 8]\n            }\n    \n            if ((enemySquaresRender.includes(i + 9) \n                || (rookMoves.current[4].includes(i) \n                && i + 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i + 9)\n            }\n\n            if ((enemySquaresRender.includes(i + 7) \n                || (rookMoves.current[4].includes(i) \n                && i + 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i + 7)\n            }\n        } else {\n            if (pawnsFirstMove[piece]) {\n                arr = [i - 8, i - 16]\n            } else {\n                arr = [i - 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i - 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i - 16)) {\n                arr = [i - 8]\n            }\n    \n            if ((enemySquaresRender.includes(i - 9) \n                || (rookMoves.current[3].includes(i) \n                && i - 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i - 9)\n            }\n    \n            if ((enemySquaresRender.includes(i - 7) \n                || (rookMoves.current[3].includes(i) \n                && i - 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i - 7)\n            }\n        }\n\n        if (arr2.filter(a => playerSquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n            \n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            arr = arr.filter(a => playerHorseSafetyArr.current.includes(a))\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n        \n        for (let k = 0; k < 4; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n        for (let k = 4; k < 8; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (pawnsFirstMove[piece]) {\n            arr = [i + 8, i + 16]\n        } else {\n            arr = [i + 8]\n        }\n\n        if (occupiedSquaresRender.includes(i + 8)) {\n            arr = []\n        } else if (occupiedSquaresRender.includes(i + 16)) {\n            arr = [i + 8]\n        }\n\n        if ((playerSquaresRender.includes(i + 7) \n            || (rookMoves.current[4].includes(i) \n            && i + 7 === enPassantSquare.current[0])) \n            && !knightLimits.current[0].includes(i)) {\n            arr.push(i + 7)\n        }\n\n        if ((playerSquaresRender.includes(i + 9) \n            || (rookMoves.current[4].includes(i) \n            && i + 9 === enPassantSquare.current[0])) \n            && !knightLimits.current[3].includes(i)) {\n            arr.push(i + 9)\n        }\n\n        if (arr2.filter(a => enemySquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            arr = arr.filter(a => enemyHorseSafetyArr.current.includes(a))\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n        \n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingMoves = (i, arrMoves) => {\n        let arr = []\n        let arr2 = []\n\n        recordEnemyKingAttacks(enemyKing, arr2)\n\n        if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2 && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n   \n        for (const number of arr) {\n            if (playerSquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(60) && i === 61) || playerKingAttacked) {\n                    arr = arr.filter(x => x !== 59)\n                }\n\n                if ((!arr.includes(62) && i === 61) || playerKingAttacked) {\n                    arr = arr.filter(x => x !== 63)\n                }\n\n                arr = arr.filter(a => !attackedByOpponentArr.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !attackedByOpponentArr.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingMoves = (i, arrMoves) => {\n        let arr = []              \n        let arr2 = []\n\n        recordPlayerKingAttacks(playerKing, arr2)\n\n        if (castlingEnemyMoved.ok && castlingEnemyMoved.or2 && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            if (enemySquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(4) && i === 5) || enemyKingAttacked) {\n                    arr = arr.filter(x => x !== 3)\n                }\n\n                if ((!arr.includes(6) && i === 5) || enemyKingAttacked) {\n                    arr = arr.filter(x => x !== 7)\n                }\n\n                arr = arr.filter(a => !attackedByPlayerArr.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !attackedByPlayerArr.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingAttacks = (i, arrMoves) => {\n        let arr = []              \n        \n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const onSquareClick = (i, piece) => {     \n        if (((!moveSquares.includes(i) && moveSquares.length > 0) || activePiece === piece) \n            && \n            (\n             (\n              (\n               (color === \"white\" && toMove === \"b\") \n                || \n               (color === \"black\" && toMove === \"w\")\n              ) \n                && !playerSquaresRender.includes(i)\n             ) \n            || \n             (\n              (\n               (color === \"white\" && toMove === \"w\") \n                || \n               (color === \"black\" && toMove === \"b\")\n              ) \n                && !enemySquaresRender.includes(i)\n             )\n            )){\n            store.dispatch({\n                type:\"moveSquares\",\n                payload: []\n            })\n\n            store.dispatch({\n                type: \"activePiece\",\n                payload: \"\"\n            })\n            \n            store.dispatch({\n                type: \"pieceSquare\",\n                payload: null\n            })\n        }\n\n        if (occupiedSquaresRender.includes(i) \n            && activePiece !== piece \n            && !currentMove \n            && !gameEnd) {\n            if (((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"b\")) \n                && playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n\n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                if (/^ph/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, playerSquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pp/.test(piece)) {\n                    let arr = []\n\n                    recordPlayerPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pr/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pb/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pq/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pk/.test(piece)) {\n                    attacked(enemyRooks, \n                             enemyKnights, \n                             enemyBishops, \n                             enemyQueens, \n                             enemyPawns, \n                             enemySquaresRender, \n                             playerSquaresRender, \n                             attackedByOpponentArr, \n                             false)\n\n                    let arr = []\n\n                    recordPlayerKingMoves(i, arr)\n                    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            } else if (((color === \"white\" && toMove === \"b\") || (color === \"black\" && toMove === \"w\")) \n                        && sandbox \n                        && enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n    \n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                if (/^oh/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, enemySquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^op/.test(piece)) {\n                    let arr = []\n\n                    recordOpponentPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^or/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ob/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^oq/.test(piece)) {\n                    let arr = []\n    \n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ok/.test(piece)) {\n                    attacked(playerRooks, \n                             playerKnights, \n                             playerBishops, \n                             playerQueens, \n                             playerPawns, \n                             playerSquaresRender, \n                             enemySquaresRender, \n                             attackedByPlayerArr, \n                             false) \n\n                    let arr = []\n\n                    recordEnemyKingMoves(i, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            }\n\n        }\n\n        if (/^ph/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByPlayerArr.current, playerSquaresLive)\n\n            switch (activePiece) {\n                case \"ph1\":\n                    playerKnight1 = i\n                    break\n                case \"ph2\":\n                    playerKnight2 = i\n                    break\n                case \"ph3\":\n                    playerKnight3 = i\n                    break\n                case \"ph4\":\n                    playerKnight4 = i\n                    break\n                case \"ph5\":\n                    playerKnight5 = i\n                    break\n                case \"ph6\":\n                    playerKnight6 = i\n                    break\n                case \"ph7\":\n                    playerKnight7 = i\n                    break\n                case \"ph8\":\n                    playerKnight8 = i\n                    break\n                case \"ph9\":\n                    playerKnight9 = i\n                    break\n                case \"ph01\":\n                    playerKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerKnights = [playerKnight1, \n                             playerKnight2, \n                             playerKnight3, \n                             playerKnight4, \n                             playerKnight5, \n                             playerKnight6, \n                             playerKnight7, \n                             playerKnight8, \n                             playerKnight9, \n                             playerKnight01]\n\n            moveKnight(i, activePiece)\n        } \n\n        if (/^pp/.test(activePiece) && moveSquares.includes(i)) {\n            recordPlayerPawnMoves(i, activePiece, checkedByPlayerArr.current)\n\n            switch (activePiece) {\n                case \"pp1\":\n                    playerPawn1 = i\n                    break\n                case \"pp2\":\n                    playerPawn2 = i\n                    break\n                case \"pp3\":\n                    playerPawn3 = i\n                    break\n                case \"pp4\":\n                    playerPawn4 = i\n                    break\n                case \"pp5\":\n                    playerPawn5 = i\n                    break\n                case \"pp6\":\n                    playerPawn6 = i\n                    break\n                case \"pp7\":\n                    playerPawn7 = i\n                    break;\n                case \"pp8\":\n                    playerPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerPawns = [playerPawn1, \n                           playerPawn2, \n                           playerPawn3, \n                           playerPawn4, \n                           playerPawn5, \n                           playerPawn6, \n                           playerPawn7, \n                           playerPawn8]\n           \n            movePawn(i, activePiece)\n        } \n\n        if (/^pb/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pb1\":\n                    playerBishop1 = i\n                    break\n                case \"pb2\":\n                    playerBishop2 = i\n                    break\n                case \"pb3\":\n                    playerBishop3 = i\n                    break\n                case \"pb4\":\n                    playerBishop4 = i\n                    break\n                case \"pb5\":\n                    playerBishop5 = i\n                    break\n                case \"pb6\":\n                    playerBishop6 = i\n                    break\n                case \"pb7\":\n                    playerBishop7 = i\n                    break\n                case \"pb8\":\n                    playerBishop8 = i\n                    break\n                case \"pb9\":\n                    playerBishop9 = i\n                    break\n                case \"pb01\":\n                    playerBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerBishops = [playerBishop1, \n                             playerBishop2, \n                             playerBishop3, \n                             playerBishop4, \n                             playerBishop5, \n                             playerBishop6, \n                             playerBishop7, \n                             playerBishop8, \n                             playerBishop9, \n                             playerBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^pr/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pr1\":\n                    playerRook1 = i\n                    break\n                case \"pr2\":\n                    playerRook2 = i\n                    break\n                case \"pr3\":\n                    playerRook3 = i\n                    break\n                case \"pr4\":\n                    playerRook4 = i\n                    break\n                case \"pr5\":\n                    playerRook5 = i\n                    break\n                case \"pr6\":\n                    playerRook6 = i\n                    break\n                case \"pr7\":\n                    playerRook7 = i\n                    break\n                case \"pr8\":\n                    playerRook8 = i\n                    break\n                case \"pr9\":\n                    playerRook9 = i\n                    break\n                case \"pr01\":\n                    playerRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerRooks = [playerRook1, \n                           playerRook2, \n                           playerRook3, \n                           playerRook4, \n                           playerRook5, \n                           playerRook6, \n                           playerRook7, \n                           playerRook8, \n                           playerRook9, \n                           playerRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^pq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"pqw1\": case \"pqb1\":\n                    playerQueen1 = i\n                    break\n                case \"pqw2\": case \"pqb2\":\n                    playerQueen2 = i\n                    break\n                case \"pqw3\": case \"pqb3\":\n                    playerQueen3 = i\n                    break\n                case \"pqw4\": case \"pqb4\":\n                    playerQueen4 = i\n                    break\n                case \"pqw5\": case \"pqb5\":\n                    playerQueen5 = i\n                    break\n                case \"pqw6\": case \"pqb6\":\n                    playerQueen6 = i\n                    break\n                case \"pqw7\": case \"pqb7\":\n                    playerQueen7 = i\n                    break\n                case \"pqw8\": case \"pqb8\":\n                    playerQueen8 = i\n                    break\n                case \"pqw9\": case \"pqb9\":\n                    playerQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerQueens = [playerQueen1, \n                            playerQueen2, \n                            playerQueen3, \n                            playerQueen4, \n                            playerQueen5, \n                            playerQueen6, \n                            playerQueen7, \n                            playerQueen8, \n                            playerQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^pk/.test(activePiece) \n            && moveSquares.includes(i) \n            && !attackedByOpponentArr.current.includes(i)) {\n            playerKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        } \n                \n        if (/^oh/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByOpponentArr.current, enemySquaresLive)\n            \n            switch (activePiece) {\n                case \"oh1\":\n                    enemyKnight1 = i\n                    break\n                case \"oh2\":\n                    enemyKnight2 = i\n                    break\n                case \"oh3\":\n                    enemyKnight3 = i\n                    break\n                case \"oh4\":\n                    enemyKnight4 = i\n                    break\n                case \"oh5\":\n                    enemyKnight5 = i\n                    break\n                case \"oh6\":\n                    enemyKnight6 = i\n                    break\n                case \"oh7\":\n                    enemyKnight7 = i\n                    break\n                case \"oh8\":\n                    enemyKnight8 = i\n                    break\n                case \"oh9\":\n                    enemyKnight9 = i\n                    break\n                case \"oh01\":\n                    enemyKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyKnights = [enemyKnight1, \n                            enemyKnight2, \n                            enemyKnight3, \n                            enemyKnight4, \n                            enemyKnight5, \n                            enemyKnight6, \n                            enemyKnight7, \n                            enemyKnight8, \n                            enemyKnight9, \n                            enemyKnight01]\n            \n            moveKnight(i, activePiece)\n        } \n        \n        if (/^op/.test(activePiece) && moveSquares.includes(i)) {\n            recordOpponentPawnMoves(i, activePiece, checkedByOpponentArr.current)\n\n            switch (activePiece) {\n                case \"op1\":\n                    enemyPawn1 = i\n                    break\n                case \"op2\":\n                    enemyPawn2 = i\n                    break\n                case \"op3\":\n                    enemyPawn3 = i\n                    break\n                case \"op4\":\n                    enemyPawn4 = i\n                    break\n                case \"op5\":\n                    enemyPawn5 = i\n                    break\n                case \"op6\":\n                    enemyPawn6 = i\n                    break\n                case \"op7\":\n                    enemyPawn7 = i\n                    break\n                case \"op8\":\n                    enemyPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyPawns = [enemyPawn1, \n                          enemyPawn2, \n                          enemyPawn3, \n                          enemyPawn4, \n                          enemyPawn5, \n                          enemyPawn6, \n                          enemyPawn7, \n                          enemyPawn8]\n\n            movePawn(i, activePiece)\n        } \n\n        if (/^ob/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"ob1\":\n                    enemyBishop1 = i\n                    break\n                case \"ob2\":\n                    enemyBishop2 = i\n                    break\n                case \"ob3\":\n                    enemyBishop3 = i\n                    break\n                case \"ob4\":\n                    enemyBishop4 = i\n                    break\n                case \"ob5\":\n                    enemyBishop5 = i\n                    break\n                case \"ob6\":\n                    enemyBishop6 = i\n                    break\n                case \"ob7\":\n                    enemyBishop7 = i\n                    break\n                case \"ob8\":\n                    enemyBishop8 = i\n                    break\n                case \"ob9\":\n                    enemyBishop9 = i\n                    break\n                case \"ob01\":\n                    enemyBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyBishops = [enemyBishop1, \n                            enemyBishop2, \n                            enemyBishop3, \n                            enemyBishop4, \n                            enemyBishop5, \n                            enemyBishop6, \n                            enemyBishop7, \n                            enemyBishop8, \n                            enemyBishop9, \n                            enemyBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^or/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"or1\":\n                    enemyRook1 = i\n                    break\n                case \"or2\":\n                    enemyRook2 = i\n                    break\n                case \"or3\":\n                    enemyRook3 = i\n                    break\n                case \"or4\":\n                    enemyRook4 = i\n                    break\n                case \"or5\":\n                    enemyRook5 = i\n                    break\n                case \"or6\":\n                    enemyRook6 = i\n                    break\n                case \"or7\":\n                    enemyRook7 = i\n                    break\n                case \"or8\":\n                    enemyRook8 = i\n                    break\n                case \"or9\":\n                    enemyRook9 = i\n                    break\n                case \"or01\":\n                    enemyRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyRooks = [enemyRook1, \n                          enemyRook2, \n                          enemyRook3, \n                          enemyRook4, \n                          enemyRook5, \n                          enemyRook6, \n                          enemyRook7, \n                          enemyRook8, \n                          enemyRook9, \n                          enemyRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^oq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"oqw1\": case \"oqb1\":\n                    enemyQueen1 = i\n                    break\n                case \"oqw2\": case \"oqb2\":\n                    enemyQueen2 = i\n                    break\n                case \"oqw3\": case \"oqb3\":\n                    enemyQueen3 = i\n                    break\n                case \"oqw4\": case \"oqb4\":\n                    enemyQueen4 = i\n                    break\n                case \"oqw5\": case \"oqb5\":\n                    enemyQueen5 = i\n                    break\n                case \"oqw6\": case \"oqb6\":\n                    enemyQueen6 = i\n                    break\n                case \"oqw7\": case \"oqb7\":\n                    enemyQueen7 = i\n                    break\n                case \"oqw8\": case \"oqb8\":\n                    enemyQueen8 = i\n                    break\n                case \"oqw9\": case \"oqb9\":\n                    enemyQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyQueens = [enemyQueen1, \n                           enemyQueen2, \n                           enemyQueen3, \n                           enemyQueen4, \n                           enemyQueen5, \n                           enemyQueen6, \n                           enemyQueen7, \n                           enemyQueen8, \n                           enemyQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^ok/.test(activePiece) \n            && moveSquares.includes(i)\n            && !attackedByPlayerArr.current.includes(i)) {\n            enemyKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n        } \n    }\n\n    const updateStateBoard = (i, string) => {\n        if (/^pp/.test(string) || /^op/.test(string)) {\n            store.dispatch({\n                type: \"pawnMoved\",\n                payload: string\n            })\n        }\n\n        if (/(pr1)|(pr2)/.test(string) || /^pk/.test(string)) {\n            store.dispatch({\n                type: \"castlingPlayerMoved\",\n                payload: string\n            })\n        } \n        \n        if (/(or1)|(or2)/.test(string) || /^ok/.test(string)){\n            store.dispatch({\n                type: \"castlingEnemyMoved\",\n                payload: string\n            })\n        }\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        pieceNewSquare.current = i\n        playerNewSquareForEngine.current = boardEntries.filter(([key, value]) => value[0] === pieceNewSquare.current).flat()[1][1]\n\n        store.dispatch({\n            type: \"highlightMove\",\n            payload: i\n        })\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        } \n\n        recordBoard()\n    }\n\n    const checkGameEnd = () => {\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 attackedByOpponentArr, \n                 false)\n        attacked(playerRooks, \n                 playerKnights, \n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 attackedByPlayerArr, \n                 false)\n\n        let arrPlayerCheckmate = []\n        let arrEnemyCheckmate = []\n        let arrPlayerStalemate = []\n        let arrEnemyStalemate = []\n        \n        recordPlayerKingMoves(playerKing, arrPlayerCheckmate)\n        recordEnemyKingMoves(enemyKing, arrEnemyCheckmate)\n\n        if (\n            (\n                playerKingAttacked \n                && !attackedByPlayerArr.current.includes(checkingPiece.current) \n                && arrPlayerCheckmate.length === 0 \n                && !playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                            .flat()\n                                                            .some(a => attackedByPlayerArr.current.includes(a))\n            ) \n                ||\n            (\n                enemyKingAttacked \n                && !attackedByOpponentArr.current.includes(checkingPiece.current) \n                && arrEnemyCheckmate.length === 0 \n                && !enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                           .flat()\n                                                           .some(a => attackedByOpponentArr.current.includes(a))\n            )\n            ) {\n            \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (playerKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You've been checkmated.\"\n                })\n            }\n\n            if (enemyKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You checkmated your opponent.\"\n                })\n            }\n        }\n\n        playerRooks.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrPlayerStalemate, \n                                             playerSquaresRender, \n                                             enemySquaresRender, \n                                             true, \n                                             true))\n\n        playerKnights.forEach(a => recordKnightMoves(a, arrPlayerStalemate, playerSquaresRender))\n\n        playerBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerBishops.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(rookMoves.current, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerPawns.forEach(a => recordPlayerPawnMoves(a, null, arrPlayerStalemate))\n\n        recordPlayerKingMoves(playerKing, arrPlayerStalemate)\n\n        enemyRooks.forEach(a => checkArrays(rookMoves.current, \n                                            a, \n                                            arrEnemyStalemate, \n                                            enemySquaresRender, \n                                            playerSquaresRender, \n                                            true, \n                                            true))\n\n        enemyKnights.forEach(a => recordKnightMoves(a, arrEnemyStalemate, enemySquaresRender))\n\n        enemyBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyBishops.forEach(a => checkArrays(blackBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender,\n                                              playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(blackBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyPawns.forEach(a => recordOpponentPawnMoves(a, null, arrEnemyStalemate))\n\n        recordEnemyKingMoves(enemyKing, arrEnemyStalemate)\n\n        arrPlayerStalemate = arrPlayerStalemate.filter(a => a > 0 && a < 65)\n        arrEnemyStalemate = arrEnemyStalemate.filter(a => a > 0 && a < 65)\n\n        if ((arrPlayerStalemate.length === 0 && !playerKingAttacked) \n            || (arrEnemyStalemate.length === 0 && !enemyKingAttacked) \n            || occupiedSquaresRender.length === 2 \n            || halfMoveCounter === 50) {\n \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (halfMoveCounter === 50) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Draw due to 50 move rule.\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Game ended due to stalemate.\"\n                })\n            }\n        }\n\n        for (let i = 0; i < moves.length; i++) {\n            if (JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 4]) && \n                JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 8])) {\n                    if (sounds) {\n                        gameEndSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"gameEnd\"\n                    })\n\n                    store.dispatch({\n                        type: \"modalOpen\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"endMessage\",\n                        payload: \"Draw due to threefold repetition.\"\n                    })\n            }\n        }\n    }\n    \n    const animatePiece = (i, string, num1, num2) => {   \n        if (moves.length === 1 && sounds) {\n            gameEndSound.play()\n        } \n\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1 * -1, num2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1, num2]\n            })\n        }\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)){\n                if (playerPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (playerKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (playerBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (playerRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (playerQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n                \n                if (enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (enemyKing8StarArr.current.flat().includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n                    \n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n                \n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n                \n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n\n            if ((color === \"black\" && toMove === \"w\") || (color === \"white\" && toMove === \"b\")) {\n                store.dispatch({\n                    type: \"moveCounter\"\n                })\n            }\n\n            if (/^pp/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            } \n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                    \n                    checkingPiece.current = i\n                } \n\n                if (enemyPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (enemyKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (enemyBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (enemyRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (enemyQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n\n                if (checkedByOpponentArr.current.includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (playerKing8StarArr.current.flat().includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n\n            if (/^op/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n\n        checkedByOpponentArr.current = []\n        checkedByPlayerArr.current = []\n    }  \n\n    const moveKnight = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case -17:\n                animatePiece(i, string, -80, -160)\n                break\n            case -15:\n                animatePiece(i, string, 80, -160)\n                break\n            case -10:\n                animatePiece(i, string, -160, -80)\n                break\n            case -6:\n                animatePiece(i, string, 160, -80)\n                break\n            case 6:\n                animatePiece(i, string, -160, 80)\n                break\n            case 10:\n                animatePiece(i, string, 160, 80)\n                break\n            case 15:\n                animatePiece(i, string, -80, 160)\n                break\n            case 17:\n                animatePiece(i, string, 80, 160)\n                break\n            default:\n                break\n        }   \n    }\n\n    const movePawn = (i, string) => {\n        if (i === enPassantSquare.current[0]) {\n            switch (pieceSquareForEngine.current - i) {\n                case -9:\n                    animateEnPassant(-80, -80, string, i)\n                    break\n                case -7:\n                    animateEnPassant(80, -80, string, i)\n                    break\n                case 7:\n                    animateEnPassant(-80, 80, string, i)\n                    break\n                case 9:\n                    animateEnPassant(80, 80, string, i)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                case 8:\n                    animatePiece(i, string, 0, 80)\n                    break\n                case 9:\n                    animatePiece(i, string, 80, 80)\n                    break\n                case 16:\n                    enPassantSquare.current = [i + 8, string]\n                    animatePiece(i, string, 0, 160)\n                    break\n                case -16: \n                    enPassantSquare.current = [i - 8, string]\n                    animatePiece(i, string, 0, -160)\n                    break\n                case -8: \n                    animatePiece(i, string, 0, -80)\n                    break\n                case -7: \n                    animatePiece(i, string, 80, -80)\n                    break\n                case -9: \n                    animatePiece(i, string, -80, -80)\n                    break\n                default:\n                    break\n            }\n        }\n    }\n\n    const moveBishop = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveRook = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case 7:\n                animatePiece(i, string, 560, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            case -7:\n                animatePiece(i, string, -560, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveQueen = (i, string) => {\n        if ((knightLimits.current[0].includes(pieceSquare) || knightLimits.current[3].includes(pieceSquare)) \n            && (knightLimits.current[0].includes(i) || knightLimits.current[3].includes(i))) {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, -560, 0)\n                    break\n                case 7:\n                    animatePiece(i, string, 560, 0)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, 80, -80)\n                    break\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                default:\n                    break\n            }\n        }\n        switch (pieceSquareForEngine.current - i) {                                                   \n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const animateCastling = (coor1, coor2, rookOldSq, newSqRook, rookToMove) => {\n        if (sounds) {\n           castlingSound.play()\n        }\n        \n        if (color === \"black\" && sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n            \n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook - 1\n            }\n        } else if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n\n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq + 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook + 56\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq - 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 56\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 56\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 56\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook + 56\n            }\n            \n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook + 56\n            }\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n\n            store.dispatch({\n                type: \"oldSquare\",\n                payload: rookOldSq\n            })\n    \n            store.dispatch({\n                type: \"newSquare\",\n                payload: newSqRook\n            })\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook\n            }\n        }\n\n        store.dispatch({\n            type: rookToMove\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n        enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n\n        recordBoard()\n\n        if (/^pr/.test(rookToMove)) {\n            if ((playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pr/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const animateEnPassant = (coor1, coor2, string, i) => {\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n        }\n\n        let capturedPawn = i\n\n        if (/^pp/.test(string)) {\n            capturedPawn += 8\n        } else {\n            capturedPawn -= 8\n        }\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: string,\n            payload: \"takes\"\n        })\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: string\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        recordBoard()\n\n        if (/^pp/.test(string)) {\n            store.dispatch({\n                type: \"notationArr\",\n                payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n            })\n            \n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n\n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                    .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (sounds) {\n            captureSound.play()\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pp/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^op/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const moveKing = (i, string) => {\n        if (/^pk/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case -2:\n                    animateCastling(-160, 0, 64, 62, \"pr2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                case 2:\n                    animateCastling(160, 0, 57, 60, \"pr1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (/^ok/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case 2:\n                    animateCastling(160, 0, 1, 4, \"or2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                case -2:\n                    animateCastling(-160, 0, 8, 6, \"or1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -9:\n                animatePiece(i, string, -80, -80)\n                break\n            default:\n                break\n        }\n    }\n\n    return (\n        <div>\n            {renderPieces()}\n            {renderMovement()}\n        </div>\n    )\n}\n\nexport default Pieces"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","stringToSend","enemyQueen1","enemyQueen2","enemyQueen3","enemyQueen4","enemyQueen5","enemyQueen6","enemyQueen7","enemyQueen8","enemyQueen9","useState","pawnPromotes","setPawnPromotes","activePiece","useSelector","state","board","castlingEnemyMoved","castlingPlayerMoved","enemyKingAttacked","gameEnd","halfMoveCounter","moveCounter","moveSquares","moveVar","pawnsFirstMove","pieceSquare","playerKingAttacked","toMove","checkArrPlayer","checkArrOpponent","sandbox","options","color","numbers","behavior","animations","sounds","moves","progression","currentMove","boardEntries","Object","entries","filteredEnemyRender","filter","key","test","filteredEnemyLive","store","justEnemyRender","fromEntries","justEnemyLive","filteredPlayerRender","filteredPlayerLive","justPlayerRender","justPlayerLive","filteredOccupiedRender","filteredOccupiedLive","justOccupiedRender","justOccupiedLive","enemySquaresRender","values","map","a","playerSquaresRender","occupiedSquaresRender","enemySquaresLive","playerSquaresLive","occupiedSquaresLive","enPassantSquare","useRef","pieceSquareForEngine","pieceNewSquare","notInitialRender","checkingPiece","wasmSupported","WebAssembly","validate","Uint8Array","of","stockfish","Worker","playerPiece","playerNewSquareForEngine","animationSpeed","moveSound","Audio","moveSoundFile","captureSound","captureSoundFile","castlingSound","castlingSoundFile","checkSound","checkSoundFile","gameEndSound","gameEndSoundFile","knightLimits","whiteBishopMoves","blackBishopMoves","rookMoves","enemyBishop1","ob1","enemyBishop2","ob2","enemyBishop3","ob3","enemyBishop4","ob4","enemyBishop5","ob5","enemyBishop6","ob6","enemyBishop7","ob7","enemyBishop8","ob8","enemyBishop9","ob9","enemyBishop01","ob01","enemyKnight1","oh1","enemyKnight2","oh2","enemyKnight3","oh3","enemyKnight4","oh4","enemyKnight5","oh5","enemyKnight6","oh6","enemyKnight7","oh7","enemyKnight8","oh8","enemyKnight9","oh9","enemyKnight01","oh01","enemyRook1","or1","enemyRook2","or2","enemyRook3","or3","enemyRook4","or4","enemyRook5","or5","enemyRook6","or6","enemyRook7","or7","enemyRook8","or8","enemyRook9","or9","enemyRook01","or01","oqb1","oqw1","oqb2","oqw2","oqb3","oqw3","oqb4","oqw4","oqb5","oqw5","oqb6","oqw6","oqb7","oqw7","oqb8","oqw8","oqb9","oqw9","playerQueen1","playerQueen2","playerQueen3","playerQueen4","playerQueen5","playerQueen6","playerQueen7","playerQueen8","playerQueen9","enemyKing","okw","okb","enemyPawn1","op1","enemyPawn2","op2","enemyPawn3","op3","enemyPawn4","op4","enemyPawn5","op5","enemyPawn6","op6","enemyPawn7","op7","enemyPawn8","op8","playerBishop1","pb1","playerBishop2","pb2","playerBishop3","pb3","playerBishop4","pb4","playerBishop5","pb5","playerBishop6","pb6","playerBishop7","pb7","playerBishop8","pb8","playerBishop9","pb9","playerBishop01","pb01","playerKnight1","ph1","playerKnight2","ph2","playerKnight3","ph3","playerKnight4","ph4","playerKnight5","ph5","playerKnight6","ph6","playerKnight7","ph7","playerKnight8","ph8","playerKnight9","ph9","playerKnight01","ph01","playerRook1","pr1","playerRook2","pr2","playerRook3","pr3","playerRook4","pr4","playerRook5","pr5","playerRook6","pr6","playerRook7","pr7","playerRook8","pr8","playerRook9","pr9","playerRook01","pr01","pqw1","pqb1","pqw2","pqb2","pqw3","pqb3","pqw4","pqb4","pqw5","pqb5","pqw6","pqb6","pqw7","pqb7","pqw8","pqb8","pqw9","pqb9","playerKing","pkw","pkb","playerPawn1","pp1","playerPawn2","pp2","playerPawn3","pp3","playerPawn4","pp4","playerPawn5","pp5","playerPawn6","pp6","playerPawn7","pp7","playerPawn8","pp8","checkedByPlayerArr","attackedByPlayerArr","attackedByOpponentArr","checkedByOpponentArr","playerHorseSafetyArr","enemyHorseSafetyArr","playerKing8StarArr","enemyKing8StarArr","protectedByPlayerArr","protectedByOpponentArr","playerKing8StarXrayArr","enemyKing8StarXrayArr","playerKingSpiderSenseArr","enemyKingSpiderSenseArr","playerRooks","playerKnights","playerBishops","playerQueens","playerPawns","enemyRooks","enemyKnights","enemyBishops","enemyQueens","enemyPawns","useEffect","recordBoard","type","payload","JSON","stringify","postMessage","checkGameEnd","current","movePiece","setTimeout","resetPiece","clearTimeout","engineTurn","useMemo","push","addEventListener","data","console","log","engineOldSquare","slice","engineNewSquare","enginePieceToMove","flat","enginePieceSquare","engineWhereToMove","recordOpponentPawnAttacks","split","promotePawn","updateStateBoard","movePawn","checkArrays","moveBishop","recordKnightMoves","moveKnight","moveRook","moveQueen","moveKing","kingSpiderSense","attacked","king8Star","horseSafety","some","includes","encode","string","fen","arr","fenEncode","fenArrays","j","fenString","temp","reducedArr","elem","join","customReducer","pk","ok","combThroughSubArrayPlus","index","subArr","arrResult","ownArr","oppArr","exclude","Math","max","combThroughSubArrayMinus","min","king","squares","ownSquares","oppSquares","arrRes","boolean","rooks","knights","bishops","queens","pawns","protect","forEach","recordPlayerPawnAttacks","pawn","pieceToPromoteTo","play","arrayChecked","exclude1","exclude2","arr2","k","arrMoves","excArr","number","arrTech","recordPlayerPawnMoves","piece","recordOpponentPawnMoves","recordPlayerKingMoves","recordEnemyKingAttacks","x","recordEnemyKingMoves","recordPlayerKingAttacks","onSquareClick","oldSquare","arrPlayerCheckmate","arrEnemyCheckmate","arrPlayerStalemate","arrEnemyStalemate","animatePiece","num1","num2","every","animateEnPassant","animateCastling","coor1","coor2","rookOldSq","newSqRook","rookToMove","capturedPawn","renderEachPiece","src1","src2","alt1","alt2","src","alt","className","style","transform","transition","height","renderRoyals","renderPlayerPromotion","display","whiteQueen","blackQueen","onClick","whiteRook","blackRook","whiteBishop","blackBishop","whiteKnight","blackKnight","renderOpponentPromotion","renderEntries","whiteKing","blackKing","blackPawn","whitePawn","parse","renderPieces","renderMovement"],"sourceRoot":""}