{"version":3,"file":"static/js/504.efd3c212.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/pieces/Pieces.jsx"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","/* eslint-disable array-callback-return */\n/* eslint-disable no-loop-func */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport whiteKing from \"../../images/whiteKing.png\"\nimport blackKing from \"../../images/blackKing.png\"\nimport whiteQueen from \"../../images/whiteQueen.png\"\nimport blackQueen from \"../../images/blackQueen.png\"\nimport whiteRook from \"../../images/whiteRook.png\"\nimport blackRook from \"../../images/blackRook.png\"\nimport whiteKnight from \"../../images/whiteKnight.png\"\nimport blackKnight from \"../../images/blackKnight.png\"\nimport whiteBishop from \"../../images/whiteBishop.png\"\nimport blackBishop from \"../../images/blackBishop.png\"\nimport whitePawn from \"../../images/whitePawn.png\"\nimport blackPawn from \"../../images/blackPawn.png\"\n\nimport moveSoundFile from \"../../sounds/move.ogg\"\nimport captureSoundFile from \"../../sounds/capture.ogg\"\nimport checkSoundFile from \"../../sounds/check.ogg\"\nimport castlingSoundFile from \"../../sounds/castling.ogg\"\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\n\nimport { useSelector } from \"react-redux\"\nimport { useState, useEffect, useRef, useMemo } from \"react\"\n\nimport store from \"../redux/store\"\n\nimport \"./pieces.sass\"\n\nconst Pieces = () => {\n    const [pawnPromotes, setPawnPromotes] = useState(\"\")\n\n    const activePiece = useSelector(state => state.board.activePiece)\n    const board = useSelector(state => state.board.board)\n    const castlingEnemyMoved = useSelector(state => state.board.castlingEnemyMoved)\n    const castlingPlayerMoved = useSelector(state => state.board.castlingPlayerMoved)\n    const enemyKingAttacked = useSelector(state => state.board.enemyKingAttacked)\n    const gameEnd = useSelector(state => state.board.gameEnd)\n    const halfMoveCounter = useSelector(state => state.board.halfMoveCounter)\n    const moveCounter = useSelector(state => state.board.moveCounter)\n    const moveSquares = useSelector(state => state.board.moveSquares)\n    const moveVar = useSelector(state => state.board.moveVar)\n    const pawnsFirstMove = useSelector(state => state.board.pawnsFirstMove)  \n    const pieceSquare = useSelector(state => state.board.pieceSquare)\n    const playerKingAttacked = useSelector(state => state.board.playerKingAttacked)\n    const toMove = useSelector(state => state.board.toMove)\n    const checkArrPlayer = useSelector(state => state.board.checkArrPlayer)\n    const checkArrOpponent = useSelector(state => state.board.checkArrOpponent)\n\n    const sandbox = useSelector(state => state.options.sandbox)\n    const color = useSelector(state => state.options.color)\n    const options = useSelector(state => state.options.options)\n\n    const numbers = useSelector(state => state.behavior.numbers)\n    const animations = useSelector(state => state.behavior.animations)\n    const sounds = useSelector(state => state.behavior.sounds)\n\n    const moves = useSelector(state => state.progression.moves)\n    const currentMove = useSelector(state => state.progression.currentMove)\n\n    const wasmSupported = typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\n    const stockfish = useMemo(() => !sandbox ? new Worker(wasmSupported ? 'stockfish.wasm.js' : 'stockfish.js') : null, []) \n    \n    let boardEntries = Object.entries(board)\n\n    let filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n    let filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n    let justEnemyRender = Object.fromEntries(filteredEnemyRender)\n    let justEnemyLive = Object.fromEntries(filteredEnemyLive)\n    \n    let filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n    let filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))\n    let justPlayerRender = Object.fromEntries(filteredPlayerRender)\n    let justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n    let filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n    let filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n    let justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n    let justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n    let enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n    let playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n    let occupiedSquaresRender =  Object.values(justOccupiedRender).map(a => a = a[0])\n\n    let enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n    let playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n    let occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n    const enPassantSquare = useRef([0, \"\"])\n\n    const pieceSquareForEngine = useRef(1)\n    const pieceNewSquare = useRef(1)\n    const notInitialRender = useRef(false)\n    const checkingPiece = useRef(null)\n\n    const playerPiece = useRef(null)\n    const playerNewSquareForEngine = useRef(null)\n\n    const animationSpeed = useRef()\n\n    const engineData = useRef(\"\")\n\n    const moveSound = new Audio(moveSoundFile)\n    const captureSound = new Audio(captureSoundFile)\n    const castlingSound = new Audio(castlingSoundFile)\n    const checkSound = new Audio(checkSoundFile)\n    const gameEndSound = new Audio(gameEndSoundFile)\n\n    const knightLimits = useRef([[], [], [], []])\n\n    const whiteBishopMoves = [\n        [7, 16],\n        [5, 14, 23, 32],\n        [3, 12, 21, 30, 39, 48],\n        [1, 10, 19, 28, 37, 46, 55, 64],\n        [17, 26, 35, 44, 53, 62],\n        [33, 42, 51, 60],\n        [49, 58],\n        [3, 10, 17],\n        [5, 12, 19, 26, 33],\n        [7, 14, 21, 28, 35, 42, 49],\n        [16, 23, 30, 37, 44, 51, 58],\n        [32, 39, 46, 53, 60],\n        [48, 55, 62]\n    ]\n\n    const blackBishopMoves = [\n        [2, 9],\n        [4, 11, 18, 25],\n        [6, 13, 20, 27, 34, 41],\n        [8, 15, 22, 29, 36, 43, 50, 57],\n        [24, 31, 38, 45, 52, 59],\n        [40, 47, 54, 61],\n        [56, 63],\n        [6, 15, 24],\n        [4, 13, 22, 31, 40],\n        [2, 11, 20, 29, 38, 47, 56],\n        [9, 18, 27, 36, 45, 54, 63],\n        [25, 34, 43, 52, 61],\n        [41, 50, 59]\n    ]\n\n    const rookMoves = useRef([[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []])\n\n    let stringToSend\n\n    let enemyBishop1 = board.ob1 ? board.ob1[0] : null\n    let enemyBishop2 = board.ob2 ? board.ob2[0] : null\n    let enemyBishop3 = board.ob3 ? board.ob3[0] : null\n    let enemyBishop4 = board.ob4 ? board.ob4[0] : null\n    let enemyBishop5 = board.ob5 ? board.ob5[0] : null\n    let enemyBishop6 = board.ob6 ? board.ob6[0] : null\n    let enemyBishop7 = board.ob7 ? board.ob7[0] : null\n    let enemyBishop8 = board.ob8 ? board.ob8[0] : null\n    let enemyBishop9 = board.ob9 ? board.ob9[0] : null\n    let enemyBishop01 = board.ob01 ? board.ob01[0] : null\n\n    let enemyKnight1 = board.oh1 ? board.oh1[0] : null\n    let enemyKnight2 = board.oh2 ? board.oh2[0] : null\n    let enemyKnight3 = board.oh3 ? board.oh3[0] : null\n    let enemyKnight4 = board.oh4 ? board.oh4[0] : null\n    let enemyKnight5 = board.oh5 ? board.oh5[0] : null\n    let enemyKnight6 = board.oh6 ? board.oh6[0] : null\n    let enemyKnight7 = board.oh7 ? board.oh7[0] : null\n    let enemyKnight8 = board.oh8 ? board.oh8[0] : null\n    let enemyKnight9 = board.oh9 ? board.oh9[0] : null\n    let enemyKnight01 = board.oh01 ? board.oh01[0] : null\n\n    let enemyRook1 = board.or1 ? board.or1[0] : null\n    let enemyRook2 = board.or2 ? board.or2[0] : null\n    let enemyRook3 = board.or3 ? board.or3[0] : null\n    let enemyRook4 = board.or4 ? board.or4[0] : null\n    let enemyRook5 = board.or5 ? board.or5[0] : null\n    let enemyRook6 = board.or6 ? board.or6[0] : null\n    let enemyRook7 = board.or7 ? board.or7[0] : null\n    let enemyRook8 = board.or8 ? board.or8[0] : null\n    let enemyRook9 = board.or9 ? board.or9[0] : null\n    let enemyRook01 = board.or01 ? board.or01[0] : null\n\n    let enemyQueen1\n    let enemyQueen2\n    let enemyQueen3\n    let enemyQueen4\n    let enemyQueen5\n    let enemyQueen6\n    let enemyQueen7\n    let enemyQueen8\n    let enemyQueen9\n\n    color === \"white\" ? (enemyQueen1 = board.oqb1 ? board.oqb1[0] : null) \n                      : (enemyQueen1 = board.oqw1 ? board.oqw1[0] : null)\n    \n    color === \"white\" ? (enemyQueen2 = board.oqb2 ? board.oqb2[0] : null) \n                      : (enemyQueen2 = board.oqw2 ? board.oqw2[0] : null)\n    \n    color === \"white\" ? (enemyQueen3 = board.oqb3 ? board.oqb3[0] : null) \n                      : (enemyQueen3 = board.oqw3 ? board.oqw3[0] : null)\n    \n    color === \"white\" ? (enemyQueen4 = board.oqb4 ? board.oqb4[0] : null) \n                      : (enemyQueen4 = board.oqw4 ? board.oqw4[0] : null)\n    \n    color === \"white\" ? (enemyQueen5 = board.oqb5 ? board.oqb5[0] : null) \n                      : (enemyQueen5 = board.oqw5 ? board.oqw5[0] : null)\n    \n    color === \"white\" ? (enemyQueen6 = board.oqb6 ? board.oqb6[0] : null) \n                      : (enemyQueen6 = board.oqw6 ? board.oqw6[0] : null)\n    \n    color === \"white\" ? (enemyQueen7 = board.oqb7 ? board.oqb7[0] : null) \n                      : (enemyQueen7 = board.oqw7 ? board.oqw7[0] : null)\n    \n    color === \"white\" ? (enemyQueen8 = board.oqb8 ? board.oqb8[0] : null) \n                      : (enemyQueen8 = board.oqw8 ? board.oqw8[0] : null)\n    \n    color === \"white\" ? (enemyQueen9 = board.oqb9 ? board.oqb9[0] : null) \n                      : (enemyQueen9 = board.oqw9 ? board.oqw9[0] : null)\n\n    let enemyKing = board.okw ? board.okw[0] : board.okb[0]\n\n    let enemyPawn1 = board.op1 ? board.op1[0] : null\n    let enemyPawn2 = board.op2 ? board.op2[0] : null\n    let enemyPawn3 = board.op3 ? board.op3[0] : null\n    let enemyPawn4 = board.op4 ? board.op4[0] : null\n    let enemyPawn5 = board.op5 ? board.op5[0] : null\n    let enemyPawn6 = board.op6 ? board.op6[0] : null\n    let enemyPawn7 = board.op7 ? board.op7[0] : null\n    let enemyPawn8 = board.op8 ? board.op8[0] : null\n\n    let playerBishop1 = board.pb1 ? board.pb1[0] : null\n    let playerBishop2 = board.pb2 ? board.pb2[0] : null\n    let playerBishop3 = board.pb3 ? board.pb3[0] : null\n    let playerBishop4 = board.pb4 ? board.pb4[0] : null\n    let playerBishop5 = board.pb5 ? board.pb5[0] : null\n    let playerBishop6 = board.pb6 ? board.pb6[0] : null\n    let playerBishop7 = board.pb7 ? board.pb7[0] : null\n    let playerBishop8 = board.pb8 ? board.pb8[0] : null\n    let playerBishop9 = board.pb9 ? board.pb9[0] : null\n    let playerBishop01 = board.pb01 ? board.pb01[0] : null\n\n    let playerKnight1 = board.ph1 ? board.ph1[0] : null\n    let playerKnight2 = board.ph2 ? board.ph2[0] : null\n    let playerKnight3 = board.ph3 ? board.ph3[0] : null\n    let playerKnight4 = board.ph4 ? board.ph4[0] : null\n    let playerKnight5 = board.ph5 ? board.ph5[0] : null\n    let playerKnight6 = board.ph6 ? board.ph6[0] : null\n    let playerKnight7 = board.ph7 ? board.ph7[0] : null\n    let playerKnight8 = board.ph8 ? board.ph8[0] : null\n    let playerKnight9 = board.ph9 ? board.ph9[0] : null\n    let playerKnight01 = board.ph01 ? board.ph01[0] : null\n\n    let playerRook1 = board.pr1 ? board.pr1[0] : null\n    let playerRook2 = board.pr2 ? board.pr2[0] : null\n    let playerRook3 = board.pr3 ? board.pr3[0] : null\n    let playerRook4 = board.pr4 ? board.pr4[0] : null\n    let playerRook5 = board.pr5 ? board.pr5[0] : null\n    let playerRook6 = board.pr6 ? board.pr6[0] : null\n    let playerRook7 = board.pr7 ? board.pr7[0] : null\n    let playerRook8 = board.pr8 ? board.pr8[0] : null\n    let playerRook9 = board.pr9 ? board.pr9[0] : null\n    let playerRook01 = board.pr01 ? board.pr01[0] : null\n\n    let playerQueen1\n    let playerQueen2\n    let playerQueen3\n    let playerQueen4\n    let playerQueen5\n    let playerQueen6\n    let playerQueen7\n    let playerQueen8\n    let playerQueen9\n\n    color === \"white\" ? (playerQueen1 = board.pqw1 ? board.pqw1[0] : null) \n                      : (playerQueen1 = board.pqb1 ? board.pqb1[0] : null)\n    \n    color === \"white\" ? (playerQueen2 = board.pqw2 ? board.pqw2[0] : null) \n                      : (playerQueen2 = board.pqb2 ? board.pqb2[0] : null)\n    \n    color === \"white\" ? (playerQueen3 = board.pqw3 ? board.pqw3[0] : null) \n                      : (playerQueen3 = board.pqb3 ? board.pqb3[0] : null)\n    \n    color === \"white\" ? (playerQueen4 = board.pqw4 ? board.pqw4[0] : null) \n                      : (playerQueen4 = board.pqb4 ? board.pqb4[0] : null)\n    \n    color === \"white\" ? (playerQueen5 = board.pqw5 ? board.pqw5[0] : null) \n                      : (playerQueen5 = board.pqb5 ? board.pqb5[0] : null)\n    \n    color === \"white\" ? (playerQueen6 = board.pqw6 ? board.pqw6[0] : null) \n                      : (playerQueen6 = board.pqb6 ? board.pqb6[0] : null)\n    \n    color === \"white\" ? (playerQueen7 = board.pqw7 ? board.pqw7[0] : null) \n                      : (playerQueen7 = board.pqb7 ? board.pqb7[0] : null)\n    \n    color === \"white\" ? (playerQueen8 = board.pqw8 ? board.pqw8[0] : null) \n                      : (playerQueen8 = board.pqb8 ? board.pqb8[0] : null)\n    \n    color === \"white\" ? (playerQueen9 = board.pqw9 ? board.pqw9[0] : null) \n                      : (playerQueen9 = board.pqb9 ? board.pqb9[0] : null)\n\n    let playerKing = board.pkw ? board.pkw[0] : board.pkb[0]\n\n    let playerPawn1 = board.pp1 ? board.pp1[0] : null\n    let playerPawn2 = board.pp2 ? board.pp2[0] : null\n    let playerPawn3 = board.pp3 ? board.pp3[0] : null\n    let playerPawn4 = board.pp4 ? board.pp4[0] : null\n    let playerPawn5 = board.pp5 ? board.pp5[0] : null\n    let playerPawn6 = board.pp6 ? board.pp6[0] : null\n    let playerPawn7 = board.pp7 ? board.pp7[0] : null\n    let playerPawn8 = board.pp8 ? board.pp8[0] : null\n\n    const checkedByPlayerArr = useRef([])\n    const attackedByPlayerArr = useRef([])\n\n    const attackedByOpponentArr = useRef([])\n    const checkedByOpponentArr = useRef([])\n\n    const playerHorseSafetyArr = useRef([])\n    const enemyHorseSafetyArr = useRef([])\n\n    const playerKing8StarArr = useRef([])\n    const enemyKing8StarArr = useRef([])\n\n    const protectedByPlayerArr = useRef([])\n    const protectedByOpponentArr = useRef([])\n\n    const playerKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n    const enemyKing8StarXrayArr = useRef([[], [], [], [], [], [], [], []])\n\n    const playerKingSpiderSenseArr = useRef([])\n    const enemyKingSpiderSenseArr = useRef([])\n\n    const pawnKingArrPlayer = useRef([])\n    const pawnKingArrOpponent = useRef([])\n\n    let playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n    let playerKnights = [playerKnight1, \n                         playerKnight2, \n                         playerKnight3, \n                         playerKnight4, \n                         playerKnight5, \n                         playerKnight6, \n                         playerKnight7, \n                         playerKnight8, \n                         playerKnight9, \n                         playerKnight01]\n    let playerBishops = [playerBishop1, \n                         playerBishop2, \n                         playerBishop3, \n                         playerBishop4, \n                         playerBishop5, \n                         playerBishop6, \n                         playerBishop7, \n                         playerBishop8, \n                         playerBishop9, \n                         playerBishop01]\n    let playerQueens = [playerQueen1, \n                        playerQueen2, \n                        playerQueen3, \n                        playerQueen4, \n                        playerQueen5, \n                        playerQueen6, \n                        playerQueen7, \n                        playerQueen8, \n                        playerQueen9]\n    let playerPawns = [playerPawn1, \n                       playerPawn2, \n                       playerPawn3, \n                       playerPawn4, \n                       playerPawn5, \n                       playerPawn6, \n                       playerPawn7, \n                       playerPawn8]\n\n    let enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n    let enemyKnights = [enemyKnight1, \n                        enemyKnight2, \n                        enemyKnight3, \n                        enemyKnight4, \n                        enemyKnight5, \n                        enemyKnight6, \n                        enemyKnight7, \n                        enemyKnight8, \n                        enemyKnight9, \n                        enemyKnight01]\n    let enemyBishops = [enemyBishop1, \n                        enemyBishop2, \n                        enemyBishop3, \n                        enemyBishop4, \n                        enemyBishop5, \n                        enemyBishop6, \n                        enemyBishop7, \n                        enemyBishop8, \n                        enemyBishop9, \n                        enemyBishop01]\n    let enemyQueens = [enemyQueen1, \n                       enemyQueen2, \n                       enemyQueen3, \n                       enemyQueen4, \n                       enemyQueen5, \n                       enemyQueen6, \n                       enemyQueen7, \n                       enemyQueen8, \n                       enemyQueen9]\n    let enemyPawns = [enemyPawn1, \n                      enemyPawn2, \n                      enemyPawn3, \n                      enemyPawn4, \n                      enemyPawn5, \n                      enemyPawn6, \n                      enemyPawn7, \n                      enemyPawn8]\n\n    useEffect(() => {\n        recordBoard()\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(board)\n        })\n\n        stockfish.postMessage('uci')\n        stockfish.postMessage('isready')\n        stockfish.postMessage('ucinewgame')\n    }, [])\n\n    useEffect(() => {\n        recordBoard()\n        checkGameEnd()\n    }, [board])\n\n    useEffect(() => {\n        if (notInitialRender.current) {\n            const movePiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"setMoveVar\",\n                    payload: [0, 0]\n                })\n            }, animations === \"none\" ? 0 : 50)\n\n            const resetPiece = setTimeout(() => {\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: \"\"\n                })\n\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: null\n                })\n\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: null\n                })\n            }, 150)\n\n            return () => {\n                clearTimeout(movePiece)\n                clearTimeout(resetPiece)\n            }\n        } else {\n            notInitialRender.current = true\n        }\n    }, [JSON.stringify(board)])\n\n    useEffect(() => {\n        if (((color === \"white\" && toMove === \"b\") \n            || (color === \"black\" && toMove === \"w\")) \n            && !sandbox \n            && !pawnPromotes) {\n            engineTurn()\n        }\n    }, [toMove, options])\n\n    useMemo(() => {\n        if (animations === \"fast\") {\n            animationSpeed.current = .2\n        } else if (animations === \"average\") {\n            animationSpeed.current = .5\n        } else if (animations === \"slow\") {\n            animationSpeed.current = .8\n        } else {\n            animationSpeed.current = 0\n        }\n    }, [animations])\n\n    useMemo(() => {\n        for (let i = 1; i < 64; i += 8) {\n            knightLimits.current[0].push(i)\n            knightLimits.current[1].push(i + 1)\n            knightLimits.current[2].push(i + 6)\n            knightLimits.current[3].push(i + 7)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 9; i++) {\n            rookMoves.current[0].push(i)\n            rookMoves.current[1].push(i + 8)\n            rookMoves.current[2].push(i + 16)\n            rookMoves.current[3].push(i + 24)\n            rookMoves.current[4].push(i + 32)\n            rookMoves.current[5].push(i + 40)\n            rookMoves.current[6].push(i + 48)\n            rookMoves.current[7].push(i + 56)\n        }\n    }, [])\n\n    useMemo(() => {\n        for (let i = 1; i < 65; i += 8) {\n            rookMoves.current[8].push(i)\n            rookMoves.current[9].push(i + 1)\n            rookMoves.current[10].push(i + 2)\n            rookMoves.current[11].push(i + 3)\n            rookMoves.current[12].push(i + 4)\n            rookMoves.current[13].push(i + 5)\n            rookMoves.current[14].push(i + 6)\n            rookMoves.current[15].push(i + 7)\n        }\n    }, [])\n\n    useMemo(() => {\n        try {\n            stockfish.addEventListener('message', function(e) {\n                if (/^bestmove/.test(e.data)) {\n                    engineData.current = e.data\n                } \n            })\n        } catch (error) {\n\n        }\n    }, [])\n\n    const listener = async (data) => {\n            const engineOldSquare = data.slice(9, 11)\n            const engineNewSquare = data.slice(11, 13)\n            const enginePieceToMove = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[0]\n            const enginePieceSquare = boardEntries.filter(([key, value]) => value[1] === engineOldSquare).flat()[1][0]\n            const engineWhereToMove = boardEntries.filter(([key, value]) => value[1] === engineNewSquare).flat()[1][0]\n            \n            store.dispatch({\n                type: \"activePiece\",\n                payload: enginePieceToMove\n            })\n\n            store.dispatch({\n                type: \"oldSquare\",\n                payload: enginePieceSquare\n            })\n\n            pieceSquareForEngine.current = enginePieceSquare    \n\n            if (/^op/.test(enginePieceToMove)) {\n                recordOpponentPawnAttacks(engineWhereToMove, checkedByOpponentArr.current)\n\n                switch (enginePieceToMove) {\n                    case \"op1\":\n                        enemyPawn1 = engineWhereToMove\n                        break\n                    case \"op2\":\n                        enemyPawn2 = engineWhereToMove\n                        break\n                    case \"op3\":\n                        enemyPawn3 = engineWhereToMove\n                        break\n                    case \"op4\":\n                        enemyPawn4 = engineWhereToMove\n                        break\n                    case \"op5\":\n                        enemyPawn5 = engineWhereToMove\n                        break\n                    case \"op6\":\n                        enemyPawn6 = engineWhereToMove\n                        break\n                    case \"op7\":\n                        enemyPawn7 = engineWhereToMove\n                        break\n                    case \"op8\":\n                        enemyPawn8 = engineWhereToMove\n                        break\n                    default:\n                        break\n                }\n\n                enemyPawns = [enemyPawn1, \n                              enemyPawn2, \n                              enemyPawn3, \n                              enemyPawn4, \n                              enemyPawn5, \n                              enemyPawn6, \n                              enemyPawn7, \n                              enemyPawn8]\n\n                if (data.split(\" \")[1].length === 5) {\n                    if (data.split(\" \")[1].slice(4) === \"q\") {\n                        promotePawn(enginePieceToMove, \"oq\", engineWhereToMove)\n                    }\n                    if (data.split(\" \")[1].slice(4) === \"r\") {\n                        promotePawn(enginePieceToMove, \"or\", engineWhereToMove)\n                    }\n                    if (data.split(\" \")[1].slice(4) === \"b\") {\n                        promotePawn(enginePieceToMove, \"ob\", engineWhereToMove)\n                    }\n                    if (data.split(\" \")[1].slice(4) === \"k\") {\n                        promotePawn(enginePieceToMove, \"oh\", engineWhereToMove)\n                    }\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                movePawn(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^ob/.test(enginePieceToMove)) {\n                checkArrays(whiteBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(blackBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                \n                switch (enginePieceToMove) {\n                    case \"ob1\":\n                        enemyBishop1 = engineWhereToMove\n                        break;\n                    case \"ob2\":\n                        enemyBishop2 = engineWhereToMove\n                        break;\n                    case \"ob3\":\n                        enemyBishop3 = engineWhereToMove\n                        break;\n                    case \"ob4\":\n                        enemyBishop4 = engineWhereToMove\n                        break;\n                    case \"ob5\":\n                        enemyBishop5 = engineWhereToMove\n                        break;\n                    case \"ob6\":\n                        enemyBishop6 = engineWhereToMove\n                        break;\n                    case \"ob7\":\n                        enemyBishop7 = engineWhereToMove\n                        break;\n                    case \"ob8\":\n                        enemyBishop8 = engineWhereToMove\n                        break;\n                    case \"ob9\":\n                        enemyBishop9 = engineWhereToMove\n                        break;\n                    case \"ob01\":\n                        enemyBishop01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyBishops = [enemyBishop1, \n                                enemyBishop2, \n                                enemyBishop3, \n                                enemyBishop4, \n                                enemyBishop5, \n                                enemyBishop6, \n                                enemyBishop7, \n                                enemyBishop8, \n                                enemyBishop9, \n                                enemyBishop01]\n\n                moveBishop(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^oh/.test(enginePieceToMove)) {\n                recordKnightMoves(engineWhereToMove, checkedByOpponentArr.current, enemySquaresLive)\n\n                switch (enginePieceToMove) {\n                    case \"oh1\":\n                        enemyKnight1 = engineWhereToMove\n                        break;\n                    case \"oh2\":\n                        enemyKnight2 = engineWhereToMove\n                        break;\n                    case \"oh3\":\n                        enemyKnight3 = engineWhereToMove\n                        break;\n                    case \"oh4\":\n                        enemyKnight4 = engineWhereToMove\n                        break;\n                    case \"oh5\":\n                        enemyKnight5 = engineWhereToMove\n                        break;\n                    case \"oh6\":\n                        enemyKnight6 = engineWhereToMove\n                        break;\n                    case \"oh7\":\n                        enemyKnight7 = engineWhereToMove\n                        break;\n                    case \"oh8\":\n                        enemyKnight8 = engineWhereToMove\n                        break;\n                    case \"oh9\":\n                        enemyKnight9 = engineWhereToMove\n                        break;\n                    case \"oh01\":\n                        enemyKnight01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyKnights = [enemyKnight1, \n                                enemyKnight2, \n                                enemyKnight3, \n                                enemyKnight4, \n                                enemyKnight5, \n                                enemyKnight6, \n                                enemyKnight7, \n                                enemyKnight8, \n                                enemyKnight9, \n                                enemyKnight01]\n\n                moveKnight(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^or/.test(enginePieceToMove)) {\n                checkArrays(rookMoves.current, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n\n                switch (enginePieceToMove) {\n                    case \"or1\":\n                        enemyRook1 = engineWhereToMove\n                        break;\n                    case \"or2\":\n                        enemyRook2 = engineWhereToMove\n                        break;\n                    case \"or3\":\n                        enemyRook3 = engineWhereToMove\n                        break;\n                    case \"or4\":\n                        enemyRook4 = engineWhereToMove\n                        break;\n                    case \"or5\":\n                        enemyRook5 = engineWhereToMove\n                        break;\n                    case \"or6\":\n                        enemyRook6 = engineWhereToMove\n                        break;\n                    case \"or7\":\n                        enemyRook7 = engineWhereToMove\n                        break;\n                    case \"or8\":\n                        enemyRook8 = engineWhereToMove\n                        break;\n                    case \"or9\":\n                        enemyRook9 = engineWhereToMove\n                        break;\n                    case \"or01\":\n                        enemyRook01 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n                \n                enemyRooks = [enemyRook1, \n                              enemyRook2, \n                              enemyRook3, \n                              enemyRook4, \n                              enemyRook5, \n                              enemyRook6, \n                              enemyRook7, \n                              enemyRook8, \n                              enemyRook9, \n                              enemyRook01]\n\n                moveRook(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^oq/.test(enginePieceToMove)) {\n                checkArrays(whiteBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(blackBishopMoves, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n                checkArrays(rookMoves.current, \n                            engineWhereToMove, \n                            checkedByOpponentArr.current, \n                            enemySquaresLive, \n                            playerSquaresLive, \n                            true, \n                            true)\n\n                switch (enginePieceToMove) {\n                    case \"oqw1\": case \"oqb1\":\n                        enemyQueen1 = engineWhereToMove\n                        break;\n                    case \"oqw2\": case \"oqb2\":\n                        enemyQueen2 = engineWhereToMove\n                        break;\n                    case \"oqw3\": case \"oqb3\":\n                        enemyQueen3 = engineWhereToMove\n                        break;\n                    case \"oqw4\": case \"oqb4\":\n                        enemyQueen4 = engineWhereToMove\n                        break;\n                    case \"oqw5\": case \"oqb5\":\n                        enemyQueen5 = engineWhereToMove\n                        break;\n                    case \"oqw6\": case \"oqb6\":\n                        enemyQueen6 = engineWhereToMove\n                        break;\n                    case \"oqw7\": case \"oqb7\":\n                        enemyQueen7 = engineWhereToMove\n                        break;\n                    case \"oqw8\": case \"oqb8\":\n                        enemyQueen8 = engineWhereToMove\n                        break;\n                    case \"oqw9\": case \"oqb9\":\n                        enemyQueen9 = engineWhereToMove\n                        break;\n                    default:\n                        break;\n                }\n\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                enemyQueens = [enemyQueen1, \n                               enemyQueen2, \n                               enemyQueen3, \n                               enemyQueen4, \n                               enemyQueen5, \n                               enemyQueen6, \n                               enemyQueen7, \n                               enemyQueen8, \n                               enemyQueen9]\n\n                moveQueen(engineWhereToMove, enginePieceToMove)\n            } \n            \n            if (/^ok/.test(enginePieceToMove)) {\n                updateStateBoard(engineWhereToMove, enginePieceToMove)\n\n                moveKing(engineWhereToMove, enginePieceToMove)\n                \n                kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n            }\n        // }\n    }\n\n    const recordBoard = () => {\n        filteredEnemyRender = boardEntries.filter(([key, value]) => /^o/.test(key))\n        filteredEnemyLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^o/.test(key))\n        justEnemyRender = Object.fromEntries(filteredEnemyRender)\n        justEnemyLive = Object.fromEntries(filteredEnemyLive)\n\n        filteredPlayerRender = boardEntries.filter(([key, value]) => /^p/.test(key))\n        filteredPlayerLive = Object.entries(store.getState().board.board).filter(([key, value]) => /^p/.test(key))        \n        justPlayerRender = Object.fromEntries(filteredPlayerRender)\n        justPlayerLive = Object.fromEntries(filteredPlayerLive)\n\n        filteredOccupiedRender = boardEntries.filter(([key, value]) => !/empty/.test(key))\n        filteredOccupiedLive = Object.entries(store.getState().board.board).filter(([key, value]) => !/empty/.test(key))\n        justOccupiedRender = Object.fromEntries(filteredOccupiedRender)\n        justOccupiedLive = Object.fromEntries(filteredOccupiedLive)\n\n        enemySquaresRender = Object.values(justEnemyRender).map(a => a = a[0])\n        playerSquaresRender =  Object.values(justPlayerRender).map(a => a = a[0])\n        occupiedSquaresRender = Object.values(justOccupiedRender).map(a => a = a[0])\n\n        enemySquaresLive = Object.values(justEnemyLive).map(a => a = a[0])\n        playerSquaresLive =  Object.values(justPlayerLive).map(a => a = a[0])\n        occupiedSquaresLive = Object.values(justOccupiedLive).map(a => a = a[0])\n\n        kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n\n        attacked(playerRooks, \n                 playerKnights,\n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 protectedByPlayerArr, \n                 true)\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 protectedByOpponentArr, \n                 true)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarArr, true)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarArr, true)\n\n        king8Star(playerKing, playerSquaresRender, enemySquaresRender, playerKing8StarXrayArr, false)\n        king8Star(enemyKing, enemySquaresRender, playerSquaresRender, enemyKing8StarXrayArr, false)\n\n        recordKnightMoves(playerKing, playerHorseSafetyArr.current, playerSquaresRender)\n        recordKnightMoves(enemyKing, enemyHorseSafetyArr.current, enemySquaresRender)\n       \n        if (playerKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyRooks.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (enemyQueens.some(a => playerKing8StarArr.current[i].includes(a)) \n                    || enemyBishops.some(a => playerKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = playerKing8StarArr.current[i].filter(a => enemySquaresRender.includes(a))[0]\n                }\n            }\n        }\n\n        if (enemyKingAttacked) {\n            for (let i = 0; i < 4; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerRooks.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current = enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n            for (let i = 4; i < 8; i++) {\n                if (playerQueens.some(a => enemyKing8StarArr.current[i].includes(a)) \n                    || playerBishops.some(a => enemyKing8StarArr.current[i].includes(a))) {\n                    checkingPiece.current =enemyKing8StarArr.current[i].filter(a => playerSquaresRender.includes(a))[0]\n                }\n            }\n        }\n    }\n\n    const engineTurn = () => {\n        encode()\n\n        let string = `position fen ${stringToSend} moves ${playerPiece.current}${playerNewSquareForEngine.current}`\n\n        if (moves.length === 1) {\n            stockfish.postMessage(\"position startpos\")\n            stockfish.postMessage(\"go movetime 500\")\n        } else {\n            stockfish.postMessage(string)\n            stockfish.postMessage(\"go movetime 500\")\n        }\n\n        setTimeout(() => {\n            listener(engineData.current)\n        }, 1000);\n    }\n\n    const encode = () => {\n        const fenEncode = (arr) => {\n            switch (arr[0]) {\n                case \"or1\": case \"or2\": case \"or3\": case \"or4\": case \"or5\": \n                case \"or6\": case \"or7\": case \"or8\": case \"or9\": case \"or01\": \n                    if (color === \"white\") {\n                        return arr = \"r\"\n                    } else {\n                        return arr = \"R\"\n                    }\n                case \"oh1\": case \"oh2\": case \"oh3\": case \"oh4\": case \"oh5\": \n                case \"oh6\": case \"oh7\": case \"oh8\": case \"oh9\": case \"oh01\": \n                    if (color === \"white\") {\n                        return arr = \"n\"\n                    } else {\n                        return arr = \"N\"\n                    }\n                case \"ob1\": case \"ob2\": case \"ob3\": case \"ob4\": case \"ob5\": \n                case \"ob6\": case \"ob7\": case \"ob8\": case \"ob9\": case \"ob01\": \n                    if (color === \"white\") {\n                        return arr = \"b\"\n                    } else {\n                        return arr = \"B\"\n                    }\n                case \"oqw1\": case \"oqb1\": case \"oqw2\": case \"oqb2\": case \"oqw3\": case \"oqb3\": \n                case \"oqw4\": case \"oqb4\": case \"oqb9\": case \"oqw5\": case \"oqb5\": case \"oqw6\": \n                case \"oqb6\": case \"oqw7\": case \"oqb7\": case \"oqw8\": case \"oqb8\": case \"oqw9\":\n                    if (color === \"white\") {\n                        return arr = \"q\"\n                    } else {\n                        return arr = \"Q\"\n                    }\n                case \"okw\": case \"okb\":\n                    if (color === \"white\") {\n                        return arr = \"k\"\n                    } else {\n                        return arr = \"K\"\n                    }\n                case \"op1\": case \"op2\": case \"op3\": case \"op4\": \n                case \"op5\": case \"op6\": case \"op7\": case \"op8\":\n                    if (color === \"white\") {\n                        return arr = \"p\"\n                    } else {\n                        return arr = \"P\"\n                    }\n                case \"pr1\": case \"pr2\": case \"pr3\": case \"pr4\": case \"pr5\": \n                case \"pr6\": case \"pr7\": case \"pr8\": case \"pr9\": case \"pr01\":\n                    if (color === \"white\") {\n                        return arr = \"R\"\n                    } else {\n                        return arr = \"r\"\n                    }\n                case \"ph1\": case \"ph2\": case \"ph3\": case \"ph4\": case \"ph5\": \n                case \"ph6\": case \"ph7\": case \"ph8\": case \"ph9\": case \"ph01\":\n                    if (color === \"white\") {\n                        return arr = \"N\"\n                    } else {\n                        return arr = \"n\"\n                    }\n                case \"pb1\": case \"pb2\": case \"pb3\": case \"pb4\": case \"pb5\": \n                case \"pb6\": case \"pb7\": case \"pb8\": case \"pb9\": case \"pb01\":\n                    if (color === \"white\") {\n                        return arr = \"B\"\n                    } else {\n                        return arr = \"b\"\n                    }\n                case \"pqw1\": case \"pqb1\": case \"pqw2\": case \"pqb2\": case \"pqw3\": case \"pqb3\": \n                case \"pqw4\": case \"pqb4\": case \"pqb9\": case \"pqw5\": case \"pqb5\": case \"pqw6\": \n                case \"pqb6\": case \"pqw7\": case \"pqb7\": case \"pqw8\": case \"pqb8\": case \"pqw9\":\n                    if (color === \"white\") {\n                        return arr = \"Q\"\n                    } else {\n                        return arr = \"q\"\n                    }\n                case \"pkw\": case \"pkb\":\n                    if (color === \"white\") {\n                        return arr = \"K\"\n                    } else {\n                        return arr = \"k\"\n                    }\n                case \"pp1\": case \"pp2\": case \"pp3\": case \"pp4\": \n                case \"pp5\": case \"pp6\": case \"pp7\": case \"pp8\":\n                    if (color === \"white\") {\n                        return arr = \"P\"\n                    } else {\n                        return arr = \"p\"\n                    }\n                default:\n                    return arr = 1\n            }\n        }\n\n        const fen = boardEntries.map(a => fenEncode(a))\n\n        let fenArrays = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = i * 8; j < i * 8 + 8; j++) {\n                fenArrays[i].push(fen[j])\n            }\n        }\n\n        const customReducer = (arr) => {\n            if (arr.includes(1)) {\n                let temp = 0\n                let reducedArr = 0\n\n                for (let elem of arr) {\n                    if (typeof elem === \"number\") {\n                        temp += elem\n                    } else {\n                        reducedArr += temp\n                        temp = 0\n                        reducedArr += elem\n                    }\n                }\n\n                reducedArr += temp\n\n                if (typeof reducedArr === \"number\") {\n                    return reducedArr\n                } else {\n                    return reducedArr.split(\"\").filter(a => a !== \"0\").join(\"\")\n                }\n            } else {\n                return arr.join(\"\")\n            }\n        }\n\n        fenArrays = fenArrays.map(a => customReducer(a))\n\n        let fenString = fenArrays.join(\"/\")\n\n        fenString += ` ${toMove} `\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"KQ\"\n            } else {\n                fenString += \"kq\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && castlingPlayerMoved.pr1 \n            && !castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"Q\"\n            } else {\n                fenString += \"q\"\n            }\n        }\n\n        if (castlingPlayerMoved.pk \n            && !castlingPlayerMoved.pr1 \n            && castlingPlayerMoved.pr2) {\n            if (color === \"white\") {\n                fenString += \"K\"\n            } else {\n                fenString += \"k\"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"kq \"\n            } else {\n                fenString += \"KQ \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && castlingEnemyMoved.or1 \n            && !castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"q \"\n            } else {\n                fenString += \"Q \"\n            }\n        }\n\n        if (castlingEnemyMoved.ok \n            && !castlingEnemyMoved.or1 \n            && castlingEnemyMoved.or2) {\n            if (color === \"white\") {\n                fenString += \"k \"\n            } else {\n                fenString += \"K \"\n            }\n        }\n\n        if (enPassantSquare.current[0]) {\n            fenString += boardEntries.filter(([key, value]) => value[0] === enPassantSquare.current[0]).flat()[1][1]\n        } else {\n            fenString += \"-\"\n        }\n        \n        fenString += ` ${halfMoveCounter} `\n\n        fenString += moveCounter\n\n        stringToSend = fenString\n    }\n\n    const combThroughSubArrayPlus = (index, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(index)) {\n            for (let j = index + 1; j <= Math.max(...subArr); j++) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const combThroughSubArrayMinus = (i, subArr, arrResult, ownArr, oppArr, exclude) => {\n        if (subArr.includes(i)) {\n            for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                if (subArr.includes(j)) {\n                    if (ownArr.includes(j) && exclude) {\n                        break\n                    } else if (oppArr.includes(j)) {\n                        arrResult.push(j)\n                        break\n                    } else {\n                        arrResult.push(j)\n                    }\n                } \n            }\n        }\n    }\n\n    const king8Star = (index, ownSquares, oppSquares, arrRes, boolean) => {\n        let arr = [[], [], [], [], [], [], [], []]\n\n        for (let i = 0; i < 8; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[0], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[1], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 8; i < 16; i++) {\n            combThroughSubArrayPlus(index, rookMoves.current[i], arr[2], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, rookMoves.current[i], arr[3], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 0; i < 7; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[4], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[5], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, blackBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, blackBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        for (let i = 7; i < 13; i++) {\n            combThroughSubArrayPlus(index, whiteBishopMoves[i], arr[6], ownSquares, oppSquares, boolean)\n            combThroughSubArrayMinus(index, whiteBishopMoves[i], arr[7], ownSquares, oppSquares, boolean)\n        }\n\n        arrRes.current = arr\n    }\n\n    const kingSpiderSense = (king, ownArr, oppArr, arrRes) => {\n        let arr = [[], []]\n\n        checkArrays(whiteBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(blackBishopMoves, king, arr[0], ownArr, oppArr, true, true)\n        checkArrays(rookMoves.current, king, arr[1], ownArr, oppArr, true, true)\n\n        arrRes.current = arr\n    }\n\n    const attacked = (rooks, knights, bishops, queens, pawns, oppSquares, ownSquares, arrRes, protect, pawn = true) => {\n        let arr = []\n        let arrPawn = []\n\n        rooks.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        knights.forEach(a => recordKnightMoves(a, arr, ownSquares))\n\n        bishops.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        bishops.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n\n        queens.forEach(a => checkArrays(whiteBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(blackBishopMoves, a, arr, oppSquares, ownSquares, true, true))\n        queens.forEach(a => checkArrays(rookMoves.current, a, arr, oppSquares, ownSquares, true, true))\n\n        if (pawns === playerPawns) {\n            pawns.forEach(a => recordPlayerPawnAttacks(a, arrPawn))\n        } else {\n            pawns.forEach(a => recordOpponentPawnAttacks(a, arrPawn))\n        }\n\n        if (pawn) {\n            if (pawns === playerPawns) {\n                arrPawn = arrPawn.filter(a => enemySquaresRender.includes(a))\n            } else {\n                arrPawn = arrPawn.filter(a => playerSquaresRender.includes(a))\n            }\n        }\n\n        arr = [...arr, ...arrPawn]\n\n        if (protect) {\n            arrRes.current = arr.filter(a => occupiedSquaresRender.includes(a))\n        } else {\n            arrRes.current = arr\n        }\n    }\n\n    const promotePawn = (pawn, pieceToPromoteTo, i) => {\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        if (/^pp/.test(pawn) && /^pq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"white\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"b\"\n        }\n\n        if (/^op/.test(pawn) && /^oq/.test(pieceToPromoteTo) && color === \"black\") {\n            pieceToPromoteTo = pieceToPromoteTo + \"w\"\n        }\n\n        store.dispatch({\n            type: \"pawnPromotion\",\n            payload: {pieceToPromoteTo, i}\n        })\n\n        if (/^ph/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, playerSquaresLive)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oh/.test(pieceToPromoteTo)) {\n            recordKnightMoves(i + 1, checkedByPlayerArr.current, enemySquaresRender)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pr/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^or/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pb/.test(pieceToPromoteTo)) {\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^ob/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            \n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^pq/.test(pieceToPromoteTo)) {\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            if (checkedByPlayerArr.current.includes(enemyKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (/^oq/.test(pieceToPromoteTo)) {\n            checkArrays(whiteBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(blackBishopMoves, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n            checkArrays(rookMoves.current, i + 1, checkedByPlayerArr.current, enemySquaresRender, playerSquaresRender, true, true)\n\n            if (checkedByPlayerArr.current.includes(playerKing)) {\n                checkingPiece.current = i + 1\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        setPawnPromotes(\"\")\n\n        if (!sandbox && /^pp/.test(pawn)) {\n            engineTurn()\n        }\n    }\n\n    const renderPieces = () => {\n        const renderEachPiece = (a, src1, src2, alt1, alt2) => {\n            return (\n                (color === \"white\"\n                    ?\n                    <img src={src1}\n                         key={a}\n                         alt={alt1}\n                         className=\"piece\"\n                         style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                    : \n                    <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                         style={{height: \"80px\"}}\n                         key={a}>\n                        <img src={src2}\n                             alt={alt2}\n                             className=\"piece\"\n                             style={activePiece === `${a}`\n                                ?\n                                {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                                :\n                                {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                        </img>\n                    </div>)\n            )\n        }\n\n        const renderRoyals = (a, src, alt) => {\n            return (\n                <div className={`${color === \"black\" && !sandbox ? \"reverse\" : null}`}\n                     style={{height: \"80px\"}}\n                     key={a}>\n                    <img src={src}\n                        alt={alt}\n                        className={`piece ${((/^ok/.test(a) && enemyKingAttacked && !currentMove) \n                                        || (/^ok/.test(a) && checkArrOpponent.some(a => a === currentMove))) \n                                    || ((/^pk/.test(a) && playerKingAttacked && !currentMove) \n                                        || (/^pk/.test(a) && checkArrPlayer.some(a => a === currentMove))) ? \"kingInCheck\" : null}`}\n                        style={activePiece === `${a}`\n                            ?\n                            {transform: `translate(${moveVar[0]}px, ${moveVar[1]}px)`} \n                            :\n                            {transform: `translate(0px, 0px)` , transition: `all ${animationSpeed.current}s`}}>\n                    </img>\n                </div>\n            )\n        }\n\n        const renderPlayerPromotion = (pawn, i) => {\n            return (\n                <div className={`pawnPromotionPlayer ${color === \"black\" && !sandbox ? \"reversePromotion\" : null}`} \n                     style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteQueen : blackQueen} \n                             alt=\"Player Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pq\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteRook : blackRook} \n                             alt=\"Player Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pr\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteBishop : blackBishop} \n                             alt=\"Player Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"pb\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? whiteKnight : blackKnight} \n                             alt=\"Player Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ph\", i)}/>\n                    </div>\n                </div>\n            )\n        }\n    \n        const renderOpponentPromotion = (pawn, i) => {\n            return (\n                <div className=\"pawnPromotionOpponent\" style={pawnPromotes === pawn ? {display: \"block\"} : {display: \"none\"}}>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackKnight : whiteKnight} \n                             alt=\"Opponent Knight\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oh\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackBishop : whiteBishop} \n                             alt=\"Opponent Bishop\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"ob\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackRook : whiteRook} \n                             alt=\"Opponent Rook\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"or\", i)}/>\n                    </div>\n                    <div className=\"promotionPiece\">\n                        <img src={color === \"white\" ? blackQueen : whiteQueen} \n                             alt=\"Opponent Queen\" \n                             className=\"piece\"\n                             onClick={() => promotePawn(pawn, \"oq\", i)}/>\n                    </div>  \n                </div>\n            )\n        }\n\n        const renderEntries = (a, i) => {\n            switch (a) {\n                case \"or1\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or2\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or3\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or4\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or5\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or6\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or7\": \n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or8\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or9\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"or01\":\n                    return renderEachPiece(a, blackRook, whiteRook, \"Black Rook\", \"White Rook\")\n                case \"oh1\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh2\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh3\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh4\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh5\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh6\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh7\": \n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh8\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh9\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"oh01\":\n                    return renderEachPiece(a, blackKnight, whiteKnight, \"Black Knight\", \"White Knight\")\n                case \"ob1\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob2\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob3\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob4\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob5\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob6\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob7\": \n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\")\n                case \"ob8\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob9\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"ob01\":\n                    return renderEachPiece(a, blackBishop, whiteBishop, \"Black Bishop\", \"White Bishop\") \n                case \"okw\":\n                    return renderRoyals(a, whiteKing, \"White King\") \n                case \"okb\":\n                    return renderRoyals(a, blackKing, \"Black King\") \n                case \"oqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\") \n                case \"oqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"oqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\") \n                case \"op1\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op1\", i)}\n                    </div>\n                case \"op2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op2\", i)}\n                    </div>\n                case \"op3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op3\", i)}\n                    </div>\n                case \"op4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op4\", i)}\n                    </div>\n                case \"op5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op5\", i)}\n                    </div>\n                case \"op6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op6\", i)}\n                    </div>\n                case \"op7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op7\", i)}\n                    </div>\n                case \"op8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, blackPawn, whitePawn, \"Black Pawn\", \"White Pawn\")}\n                        {renderOpponentPromotion(\"op8\", i)}\n                    </div>\n                case \"pr1\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr2\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr3\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr4\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr5\": \n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr6\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr7\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr8\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr9\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"pr01\":\n                    return renderEachPiece(a, whiteRook, blackRook, \"White Rook\", \"Black Rook\")\n                case \"ph1\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph2\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph3\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph4\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph5\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph6\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph7\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph8\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph9\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"ph01\":\n                    return renderEachPiece(a, whiteKnight, blackKnight, \"White Knight\", \"Black Knight\")\n                case \"pb1\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb2\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb3\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb4\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb5\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb6\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb7\": \n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb8\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb9\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pb01\":\n                    return renderEachPiece(a, whiteBishop, blackBishop, \"White Bishop\", \"Black Bishop\")\n                case \"pkw\":\n                    return renderRoyals(a, whiteKing, \"White King\")\n                case \"pkb\":\n                    return renderRoyals(a, blackKing, \"Black King\")\n                case \"pqw1\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw2\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw3\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw4\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw5\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw6\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw7\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw8\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqw9\":\n                    return renderRoyals(a, whiteQueen, \"White Queen\")\n                case \"pqb1\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb2\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb3\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb4\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb5\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb6\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb7\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb8\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pqb9\":\n                    return renderRoyals(a, blackQueen, \"Black Queen\")\n                case \"pp1\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp1\", i)}\n                    </div>\n                case \"pp2\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp2\", i)}\n                    </div>\n                case \"pp3\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp3\", i)}\n                    </div>\n                case \"pp4\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp4\", i)}\n                    </div>\n                case \"pp5\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp5\", i)}\n                    </div>\n                case \"pp6\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp6\", i)}\n                    </div>\n                case \"pp7\": \n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp7\", i)}\n                    </div>\n                case \"pp8\":\n                    return <div className=\"pawnContainer\" key={i * 100 + \"a\"}>\n                        {renderEachPiece(a, whitePawn, blackPawn, \"White Pawn\", \"Black Pawn\")}\n                        {renderPlayerPromotion(\"pp8\", i)}\n                    </div>\n                default:\n                    return (\n                        <div className=\"piece\" key={i * 100 + \"b\"}></div>\n                    )\n            }\n        }\n\n        return (\n            <div className=\"piecesGrid\">\n                {currentMove === null \n                    ? \n                    boardEntries.map((a, i) => renderEntries(a[0], i))\n                    : \n                    Object.entries(JSON.parse(moves[currentMove])).map((a, i) => renderEntries(a[0], i))}\n            </div>\n        )\n    }\n\n    const renderMovement = () => {\n        let arr = [0, 0, 0, 0, 0, 0, 0, 0]\n\n        return (\n            <div className=\"movementGrid\">\n                <div className=\"pawnPromotionOverlay\" style={pawnPromotes ? {display: \"block\"} : {display: \"none\"}}></div>\n\n                {arr.map((a, i) => <div key={i + 1 * 100} \n                                        onClick={() => onSquareClick(i + 1, boardEntries[i][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 1 : \"\"}\n                                            {moveSquares.includes(i + 1) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n                                    \n                {arr.map((a, i) => <div key={i + 9 * 100}\n                                        onClick={() => onSquareClick(i + 9, boardEntries[i + 8][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 9 : \"\"}\n                                            {moveSquares.includes(i + 9) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 17 * 100} \n                                        onClick={() => onSquareClick(i + 17, boardEntries[i + 16][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 17 : \"\"}\n                                            {moveSquares.includes(i + 17) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 25 * 100}\n                                        onClick={() => onSquareClick(i + 25, boardEntries[i + 24][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 25 : \"\"}\n                                            {moveSquares.includes(i + 25) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 33 * 100} \n                                        onClick={() => onSquareClick(i + 33, boardEntries[i + 32][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 33 : \"\"}\n                                            {moveSquares.includes(i + 33) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 41 * 100}\n                                        onClick={() => onSquareClick(i + 41, boardEntries[i + 40][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 41 : \"\"}\n                                            {moveSquares.includes(i + 41) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 49 * 100}\n                                        onClick={() => onSquareClick(i + 49, boardEntries[i + 48][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 49 : \"\"}\n                                            {moveSquares.includes(i + 49) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n\n                {arr.map((a, i) => <div key={i + 57 * 100} \n                                        onClick={() => onSquareClick(i + 57, boardEntries[i + 56][0])}\n                                        className=\"movementSquare\">\n                                            {numbers ? i + 57 : \"\"}\n                                            {moveSquares.includes(i + 57) ? <div className=\"highlightSquare\"><div></div></div> : null}\n                                    </div>)}\n            </div>\n        )\n    }\n\n    const checkArrays = (arrayChecked, i, arr, ownArr, oppArr, exclude1, exclude2) => {\n        let arr2 = []\n\n        if (i) {\n            if (i !== playerKing && i !== enemyKing) {\n                if (playerSquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (playerKing8StarXrayArr.current[k].includes(i)\n                            && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                            || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                            && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                            arr2 = playerKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n    \n                if (enemySquaresRender.includes(i)) {\n                    for (let k = 0; k < 4; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n    \n                    for (let k = 4; k < 8; k++) {\n                        if (enemyKing8StarXrayArr.current[k].includes(i)\n                            && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                            || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                            && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                            arr2 = enemyKing8StarXrayArr.current[k]\n                        }\n                    }\n                }\n            }\n    \n            for (const subArr of arrayChecked) {\n                if (subArr.includes(i)) {\n                    for (let j = i + 1; j <= Math.max(...subArr); j++) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing\n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j) \n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n    \n                    for (let j = i - 1; j >= Math.min(...subArr); j--) {\n                        if (subArr.includes(j) && arr2.length === 0) {\n                            if (ownArr.includes(j) && exclude1) {\n                                break\n                            } else if (oppArr.includes(j) \n                                && j !== playerKing \n                                && j !== enemyKing \n                                && exclude2) {\n                                arr.push(j)\n                                break\n                            } else {\n                                arr.push(j)\n                            }\n                        } else if (subArr.includes(j) \n                            && arr2.includes(j)\n                            && !ownArr.includes(j)) {\n                            arr.push(j)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const recordKnightMoves = (i, arrMoves, excArr) => {  \n        let arr = []\n        let arr2 = []\n\n        if (playerSquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (playerKing8StarXrayArr.current[k].includes(i)\n                    && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                    || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))\n                    && playerKing8StarXrayArr.current[k].filter(a => playerSquaresRender.includes(a)).length === 1) {\n                    arr2 = playerKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (enemySquaresRender.includes(i)) {\n            for (let k = 0; k < 4; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n\n            for (let k = 4; k < 8; k++) {\n                if (enemyKing8StarXrayArr.current[k].includes(i)\n                    && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                    || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))\n                    && enemyKing8StarXrayArr.current[k].filter(a => enemySquaresRender.includes(a)).length === 1) {\n                    arr2 = enemyKing8StarXrayArr.current[k]\n                }\n            }\n        }\n\n        if (i) {\n            if (knightLimits.current[0].includes(i)) {\n                arr = [i - 15, i - 6, i + 10, i + 17]\n            } else if (knightLimits.current[1].includes(i)) {\n                arr = [i - 17, i - 15, i - 6, i + 10, i + 15, i + 17]\n            } else if (knightLimits.current[2].includes(i)) {\n                arr = [i - 17, i - 15, i - 10, i + 6, i + 15, i + 17]\n            } else if (knightLimits.current[3].includes(i)) {\n                arr = [i - 17, i - 10, i + 6, i + 15]\n            } else {\n                arr = [i - 17, i - 15, i - 10, i - 6, i + 6, i + 10, i + 15, i + 17]\n            }\n\n            for (const number of arr) {\n                if (excArr.includes(number)) {\n                    arr = arr.filter(a => a !== number)\n                }\n\n                if (arr2.length > 0) {\n                    arr = arr.filter(a => arr2.includes(a))\n                }\n            }\n\n            if (playerKingAttacked \n                && playerSquaresRender.includes(i) \n                && i !== playerKing \n                && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n                \n                arr = arr.filter(a => arrTech.includes(a))\n            } else if (playerKingAttacked \n                && !playerKing8StarArr.current.flat().includes(checkingPiece.current)\n                && arr.includes(checkingPiece.current)) {\n                arr = [checkingPiece.current]\n            } else if (playerKingAttacked) {\n                arr = []\n            }\n\n            if (enemyKingAttacked \n                && enemySquaresRender.includes(i) \n                && i !== enemyKing \n                && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                arr = arr.filter(a => arrTech.includes(a))\n            } else if (enemyKingAttacked \n                && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)\n                && arr.includes(checkingPiece.current)) {\n                arr = [checkingPiece.current]\n            } else if (enemyKingAttacked) {\n                arr = []\n            }\n\n            for (const number of arr) {\n                arrMoves.push(number)\n            }\n        }\n    }\n\n    const recordPlayerPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n\n        for (let k = 0; k < 4; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyRooks.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        for (let k = 4; k < 8; k++) {\n            if (playerKing8StarXrayArr.current[k].includes(i)\n                && (enemyBishops.some(a => playerKing8StarXrayArr.current[k].includes(a)) \n                || enemyQueens.some(a => playerKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = playerKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (color === \"black\" && !sandbox) {\n            if (pawnsFirstMove[piece]) {\n                arr = [i + 8, i + 16]\n            } else {\n                arr = [i + 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i + 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i + 16)) {\n                arr = [i + 8]\n            }\n    \n            if ((enemySquaresRender.includes(i + 9) \n                || (rookMoves.current[4].includes(i) \n                && i + 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i + 9)\n            }\n\n            if ((enemySquaresRender.includes(i + 7) \n                || (rookMoves.current[4].includes(i) \n                && i + 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i + 7)\n            }\n        } else {\n            if (pawnsFirstMove[piece]) {\n                arr = [i - 8, i - 16]\n            } else {\n                arr = [i - 8]\n            }\n            \n            if (occupiedSquaresRender.includes(i - 8)) {\n                arr = []\n            } else if (occupiedSquaresRender.includes(i - 16)) {\n                arr = [i - 8]\n            }\n    \n            if ((enemySquaresRender.includes(i - 9) \n                || (rookMoves.current[3].includes(i) \n                && i - 9 === enPassantSquare.current[0])) \n                && !knightLimits.current[0].includes(i)) {\n                arr.push(i - 9)\n            }\n    \n            if ((enemySquaresRender.includes(i - 7) \n                || (rookMoves.current[3].includes(i) \n                && i - 7 === enPassantSquare.current[0])) \n                && !knightLimits.current[3].includes(i)) {\n                arr.push(i - 7)\n            }\n        }\n\n        if (arr2.filter(a => playerSquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n            \n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (playerKingAttacked \n            && !playerKing8StarArr.current.flat().includes(checkingPiece.current) \n            && arr.includes(checkingPiece.current)) {\n            arr = [checkingPiece.current]\n        } else if (playerKingAttacked) {\n            arr = []\n        }\n        \n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnMoves = (i, piece, arrMoves) => {    \n        let arr = []\n        let arr2 = []\n        \n        for (let k = 0; k < 4; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerRooks.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n        for (let k = 4; k < 8; k++) {\n            if (enemyKing8StarXrayArr.current[k].includes(i)\n                && (playerBishops.some(a => enemyKing8StarXrayArr.current[k].includes(a)) \n                || playerQueens.some(a => enemyKing8StarXrayArr.current[k].includes(a)))) {\n                arr2 = enemyKing8StarXrayArr.current[k]\n            }\n        }\n\n        if (pawnsFirstMove[piece]) {\n            arr = [i + 8, i + 16]\n        } else {\n            arr = [i + 8]\n        }\n\n        if (occupiedSquaresRender.includes(i + 8)) {\n            arr = []\n        } else if (occupiedSquaresRender.includes(i + 16)) {\n            arr = [i + 8]\n        }\n\n        if ((playerSquaresRender.includes(i + 7) \n            || (rookMoves.current[4].includes(i) \n            && i + 7 === enPassantSquare.current[0])) \n            && !knightLimits.current[0].includes(i)) {\n            arr.push(i + 7)\n        }\n\n        if ((playerSquaresRender.includes(i + 9) \n            || (rookMoves.current[4].includes(i) \n            && i + 9 === enPassantSquare.current[0])) \n            && !knightLimits.current[3].includes(i)) {\n            arr.push(i + 9)\n        }\n\n        if (arr2.filter(a => enemySquaresRender.includes(a)).length === 1) {\n            arr = arr.filter(a => arr2.includes(a))\n        } \n\n        if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n            let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n            arr = arr.filter(a => arrTech.includes(a))\n        } else if (enemyKingAttacked \n            && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)\n            && arr.includes(checkingPiece.current)) {\n            arr = [checkingPiece.current]\n        } else if (enemyKingAttacked ) {\n            arr = []\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordOpponentPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerPawnAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (i) {\n            if (color === \"black\" && !sandbox) {\n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i + 9)\n                }\n        \n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i + 7)\n                }\n            } else {\n                if (!knightLimits.current[0].includes(i)) {\n                    arr.push(i - 9)\n                }\n        \n                if (!knightLimits.current[3].includes(i)) {\n                    arr.push(i - 7)\n                }\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingMoves = (i, arrMoves) => {\n        let arr = []\n        let arr2 = []\n\n        recordEnemyKingAttacks(enemyKing, arr2)\n\n        attacked(enemyRooks, \n            enemyKnights, \n            enemyBishops, \n            enemyQueens, \n            enemyPawns, \n            enemySquaresRender, \n            playerSquaresRender, \n            pawnKingArrPlayer, \n            false,\n            false)\n\n        if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2 && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingPlayerMoved.pk && castlingPlayerMoved.pr1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n   \n        for (const number of arr) {\n            if (playerSquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(60) && i === 61) || (playerKingAttacked && pawnKingArrPlayer.current.includes(59))) {\n                    arr = arr.filter(x => x !== 59)\n                }\n\n                if ((!arr.includes(62) && i === 61) || (playerKingAttacked && pawnKingArrPlayer.current.includes(63))) {\n                    arr = arr.filter(x => x !== 63)\n                }\n\n                arr = arr.filter(a => !pawnKingArrPlayer.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !pawnKingArrPlayer.current.includes(a))\n                         .filter(a => !protectedByOpponentArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordPlayerKingAttacks = (i, arrMoves) => {\n        let arr = []\n\n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingMoves = (i, arrMoves) => {\n        let arr = []              \n        let arr2 = []\n\n        recordPlayerKingAttacks(playerKing, arr2)\n\n        attacked(playerRooks, \n            playerKnights, \n            playerBishops, \n            playerQueens, \n            playerPawns, \n            playerSquaresRender, \n            enemySquaresRender, \n            pawnKingArrOpponent, \n            false,\n            false) \n\n        if (castlingEnemyMoved.ok && castlingEnemyMoved.or2 && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2, i - 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or2) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i + 2]\n        } else if (castlingEnemyMoved.ok && castlingEnemyMoved.or1) {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9, i - 2]\n        } else if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            if (enemySquaresRender.includes(number)) {\n                arr = arr.filter(x => x !== number)\n\n                if ((!arr.includes(4) && i === 5) || (enemyKingAttacked && pawnKingArrOpponent.current.includes(3))) {\n                    arr = arr.filter(x => x !== 3)\n                }\n\n                if ((!arr.includes(6) && i === 5) || (enemyKingAttacked && pawnKingArrOpponent.current.includes(7))) {\n                    arr = arr.filter(x => x !== 7)\n                }\n\n                arr = arr.filter(a => !pawnKingArrOpponent.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            } else {\n                arr = arr.filter(a => !pawnKingArrOpponent.current.includes(a))\n                         .filter(a => !protectedByPlayerArr.current.includes(a))\n                         .filter(a => !arr2.includes(a))\n                         .filter(a => a > 0 && a < 65)\n            }\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const recordEnemyKingAttacks = (i, arrMoves) => {\n        let arr = []              \n        \n        if (knightLimits.current[0].includes(i)) {\n            arr = [i - 8, i - 7, i + 1, i + 8, i + 9]\n        } else if (knightLimits.current[3].includes(i)) {\n            arr = [i - 9, i - 8, i - 1, i + 7, i + 8]\n        } else {\n            arr = [i - 9, i - 8, i - 7, i - 1, i + 1, i + 7, i + 8, i + 9]\n        }\n\n        for (const number of arr) {\n            arrMoves.push(number)\n        }\n    }\n\n    const onSquareClick = (i, piece) => {   \n        if (((!moveSquares.includes(i) && moveSquares.length > 0) || activePiece === piece) \n            && \n            (\n             (\n              (\n               (color === \"white\" && toMove === \"b\") \n                || \n               (color === \"black\" && toMove === \"w\")\n              ) \n                && !playerSquaresRender.includes(i)\n             ) \n            || \n             (\n              (\n               (color === \"white\" && toMove === \"w\") \n                || \n               (color === \"black\" && toMove === \"b\")\n              ) \n                && !enemySquaresRender.includes(i)\n             )\n            )){\n            store.dispatch({\n                type:\"moveSquares\",\n                payload: []\n            })\n\n            store.dispatch({\n                type: \"activePiece\",\n                payload: \"\"\n            })\n            \n            store.dispatch({\n                type: \"pieceSquare\",\n                payload: null\n            })\n        }\n\n        if (occupiedSquaresRender.includes(i) \n            && activePiece !== piece \n            && !currentMove \n            && !gameEnd) {\n            if (((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"b\")) \n                && playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n\n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                if (/^ph/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, playerSquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pp/.test(piece)) {\n                    let arr = []\n\n                    recordPlayerPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pr/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pb/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pq/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, playerSquaresRender, enemySquaresRender, true, true)\n\n                    if (playerKingAttacked && playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (playerKingAttacked && !playerKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^pk/.test(piece)) {\n                    let arr = []\n\n                    recordPlayerKingMoves(i, arr)\n                    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            } else if (((color === \"white\" && toMove === \"b\") || (color === \"black\" && toMove === \"w\")) \n                        && sandbox \n                        && enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type:\"moveSquares\",\n                    payload: []\n                })\n    \n                if (store.getState().board.oldSquare !== i) {\n                    store.dispatch({\n                        type: \"oldSquare\",\n                        payload: i\n                    })\n                }\n\n                store.dispatch({\n                    type: \"activePiece\",\n                    payload: piece\n                })\n\n                store.dispatch({\n                    type: \"pieceSquare\",\n                    payload: i\n                })\n\n                pieceSquareForEngine.current = i\n                playerPiece.current = boardEntries.filter(([key, value]) => value[0] === pieceSquareForEngine.current).flat()[1][1]\n\n                if (/^oh/.test(piece)) {   \n                    let arr = []\n\n                    recordKnightMoves(i, arr, enemySquaresRender)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^op/.test(piece)) {\n                    let arr = []\n\n                    recordOpponentPawnMoves(i, piece, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^or/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ob/.test(piece)) {\n                    let arr = []\n\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^oq/.test(piece)) {\n                    let arr = []\n    \n                    checkArrays(rookMoves.current, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(blackBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n                    checkArrays(whiteBishopMoves, i, arr, enemySquaresRender, playerSquaresRender, true, true)\n\n                    if (enemyKingAttacked && enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        let arrTech = enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current)).flat()\n\n                        arr = arr.filter(a => arrTech.includes(a))\n                    } else if (enemyKingAttacked && !enemyKing8StarArr.current.flat().includes(checkingPiece.current)) {\n                        arr = arr.filter(a => a === checkingPiece.current)\n                    }\n    \n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n    \n                if (/^ok/.test(piece)) {\n                    let arr = []\n\n                    recordEnemyKingMoves(i, arr)\n\n                    store.dispatch({\n                        type:\"moveSquares\",\n                        payload: arr\n                    })\n                }\n            }\n\n        }\n\n        if (/^ph/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByPlayerArr.current, playerSquaresLive)\n\n            switch (activePiece) {\n                case \"ph1\":\n                    playerKnight1 = i\n                    break\n                case \"ph2\":\n                    playerKnight2 = i\n                    break\n                case \"ph3\":\n                    playerKnight3 = i\n                    break\n                case \"ph4\":\n                    playerKnight4 = i\n                    break\n                case \"ph5\":\n                    playerKnight5 = i\n                    break\n                case \"ph6\":\n                    playerKnight6 = i\n                    break\n                case \"ph7\":\n                    playerKnight7 = i\n                    break\n                case \"ph8\":\n                    playerKnight8 = i\n                    break\n                case \"ph9\":\n                    playerKnight9 = i\n                    break\n                case \"ph01\":\n                    playerKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerKnights = [playerKnight1, \n                             playerKnight2, \n                             playerKnight3, \n                             playerKnight4, \n                             playerKnight5, \n                             playerKnight6, \n                             playerKnight7, \n                             playerKnight8, \n                             playerKnight9, \n                             playerKnight01]\n\n            moveKnight(i, activePiece)\n        } \n\n        if (/^pp/.test(activePiece) && moveSquares.includes(i)) {\n            recordPlayerPawnMoves(i, activePiece, checkedByPlayerArr.current)\n\n            switch (activePiece) {\n                case \"pp1\":\n                    playerPawn1 = i\n                    break\n                case \"pp2\":\n                    playerPawn2 = i\n                    break\n                case \"pp3\":\n                    playerPawn3 = i\n                    break\n                case \"pp4\":\n                    playerPawn4 = i\n                    break\n                case \"pp5\":\n                    playerPawn5 = i\n                    break\n                case \"pp6\":\n                    playerPawn6 = i\n                    break\n                case \"pp7\":\n                    playerPawn7 = i\n                    break;\n                case \"pp8\":\n                    playerPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerPawns = [playerPawn1, \n                           playerPawn2, \n                           playerPawn3, \n                           playerPawn4, \n                           playerPawn5, \n                           playerPawn6, \n                           playerPawn7, \n                           playerPawn8]\n           \n            movePawn(i, activePiece)\n        } \n\n        if (/^pb/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pb1\":\n                    playerBishop1 = i\n                    break\n                case \"pb2\":\n                    playerBishop2 = i\n                    break\n                case \"pb3\":\n                    playerBishop3 = i\n                    break\n                case \"pb4\":\n                    playerBishop4 = i\n                    break\n                case \"pb5\":\n                    playerBishop5 = i\n                    break\n                case \"pb6\":\n                    playerBishop6 = i\n                    break\n                case \"pb7\":\n                    playerBishop7 = i\n                    break\n                case \"pb8\":\n                    playerBishop8 = i\n                    break\n                case \"pb9\":\n                    playerBishop9 = i\n                    break\n                case \"pb01\":\n                    playerBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerBishops = [playerBishop1, \n                             playerBishop2, \n                             playerBishop3, \n                             playerBishop4, \n                             playerBishop5, \n                             playerBishop6, \n                             playerBishop7, \n                             playerBishop8, \n                             playerBishop9, \n                             playerBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^pr/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"pr1\":\n                    playerRook1 = i\n                    break\n                case \"pr2\":\n                    playerRook2 = i\n                    break\n                case \"pr3\":\n                    playerRook3 = i\n                    break\n                case \"pr4\":\n                    playerRook4 = i\n                    break\n                case \"pr5\":\n                    playerRook5 = i\n                    break\n                case \"pr6\":\n                    playerRook6 = i\n                    break\n                case \"pr7\":\n                    playerRook7 = i\n                    break\n                case \"pr8\":\n                    playerRook8 = i\n                    break\n                case \"pr9\":\n                    playerRook9 = i\n                    break\n                case \"pr01\":\n                    playerRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerRooks = [playerRook1, \n                           playerRook2, \n                           playerRook3, \n                           playerRook4, \n                           playerRook5, \n                           playerRook6, \n                           playerRook7, \n                           playerRook8, \n                           playerRook9, \n                           playerRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^pq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n            checkArrays(whiteBishopMoves, i, checkedByPlayerArr.current, playerSquaresLive, enemySquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"pqw1\": case \"pqb1\":\n                    playerQueen1 = i\n                    break\n                case \"pqw2\": case \"pqb2\":\n                    playerQueen2 = i\n                    break\n                case \"pqw3\": case \"pqb3\":\n                    playerQueen3 = i\n                    break\n                case \"pqw4\": case \"pqb4\":\n                    playerQueen4 = i\n                    break\n                case \"pqw5\": case \"pqb5\":\n                    playerQueen5 = i\n                    break\n                case \"pqw6\": case \"pqb6\":\n                    playerQueen6 = i\n                    break\n                case \"pqw7\": case \"pqb7\":\n                    playerQueen7 = i\n                    break\n                case \"pqw8\": case \"pqb8\":\n                    playerQueen8 = i\n                    break\n                case \"pqw9\": case \"pqb9\":\n                    playerQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            playerQueens = [playerQueen1, \n                            playerQueen2, \n                            playerQueen3, \n                            playerQueen4, \n                            playerQueen5, \n                            playerQueen6, \n                            playerQueen7, \n                            playerQueen8, \n                            playerQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^pk/.test(activePiece) \n            && moveSquares.includes(i) \n            && !attackedByOpponentArr.current.includes(i)) {\n            playerKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(playerKing, playerSquaresLive, enemySquaresLive, playerKingSpiderSenseArr)\n        } \n                \n        if (/^oh/.test(activePiece) && moveSquares.includes(i)) {\n            recordKnightMoves(i, checkedByOpponentArr.current, enemySquaresLive)\n            \n            switch (activePiece) {\n                case \"oh1\":\n                    enemyKnight1 = i\n                    break\n                case \"oh2\":\n                    enemyKnight2 = i\n                    break\n                case \"oh3\":\n                    enemyKnight3 = i\n                    break\n                case \"oh4\":\n                    enemyKnight4 = i\n                    break\n                case \"oh5\":\n                    enemyKnight5 = i\n                    break\n                case \"oh6\":\n                    enemyKnight6 = i\n                    break\n                case \"oh7\":\n                    enemyKnight7 = i\n                    break\n                case \"oh8\":\n                    enemyKnight8 = i\n                    break\n                case \"oh9\":\n                    enemyKnight9 = i\n                    break\n                case \"oh01\":\n                    enemyKnight01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyKnights = [enemyKnight1, \n                            enemyKnight2, \n                            enemyKnight3, \n                            enemyKnight4, \n                            enemyKnight5, \n                            enemyKnight6, \n                            enemyKnight7, \n                            enemyKnight8, \n                            enemyKnight9, \n                            enemyKnight01]\n            \n            moveKnight(i, activePiece)\n        } \n        \n        if (/^op/.test(activePiece) && moveSquares.includes(i)) {\n            recordOpponentPawnMoves(i, activePiece, checkedByOpponentArr.current)\n\n            switch (activePiece) {\n                case \"op1\":\n                    enemyPawn1 = i\n                    break\n                case \"op2\":\n                    enemyPawn2 = i\n                    break\n                case \"op3\":\n                    enemyPawn3 = i\n                    break\n                case \"op4\":\n                    enemyPawn4 = i\n                    break\n                case \"op5\":\n                    enemyPawn5 = i\n                    break\n                case \"op6\":\n                    enemyPawn6 = i\n                    break\n                case \"op7\":\n                    enemyPawn7 = i\n                    break\n                case \"op8\":\n                    enemyPawn8 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyPawns = [enemyPawn1, \n                          enemyPawn2, \n                          enemyPawn3, \n                          enemyPawn4, \n                          enemyPawn5, \n                          enemyPawn6, \n                          enemyPawn7, \n                          enemyPawn8]\n\n            movePawn(i, activePiece)\n        } \n\n        if (/^ob/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"ob1\":\n                    enemyBishop1 = i\n                    break\n                case \"ob2\":\n                    enemyBishop2 = i\n                    break\n                case \"ob3\":\n                    enemyBishop3 = i\n                    break\n                case \"ob4\":\n                    enemyBishop4 = i\n                    break\n                case \"ob5\":\n                    enemyBishop5 = i\n                    break\n                case \"ob6\":\n                    enemyBishop6 = i\n                    break\n                case \"ob7\":\n                    enemyBishop7 = i\n                    break\n                case \"ob8\":\n                    enemyBishop8 = i\n                    break\n                case \"ob9\":\n                    enemyBishop9 = i\n                    break\n                case \"ob01\":\n                    enemyBishop01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyBishops = [enemyBishop1, \n                            enemyBishop2, \n                            enemyBishop3, \n                            enemyBishop4, \n                            enemyBishop5, \n                            enemyBishop6, \n                            enemyBishop7, \n                            enemyBishop8, \n                            enemyBishop9, \n                            enemyBishop01]\n\n            moveBishop(i, activePiece)\n        } \n\n        if (/^or/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            \n            switch (activePiece) {\n                case \"or1\":\n                    enemyRook1 = i\n                    break\n                case \"or2\":\n                    enemyRook2 = i\n                    break\n                case \"or3\":\n                    enemyRook3 = i\n                    break\n                case \"or4\":\n                    enemyRook4 = i\n                    break\n                case \"or5\":\n                    enemyRook5 = i\n                    break\n                case \"or6\":\n                    enemyRook6 = i\n                    break\n                case \"or7\":\n                    enemyRook7 = i\n                    break\n                case \"or8\":\n                    enemyRook8 = i\n                    break\n                case \"or9\":\n                    enemyRook9 = i\n                    break\n                case \"or01\":\n                    enemyRook01 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyRooks = [enemyRook1, \n                          enemyRook2, \n                          enemyRook3, \n                          enemyRook4, \n                          enemyRook5, \n                          enemyRook6, \n                          enemyRook7, \n                          enemyRook8, \n                          enemyRook9, \n                          enemyRook01]\n\n            moveRook(i, activePiece)\n        }\n\n        if (/^oq/.test(activePiece) && moveSquares.includes(i)) {\n            checkArrays(whiteBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(blackBishopMoves, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n            checkArrays(rookMoves.current, i, checkedByOpponentArr.current, enemySquaresLive, playerSquaresLive, true, true)\n\n            switch (activePiece) {\n                case \"oqw1\": case \"oqb1\":\n                    enemyQueen1 = i\n                    break\n                case \"oqw2\": case \"oqb2\":\n                    enemyQueen2 = i\n                    break\n                case \"oqw3\": case \"oqb3\":\n                    enemyQueen3 = i\n                    break\n                case \"oqw4\": case \"oqb4\":\n                    enemyQueen4 = i\n                    break\n                case \"oqw5\": case \"oqb5\":\n                    enemyQueen5 = i\n                    break\n                case \"oqw6\": case \"oqb6\":\n                    enemyQueen6 = i\n                    break\n                case \"oqw7\": case \"oqb7\":\n                    enemyQueen7 = i\n                    break\n                case \"oqw8\": case \"oqb8\":\n                    enemyQueen8 = i\n                    break\n                case \"oqw9\": case \"oqb9\":\n                    enemyQueen9 = i\n                    break\n                default:\n                    break\n            }\n\n            updateStateBoard(i, activePiece)\n\n            enemyQueens = [enemyQueen1, \n                           enemyQueen2, \n                           enemyQueen3, \n                           enemyQueen4, \n                           enemyQueen5, \n                           enemyQueen6, \n                           enemyQueen7, \n                           enemyQueen8, \n                           enemyQueen9]\n\n            moveQueen(i, activePiece)\n        } \n\n        if (/^ok/.test(activePiece) \n            && moveSquares.includes(i)\n            && !attackedByPlayerArr.current.includes(i)) {\n            enemyKing = i\n\n            updateStateBoard(i, activePiece)\n\n            moveKing(i, activePiece)\n\n            kingSpiderSense(enemyKing, enemySquaresLive, playerSquaresLive, enemyKingSpiderSenseArr)\n        } \n    }\n\n    const updateStateBoard = (i, string) => {\n        if (/^pp/.test(string) || /^op/.test(string)) {\n            store.dispatch({\n                type: \"pawnMoved\",\n                payload: string\n            })\n        }\n\n        if (/(pr1)|(pr2)/.test(string) || /^pk/.test(string)) {\n            store.dispatch({\n                type: \"castlingPlayerMoved\",\n                payload: string\n            })\n        } \n        \n        if (/(or1)|(or2)/.test(string) || /^ok/.test(string)){\n            store.dispatch({\n                type: \"castlingEnemyMoved\",\n                payload: string\n            })\n        }\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        pieceNewSquare.current = i\n        playerNewSquareForEngine.current = boardEntries.filter(([key, value]) => value[0] === pieceNewSquare.current).flat()[1][1]\n\n        store.dispatch({\n            type: \"highlightMove\",\n            payload: i\n        })\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: string,\n                    payload: \"takes\"\n                })\n            } else {\n                store.dispatch({\n                    type: string\n                })\n            }\n        } \n\n        recordBoard()\n    }\n\n    const checkGameEnd = () => {\n        attacked(enemyRooks, \n                 enemyKnights, \n                 enemyBishops, \n                 enemyQueens, \n                 enemyPawns, \n                 enemySquaresRender, \n                 playerSquaresRender, \n                 attackedByOpponentArr, \n                 false)\n        attacked(playerRooks, \n                 playerKnights, \n                 playerBishops, \n                 playerQueens, \n                 playerPawns, \n                 playerSquaresRender, \n                 enemySquaresRender, \n                 attackedByPlayerArr, \n                 false)\n\n        let arrPlayerCheckmate = []\n        let arrEnemyCheckmate = []\n        let arrPlayerStalemate = []\n        let arrEnemyStalemate = []\n        \n        recordPlayerKingMoves(playerKing, arrPlayerCheckmate)\n        recordEnemyKingMoves(enemyKing, arrEnemyCheckmate)\n\n        if (\n            (\n                playerKingAttacked \n                && !attackedByPlayerArr.current.includes(checkingPiece.current) \n                && arrPlayerCheckmate.length === 0 \n                && !playerKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                            .flat()\n                                                            .some(a => attackedByPlayerArr.current.includes(a))\n            ) \n                ||\n            (\n                enemyKingAttacked \n                && !attackedByOpponentArr.current.includes(checkingPiece.current) \n                && arrEnemyCheckmate.length === 0 \n                && !enemyKing8StarArr.current.filter(a => a.includes(checkingPiece.current))\n                                                           .flat()\n                                                           .some(a => attackedByOpponentArr.current.includes(a))\n            )\n            ) {\n            \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (playerKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You've been checkmated.\"\n                })\n            }\n\n            if (enemyKingAttacked) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"You checkmated your opponent.\"\n                })\n            }\n        }\n\n        playerRooks.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrPlayerStalemate, \n                                             playerSquaresRender, \n                                             enemySquaresRender, \n                                             true, \n                                             true))\n\n        playerKnights.forEach(a => recordKnightMoves(a, arrPlayerStalemate, playerSquaresRender))\n\n        playerBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerBishops.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(blackBishopMoves, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerQueens.forEach(a => checkArrays(rookMoves.current, \n                                               a, \n                                               arrPlayerStalemate, \n                                               playerSquaresRender, \n                                               enemySquaresRender, \n                                               true, \n                                               true))\n\n        playerPawns.forEach(a => recordPlayerPawnMoves(a, null, arrPlayerStalemate))\n\n        recordPlayerKingMoves(playerKing, arrPlayerStalemate)\n\n        enemyRooks.forEach(a => checkArrays(rookMoves.current, \n                                            a, \n                                            arrEnemyStalemate, \n                                            enemySquaresRender, \n                                            playerSquaresRender, \n                                            true, \n                                            true))\n\n        enemyKnights.forEach(a => recordKnightMoves(a, arrEnemyStalemate, enemySquaresRender))\n\n        enemyBishops.forEach(a => checkArrays(whiteBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyBishops.forEach(a => checkArrays(blackBishopMoves, \n                                              a, \n                                              arrEnemyStalemate, \n                                              enemySquaresRender, \n                                              playerSquaresRender, \n                                              true, \n                                              true))\n\n        enemyQueens.forEach(a => checkArrays(whiteBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender,\n                                              playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(blackBishopMoves, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyQueens.forEach(a => checkArrays(rookMoves.current, \n                                             a, \n                                             arrEnemyStalemate, \n                                             enemySquaresRender, \n                                             playerSquaresRender, \n                                             true, \n                                             true))\n\n        enemyPawns.forEach(a => recordOpponentPawnMoves(a, null, arrEnemyStalemate))\n\n        recordEnemyKingMoves(enemyKing, arrEnemyStalemate)\n\n        arrPlayerStalemate = arrPlayerStalemate.filter(a => a > 0 && a < 65)\n        arrEnemyStalemate = arrEnemyStalemate.filter(a => a > 0 && a < 65)\n\n        if ((arrPlayerStalemate.length === 0 && !playerKingAttacked) \n            || (arrEnemyStalemate.length === 0 && !enemyKingAttacked) \n            || occupiedSquaresRender.length === 2 \n            || halfMoveCounter === 50) {\n \n            if (sounds) {\n                gameEndSound.play()\n            }\n\n            store.dispatch({\n                type: \"gameEnd\"\n            })\n\n            store.dispatch({\n                type: \"modalOpen\",\n                payload: true\n            })\n\n            if (halfMoveCounter === 50) {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Draw due to 50 move rule.\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"endMessage\",\n                    payload: \"Game ended due to stalemate.\"\n                })\n            }\n        }\n\n        for (let i = 0; i < moves.length; i++) {\n            if (JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 4]) && \n                JSON.stringify(store.getState().progression.moves[i]) === JSON.stringify(store.getState().progression.moves[i + 8])) {\n                    if (sounds) {\n                        gameEndSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"gameEnd\"\n                    })\n\n                    store.dispatch({\n                        type: \"modalOpen\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"endMessage\",\n                        payload: \"Draw due to threefold repetition.\"\n                    })\n            }\n        }\n    }\n    \n    const animatePiece = (i, string, num1, num2) => {   \n        if (moves.length === 1 && sounds) {\n            gameEndSound.play()\n        } \n\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1 * -1, num2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [num1, num2]\n            })\n        }\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        if (/^o/.test(string)) {\n            if (playerSquaresRender.includes(i)){\n                if (playerPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (playerKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (playerBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (playerRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (playerQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainOpponent\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n                \n                if (enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^oh/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ob/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^or/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^oq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ok/.test(string) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (enemyKing8StarArr.current.flat().includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.includes(i) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n                    \n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^op/.test(string) && rookMoves.current[7].includes(i) && sandbox) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^op/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n                \n                if (checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByOpponentArr.current.flat().includes(playerKing)) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                    || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                    || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                          .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrPlayer\",\n                        payload: moves.length\n                    })\n                }\n                \n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n\n            if ((color === \"black\" && toMove === \"w\") || (color === \"white\" && toMove === \"b\")) {\n                store.dispatch({\n                    type: \"moveCounter\"\n                })\n            }\n\n            if (/^pp/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            } \n        }\n\n        if (/^p/.test(string)) {\n            if (enemySquaresRender.includes(i)) {\n                store.dispatch({\n                    type: \"halfMoveCounter/reset\",\n                })\n\n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                    \n                    checkingPiece.current = i\n                } \n\n                if (enemyPawns.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♙\"\n                    })  \n                }\n\n                if (enemyKnights.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♘\"\n                    })  \n                }\n\n                if (enemyBishops.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♗\"\n                    })  \n                }\n\n                if (enemyRooks.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♖\"\n                    })  \n                }\n\n                if (enemyQueens.includes(i)) {\n                    store.dispatch({\n                        type: \"pieceGainPlayer\",\n                        payload: \"♕\"\n                    })  \n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔x${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        captureSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    captureSound.play()\n                }\n            } else {\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: playerNewSquareForEngine.current\n                    })\n                }\n\n                if (/^ph/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♘${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pb/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♗${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pr/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♖${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pq/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♕${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pk/.test(string)) {\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: `♔${playerNewSquareForEngine.current}`\n                    })\n                }\n\n                if (/^pp/.test(string) && rookMoves.current[0].includes(i)) {\n                    setPawnPromotes(string)\n                }\n\n                if (/^pp/.test(string)) {\n                    store.dispatch({\n                        type: \"halfMoveCounter/reset\",\n                    })\n                } else {\n                    store.dispatch({\n                        type: \"halfMoveCounter/increase\",\n                    })\n                }\n\n                if (checkedByOpponentArr.current.includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (playerKing8StarArr.current.flat().includes(i) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n\n                if (/^pk/.test(string) && playerKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"playerKingAttacked\",\n                        payload: false\n                    })\n                }\n                \n                if (checkedByPlayerArr.current.flat().includes(enemyKing)) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n\n                    checkingPiece.current = i\n                } \n                \n                if (!checkedByPlayerArr.current.flat().includes(enemyKing) && enemyKingAttacked) {\n                    if (sounds) {\n                        moveSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: false\n                    })\n                } \n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                    || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                    || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                    && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                          .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                    if (sounds) {\n                        checkSound.play()\n                    }\n\n                    store.dispatch({\n                        type: \"enemyKingAttacked\",\n                        payload: true\n                    })\n\n                    store.dispatch({\n                        type: \"checkArrOpponent\",\n                        payload: moves.length\n                    })\n                }\n\n                if (sounds) {\n                    moveSound.play()\n                }\n            }\n\n            if (color === \"white\") {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n\n            if (/^op/.test(enPassantSquare.current[1])) {\n                enPassantSquare.current = [0, \"\"]\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n\n        checkedByOpponentArr.current = []\n        checkedByPlayerArr.current = []\n\n        \n    }  \n\n    const moveKnight = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case -17:\n                animatePiece(i, string, -80, -160)\n                break\n            case -15:\n                animatePiece(i, string, 80, -160)\n                break\n            case -10:\n                animatePiece(i, string, -160, -80)\n                break\n            case -6:\n                animatePiece(i, string, 160, -80)\n                break\n            case 6:\n                animatePiece(i, string, -160, 80)\n                break\n            case 10:\n                animatePiece(i, string, 160, 80)\n                break\n            case 15:\n                animatePiece(i, string, -80, 160)\n                break\n            case 17:\n                animatePiece(i, string, 80, 160)\n                break\n            default:\n                break\n        }   \n    }\n\n    const movePawn = (i, string) => {\n        if (i === enPassantSquare.current[0]) {\n            switch (pieceSquareForEngine.current - i) {\n                case -9:\n                    animateEnPassant(-80, -80, string, i)\n                    break\n                case -7:\n                    animateEnPassant(80, -80, string, i)\n                    break\n                case 7:\n                    animateEnPassant(-80, 80, string, i)\n                    break\n                case 9:\n                    animateEnPassant(80, 80, string, i)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                case 8:\n                    animatePiece(i, string, 0, 80)\n                    break\n                case 9:\n                    animatePiece(i, string, 80, 80)\n                    break\n                case 16:\n                    enPassantSquare.current = [i + 8, string]\n                    animatePiece(i, string, 0, 160)\n                    break\n                case -16: \n                    enPassantSquare.current = [i - 8, string]\n                    animatePiece(i, string, 0, -160)\n                    break\n                case -8: \n                    animatePiece(i, string, 0, -80)\n                    break\n                case -7: \n                    animatePiece(i, string, 80, -80)\n                    break\n                case -9: \n                    animatePiece(i, string, -80, -80)\n                    break\n                default:\n                    break\n            }\n        }\n    }\n\n    const moveBishop = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveRook = (i, string) => {\n        switch (pieceSquareForEngine.current - i) {\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case 7:\n                animatePiece(i, string, 560, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            case -7:\n                animatePiece(i, string, -560, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const moveQueen = (i, string) => {\n        if ((knightLimits.current[0].includes(pieceSquare) || knightLimits.current[3].includes(pieceSquare)) \n            && (knightLimits.current[0].includes(i) || knightLimits.current[3].includes(i))) {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, -560, 0)\n                    break\n                case 7:\n                    animatePiece(i, string, 560, 0)\n                    break\n                default:\n                    break\n            }\n        } else {\n            switch (pieceSquareForEngine.current - i) {\n                case -7:\n                    animatePiece(i, string, 80, -80)\n                    break\n                case 7:\n                    animatePiece(i, string, -80, 80)\n                    break\n                default:\n                    break\n            }\n        }\n        switch (pieceSquareForEngine.current - i) {                                                   \n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 18:\n                animatePiece(i, string, 160, 160)\n                break\n            case 27:\n                animatePiece(i, string, 240, 240)\n                break\n            case 36:\n                animatePiece(i, string, 320, 320)\n                break\n            case 45:\n                animatePiece(i, string, 400, 400)\n                break\n            case 54:\n                animatePiece(i, string, 480, 480)\n                break\n            case 63:\n                animatePiece(i, string, 560, 560)\n                break\n            case -9: \n                animatePiece(i, string, -80, -80)\n                break\n            case -18:\n                animatePiece(i, string, -160, -160)\n                break\n            case -27:\n                animatePiece(i, string, -240, -240)\n                break\n            case -36:\n                animatePiece(i, string, -320, -320)\n                break\n            case -45:\n                animatePiece(i, string, -400, -400)\n                break\n            case -54:\n                animatePiece(i, string, -480, -480)\n                break\n            case -63:\n                animatePiece(i, string, -560, -560)\n                break\n            case 14:\n                animatePiece(i, string, -160, 160)\n                break\n            case 21: \n                animatePiece(i, string, -240, 240)\n                break\n            case 28: \n                animatePiece(i, string, -320, 320)\n                break\n            case 35: \n                animatePiece(i, string, -400, 400)\n                break\n            case 42: \n                animatePiece(i, string, -480, 480)\n                break\n            case -14:\n                animatePiece(i, string, 160, -160)\n                break\n            case -21: \n                animatePiece(i, string, 240, -240)\n                break\n            case -28: \n                animatePiece(i, string, 320, -320)\n                break\n            case -35: \n                animatePiece(i, string, 400, -400)\n                break\n            case -42: \n                animatePiece(i, string, 480, -480)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 16:\n                animatePiece(i, string, 0, 160)\n                break\n            case 24:\n                animatePiece(i, string, 0, 240)\n                break\n            case 32:\n                animatePiece(i, string, 0, 320)\n                break\n            case 40:\n                animatePiece(i, string, 0, 400)\n                break\n            case 48:\n                animatePiece(i, string, 0, 480)\n                break\n            case 56:\n                animatePiece(i, string, 0, 560)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -16:\n                animatePiece(i, string, 0, -160)\n                break\n            case -24:\n                animatePiece(i, string, 0, -240)\n                break\n            case -32:\n                animatePiece(i, string, 0, -320)\n                break\n            case -40:\n                animatePiece(i, string, 0, -400)\n                break\n            case -48:\n                animatePiece(i, string, 0, -480)\n                break\n            case -56:\n                animatePiece(i, string, 0, -560)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case 2:\n                animatePiece(i, string, 160, 0)\n                break\n            case 3:\n                animatePiece(i, string, 240, 0)\n                break\n            case 4:\n                animatePiece(i, string, 320, 0)\n                break\n            case 5:\n                animatePiece(i, string, 400, 0)\n                break\n            case 6:\n                animatePiece(i, string, 480, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -2:\n                animatePiece(i, string, -160, 0)\n                break\n            case -3:\n                animatePiece(i, string, -240, 0)\n                break\n            case -4:\n                animatePiece(i, string, -320, 0)\n                break\n            case -5:\n                animatePiece(i, string, -400, 0)\n                break\n            case -6:\n                animatePiece(i, string, -480, 0)\n                break\n            default:\n                break\n        }\n    }\n\n    const animateCastling = (coor1, coor2, rookOldSq, newSqRook, rookToMove) => {\n        if (sounds) {\n           castlingSound.play()\n        }\n        \n        if (color === \"black\" && sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n            \n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 1\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook - 1\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook - 1\n            }\n        } else if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n\n            if (/or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq + 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook + 56\n                })\n            } else {\n                store.dispatch({\n                    type: \"oldSquare\",\n                    payload: rookOldSq - 56\n                })\n                store.dispatch({\n                    type: \"newSquare\",\n                    payload: newSqRook - 56\n                })\n            }\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook - 56\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook - 56\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook + 56\n            }\n            \n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook + 56\n            }\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n\n            store.dispatch({\n                type: \"oldSquare\",\n                payload: rookOldSq\n            })\n    \n            store.dispatch({\n                type: \"newSquare\",\n                payload: newSqRook\n            })\n\n            if (rookToMove === \"pr1\") {\n                playerRook1 = newSqRook\n            }\n\n            if (rookToMove === \"pr2\") {\n                playerRook2 = newSqRook\n            }\n\n            if (rookToMove === \"or1\") {\n                enemyRook1 = newSqRook\n            }\n\n            if (rookToMove === \"or2\") {\n                enemyRook2 = newSqRook\n            }\n        }\n\n        store.dispatch({\n            type: rookToMove\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        playerRooks = [playerRook1, \n                       playerRook2, \n                       playerRook3, \n                       playerRook4, \n                       playerRook5, \n                       playerRook6, \n                       playerRook7, \n                       playerRook8, \n                       playerRook9, \n                       playerRook01]\n        enemyRooks = [enemyRook1, \n                      enemyRook2, \n                      enemyRook3, \n                      enemyRook4, \n                      enemyRook5, \n                      enemyRook6, \n                      enemyRook7, \n                      enemyRook8, \n                      enemyRook9, \n                      enemyRook01]\n\n        recordBoard()\n\n        if (/^pr/.test(rookToMove)) {\n            if ((playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pr/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^or/.test(rookToMove)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const animateEnPassant = (coor1, coor2, string, i) => {\n        if (color === \"black\" && !sandbox) {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1 * -1, coor2 * -1]\n            })\n        } else {\n            store.dispatch({\n                type: \"setMoveVar\",\n                payload: [coor1, coor2]\n            })\n        }\n\n        let capturedPawn = i\n\n        if (/^pp/.test(string)) {\n            capturedPawn += 8\n        } else {\n            capturedPawn -= 8\n        }\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: string,\n            payload: \"takes\"\n        })\n\n        store.dispatch({\n            type: \"oldSquare\",\n            payload: capturedPawn\n        })\n\n        store.dispatch({\n            type: \"newSquare\",\n            payload: i\n        })\n\n        store.dispatch({\n            type: string\n        })\n\n        if ((color === \"white\" && toMove === \"w\") || (color === \"black\" && toMove === \"w\")) {\n            store.dispatch({\n                type: \"moveNumbers\"\n            })\n        }\n\n        recordBoard()\n\n        if (/^pp/.test(string)) {\n            store.dispatch({\n                type: \"notationArr\",\n                payload: `${board[string][1].slice(0, 1)}x${playerNewSquareForEngine.current}`\n            })\n            \n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[0].includes(a)) \n                || playerBishops.some(a => enemyKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n\n            if ((playerQueens.some(a => enemyKingSpiderSenseArr.current[1].includes(a)) \n                || playerRooks.some(a => enemyKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !playerSquaresLive.includes(a))\n                                      .every(a => !enemyKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"enemyKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrOpponent\",\n                    payload: moves.length\n                })\n            }\n        } else {\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[0].includes(a))\n                || enemyBishops.some(a => playerKingSpiderSenseArr.current[0].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                      .every(a => !playerKingSpiderSenseArr.current[0].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n\n            if ((enemyQueens.some(a => playerKingSpiderSenseArr.current[1].includes(a))\n                || enemyRooks.some(a => playerKingSpiderSenseArr.current[1].includes(a)))\n                && occupiedSquaresLive.filter(a => !enemySquaresLive.includes(a))\n                                    .every(a => !playerKingSpiderSenseArr.current[1].includes(a))) {\n                if (sounds) {\n                    checkSound.play()\n                }\n\n                store.dispatch({\n                    type: \"playerKingAttacked\",\n                    payload: true\n                })\n\n                store.dispatch({\n                    type: \"checkArrPlayer\",\n                    payload: moves.length\n                })\n            }\n        }\n\n        if (sounds) {\n            captureSound.play()\n        }\n\n        store.dispatch({\n            type:\"moveSquares\",\n            payload: []\n        })\n\n        store.dispatch({\n            type: \"pieceSquare\",\n            payload: null\n        })\n\n        if (color === \"white\") {\n            if (/^pp/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            }\n        } else {\n            if (/^op/.test(string)) {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"w\"\n                })\n            } else {\n                store.dispatch({\n                    type: \"toMove\",\n                    payload: \"b\"\n                })\n            }\n        }\n\n        store.dispatch({\n            type: \"recordMoves\",\n            payload: JSON.stringify(store.getState().board.board)\n        })\n    }\n\n    const moveKing = (i, string) => {\n        if (/^pk/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case -2:\n                    animateCastling(-160, 0, 64, 62, \"pr2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                case 2:\n                    animateCastling(160, 0, 57, 60, \"pr1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (/^ok/.test(string)) {\n            switch (pieceSquareForEngine.current - i) {\n                case 2:\n                    animateCastling(160, 0, 1, 4, \"or2\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O-O\"\n                    })\n                    break\n                case -2:\n                    animateCastling(-160, 0, 8, 6, \"or1\")\n                    store.dispatch({\n                        type: \"notationArr\",\n                        payload: \"O-O\"\n                    })\n                    break\n                default:\n                    break\n            }\n        }\n\n        switch (pieceSquareForEngine.current - i) {\n            case 9:\n                animatePiece(i, string, 80, 80)\n                break\n            case 8:\n                animatePiece(i, string, 0, 80)\n                break\n            case 7:\n                animatePiece(i, string, -80, 80)\n                break\n            case 1:\n                animatePiece(i, string, 80, 0)\n                break\n            case -1:\n                animatePiece(i, string, -80, 0)\n                break\n            case -7:\n                animatePiece(i, string, 80, -80)\n                break\n            case -8:\n                animatePiece(i, string, 0, -80)\n                break\n            case -9:\n                animatePiece(i, string, -80, -80)\n                break\n            default:\n                break\n        }\n    }\n\n    return (\n        <div>\n            {renderPieces()}\n            {renderMovement()}\n        </div>\n    )\n}\n\nexport default Pieces"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","stringToSend","enemyQueen1","enemyQueen2","enemyQueen3","enemyQueen4","enemyQueen5","enemyQueen6","enemyQueen7","enemyQueen8","enemyQueen9","useState","pawnPromotes","setPawnPromotes","activePiece","useSelector","board","castlingEnemyMoved","castlingPlayerMoved","enemyKingAttacked","gameEnd","halfMoveCounter","moveCounter","moveSquares","moveVar","pawnsFirstMove","pieceSquare","playerKingAttacked","toMove","checkArrPlayer","checkArrOpponent","sandbox","options","color","numbers","behavior","animations","sounds","moves","progression","currentMove","wasmSupported","WebAssembly","validate","Uint8Array","of","stockfish","useMemo","Worker","boardEntries","entries","filteredEnemyRender","filter","test","filteredEnemyLive","store","justEnemyRender","fromEntries","justEnemyLive","filteredPlayerRender","filteredPlayerLive","justPlayerRender","justPlayerLive","filteredOccupiedRender","filteredOccupiedLive","justOccupiedRender","justOccupiedLive","enemySquaresRender","map","a","playerSquaresRender","occupiedSquaresRender","enemySquaresLive","playerSquaresLive","occupiedSquaresLive","enPassantSquare","useRef","pieceSquareForEngine","pieceNewSquare","notInitialRender","checkingPiece","playerPiece","playerNewSquareForEngine","animationSpeed","engineData","moveSound","Audio","moveSoundFile","captureSound","captureSoundFile","castlingSound","castlingSoundFile","checkSound","checkSoundFile","gameEndSound","gameEndSoundFile","knightLimits","whiteBishopMoves","blackBishopMoves","rookMoves","enemyBishop1","ob1","enemyBishop2","ob2","enemyBishop3","ob3","enemyBishop4","ob4","enemyBishop5","ob5","enemyBishop6","ob6","enemyBishop7","ob7","enemyBishop8","ob8","enemyBishop9","ob9","enemyBishop01","ob01","enemyKnight1","oh1","enemyKnight2","oh2","enemyKnight3","oh3","enemyKnight4","oh4","enemyKnight5","oh5","enemyKnight6","oh6","enemyKnight7","oh7","enemyKnight8","oh8","enemyKnight9","oh9","enemyKnight01","oh01","enemyRook1","or1","enemyRook2","or2","enemyRook3","or3","enemyRook4","or4","enemyRook5","or5","enemyRook6","or6","enemyRook7","or7","enemyRook8","or8","enemyRook9","or9","enemyRook01","or01","oqb1","oqw1","oqb2","oqw2","oqb3","oqw3","oqb4","oqw4","oqb5","oqw5","oqb6","oqw6","oqb7","oqw7","oqb8","oqw8","oqb9","oqw9","playerQueen1","playerQueen2","playerQueen3","playerQueen4","playerQueen5","playerQueen6","playerQueen7","playerQueen8","playerQueen9","enemyKing","okw","okb","enemyPawn1","op1","enemyPawn2","op2","enemyPawn3","op3","enemyPawn4","op4","enemyPawn5","op5","enemyPawn6","op6","enemyPawn7","op7","enemyPawn8","op8","playerBishop1","pb1","playerBishop2","pb2","playerBishop3","pb3","playerBishop4","pb4","playerBishop5","pb5","playerBishop6","pb6","playerBishop7","pb7","playerBishop8","pb8","playerBishop9","pb9","playerBishop01","pb01","playerKnight1","ph1","playerKnight2","ph2","playerKnight3","ph3","playerKnight4","ph4","playerKnight5","ph5","playerKnight6","ph6","playerKnight7","ph7","playerKnight8","ph8","playerKnight9","ph9","playerKnight01","ph01","playerRook1","pr1","playerRook2","pr2","playerRook3","pr3","playerRook4","pr4","playerRook5","pr5","playerRook6","pr6","playerRook7","pr7","playerRook8","pr8","playerRook9","pr9","playerRook01","pr01","pqw1","pqb1","pqw2","pqb2","pqw3","pqb3","pqw4","pqb4","pqw5","pqb5","pqw6","pqb6","pqw7","pqb7","pqw8","pqb8","pqw9","pqb9","playerKing","pkw","pkb","playerPawn1","pp1","playerPawn2","pp2","playerPawn3","pp3","playerPawn4","pp4","playerPawn5","pp5","playerPawn6","pp6","playerPawn7","pp7","playerPawn8","pp8","checkedByPlayerArr","attackedByPlayerArr","attackedByOpponentArr","checkedByOpponentArr","playerHorseSafetyArr","enemyHorseSafetyArr","playerKing8StarArr","enemyKing8StarArr","protectedByPlayerArr","protectedByOpponentArr","playerKing8StarXrayArr","enemyKing8StarXrayArr","playerKingSpiderSenseArr","enemyKingSpiderSenseArr","pawnKingArrPlayer","pawnKingArrOpponent","playerRooks","playerKnights","playerBishops","playerQueens","playerPawns","enemyRooks","enemyKnights","enemyBishops","enemyQueens","enemyPawns","useEffect","recordBoard","payload","JSON","stringify","postMessage","checkGameEnd","current","movePiece","setTimeout","resetPiece","clearTimeout","engineTurn","addEventListener","data","listener","engineOldSquare","engineNewSquare","enginePieceToMove","flat","enginePieceSquare","engineWhereToMove","recordOpponentPawnAttacks","split","promotePawn","updateStateBoard","movePawn","checkArrays","moveBishop","recordKnightMoves","moveKnight","moveRook","moveQueen","moveKing","kingSpiderSense","args","arguments","apply","attacked","king8Star","some","includes","encode","string","fen","arr","fenEncode","fenArrays","j","fenString","temp","reducedArr","elem","join","customReducer","pk","ok","combThroughSubArrayPlus","index","subArr","arrResult","ownArr","oppArr","exclude","Math","max","combThroughSubArrayMinus","min","ownSquares","oppSquares","arrRes","boolean","king","rooks","knights","bishops","queens","pawns","protect","pawn","arrPawn","recordPlayerPawnAttacks","pieceToPromoteTo","play","arrayChecked","exclude1","exclude2","arr2","k","arrMoves","excArr","number","arrTech","recordPlayerPawnMoves","piece","recordOpponentPawnMoves","recordPlayerKingMoves","recordEnemyKingAttacks","x","recordEnemyKingMoves","recordPlayerKingAttacks","onSquareClick","oldSquare","arrPlayerCheckmate","arrEnemyCheckmate","arrPlayerStalemate","arrEnemyStalemate","animatePiece","num1","num2","every","animateEnPassant","animateCastling","coor1","coor2","rookOldSq","newSqRook","rookToMove","capturedPawn","renderEachPiece","src1","src2","alt1","alt2","src","alt","className","style","transform","transition","height","renderRoyals","renderPlayerPromotion","display","whiteQueen","blackQueen","onClick","whiteRook","blackRook","whiteBishop","blackBishop","whiteKnight","blackKnight","renderOpponentPromotion","renderEntries","whiteKing","blackKing","blackPawn","whitePawn","parse","renderPieces","renderMovement"],"sourceRoot":""}