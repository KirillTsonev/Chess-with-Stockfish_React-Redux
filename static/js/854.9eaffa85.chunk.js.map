{"version":3,"file":"static/js/854.9eaffa85.chunk.js","mappings":"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","sources":["components/progression/Progression.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useSelector } from \"react-redux\"\r\nimport { useRef, useEffect, useState } from \"react\"\r\n\r\nimport firstDark from \"../../icons/first-dark.png\"\r\nimport prevDark from \"../../icons/prev-dark.png\"\r\nimport nextDark from \"../../icons/next-dark.png\"\r\nimport lastDark from \"../../icons/last-dark.png\"\r\nimport resignDark from \"../../icons/resign-dark.png\"\r\nimport firstLight from \"../../icons/first-light.png\"\r\nimport prevLight from \"../../icons/prev-light.png\"\r\nimport nextLight from \"../../icons/next-light.png\"\r\nimport lastLight from \"../../icons/last-light.png\"\r\nimport resignLight from \"../../icons/resign-light.png\"\r\nimport cancel from \"../../icons/x.png\"\r\n\r\nimport store from \"../redux/store\"\r\n\r\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\r\n\r\nimport \"./progression.sass\"\r\n\r\nconst Progression = () => {\r\n    const [playerMinutes, setPlayerMinutes] = useState(0)\r\n    const [playerSeconds, setPlayerSeconds] = useState(\"00\")\r\n    const [playerMiliseconds, setPlayerMiliseconds] = useState(\"0\")\r\n    const [opponentMinutes, setOpponentMinutes] = useState(0)\r\n    const [opponentSeconds, setOpponentSeconds] = useState(\"00\")\r\n    const [opponentMiliseconds, setOpponentMiliseconds] = useState(\"0\")\r\n    const [resignConfirm, setResignConfirm] = useState(false)\r\n\r\n    const gameEnd = useSelector(state => state.board.gameEnd)\r\n\r\n    const color = useSelector(state => state.options.color)\r\n    const time = useSelector(state => state.options.time)\r\n    const increment = useSelector(state => state.options.increment)\r\n\r\n    const milliseconds = useSelector(state => state.behavior.milliseconds)\r\n    const darkTheme = useSelector(state => state.behavior.darkTheme)\r\n\r\n    const moves = useSelector(state => state.progression.moves)\r\n    const moveNumbers = useSelector(state => state.progression.moveNumbers)\r\n    const currentMove = useSelector(state => state.progression.currentMove)\r\n    const notationArr = useSelector(state => state.progression.notationArr)\r\n    const pieceGainPlayer = useSelector(state => state.progression.pieceGainPlayer)\r\n    const pieceGainOpponent = useSelector(state => state.progression.pieceGainOpponent)\r\n \r\n    const bottomRef = useRef(null)\r\n    const elapsedPlayer = useRef(0)\r\n    const elapsedOpponent = useRef(0)\r\n    const counter = useRef(0)\r\n\r\n    const gameEndSound = new Audio(gameEndSoundFile)\r\n\r\n    useEffect(() => {\r\n        bottomRef.current?.scrollIntoView({\r\n            behavior: \"smooth\"\r\n        })\r\n\r\n        if (moves.length > 1) {\r\n            playerTimer(time)\r\n        }\r\n\r\n        counter.current = moves.length - 1\r\n    }, [moves])\r\n\r\n    useEffect(() => {\r\n        if ((color === \"white\" && store.getState().board.toMove === \"b\") \r\n            || (color === \"black\" && store.getState().board.toMove === \"w\")) {\r\n            elapsedPlayer.current -= increment\r\n        }\r\n\r\n        if ((color === \"white\" && store.getState().board.toMove === \"w\") \r\n            || (color === \"black\" && store.getState().board.toMove === \"b\")) {\r\n            elapsedOpponent.current -= increment\r\n        }\r\n    }, [store.getState().board.toMove])\r\n\r\n    useEffect(() => {\r\n        let startingTime = time / 1000 / 60\r\n        setPlayerMinutes(getZero(startingTime))\r\n        setOpponentMinutes(getZero(startingTime))\r\n    }, [time]);\r\n\r\n    function getZero(num){\r\n        if (num >= 0 && num < 10) { \r\n            return '0' + num\r\n        } else {\r\n            return num\r\n        }\r\n    }\r\n\r\n    const onMoveClick = (i) => {\r\n        if (i + 1 === moves.length) {\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: null\r\n            })\r\n            counter.current = moves.length - 1\r\n        } else {\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: i\r\n            })\r\n            counter.current = i\r\n        }\r\n    }\r\n\r\n    const playerTimer = (deadline) => {\r\n        function getTimeRemaining(endtime, elapsed) {\r\n            const t = endtime - elapsed\r\n            const minutes = Math.floor((t / 1000 / 60) % 60)\r\n            const seconds = Math.floor((t / 1000) % 60)\r\n            const miliseconds = Math.floor((t / 10) % 100) / 10\r\n\r\n            if (t <= 0) {\r\n                return {\r\n                    \"total\": 0,\r\n                    \"minutes\": 0,\r\n                    \"seconds\": 0,\r\n                    \"miliseconds\": 0\r\n                }\r\n            } else {\r\n                return {\r\n                    \"total\": t,\r\n                    \"minutes\": minutes,\r\n                    \"seconds\": seconds,\r\n                    \"miliseconds\": miliseconds\r\n                }\r\n            }\r\n        }\r\n    \r\n        const timePlayerInterval = setInterval(updatePlayerClock, 100)\r\n\r\n        function updatePlayerClock() {\r\n            const tPlayer = getTimeRemaining(deadline, elapsedPlayer.current)\r\n            \r\n            setPlayerMinutes(getZero(tPlayer.minutes))\r\n            setPlayerSeconds(getZero(tPlayer.seconds))\r\n            setPlayerMiliseconds(tPlayer.miliseconds)\r\n\r\n            if ((color === \"white\" && store.getState().board.toMove === \"w\") \r\n                || (color === \"black\" && store.getState().board.toMove === \"b\")) {\r\n                elapsedPlayer.current += 100\r\n            }\r\n            \r\n            if (tPlayer.total <= 0 \r\n                || (color === \"white\" && store.getState().board.toMove === \"b\") \r\n                || (color === \"black\" && store.getState().board.toMove === \"w\") \r\n                || store.getState().board.gameEnd) {\r\n                clearInterval(timePlayerInterval)\r\n            }\r\n        }\r\n\r\n        const timeOpponentInterval = setInterval(updateOpponentClock, 100)\r\n\r\n        function updateOpponentClock() {\r\n            const tOpponent = getTimeRemaining(deadline, elapsedOpponent.current)\r\n\r\n            setOpponentMinutes(getZero(tOpponent.minutes))\r\n            setOpponentSeconds(getZero(tOpponent.seconds))\r\n            setOpponentMiliseconds(tOpponent.miliseconds)\r\n\r\n            if ((color === \"white\" && store.getState().board.toMove === \"b\") \r\n                || (color === \"black\" && store.getState().board.toMove === \"w\")) {\r\n                elapsedOpponent.current += 100\r\n            }\r\n            \r\n            if (tOpponent.total <= 0 \r\n                || (color === \"white\" && store.getState().board.toMove === \"w\") \r\n                || (color === \"black\" && store.getState().board.toMove === \"b\") \r\n                || store.getState().board.gameEnd) {\r\n                clearInterval(timeOpponentInterval)\r\n            }\r\n        }\r\n\r\n        updateOpponentClock()\r\n        updatePlayerClock()\r\n    }\r\n\r\n    const onFirstClick = () => {\r\n        store.dispatch({\r\n            type: \"currentMove\",\r\n            payload: \"0\"\r\n        })\r\n\r\n        counter.current = 0\r\n    }\r\n\r\n    const onPrevClick = () => {\r\n        if (counter.current > 1) {\r\n            counter.current--\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: counter.current\r\n            })\r\n        } else {\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: \"0\"\r\n            })\r\n        }\r\n    }\r\n\r\n    const onNextClick = () => {\r\n        if (counter.current < moves.length - 1) {\r\n            counter.current++\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: counter.current\r\n            })\r\n        } else {\r\n            store.dispatch({\r\n                type: \"currentMove\",\r\n                payload: null\r\n            })\r\n        }\r\n    }\r\n\r\n    const onLastClick = () => {\r\n        store.dispatch({\r\n            type: \"currentMove\",\r\n            payload: null\r\n        })\r\n\r\n        counter.current = moves.length - 1\r\n    }\r\n\r\n    const onResignConfirm = () => {\r\n        store.dispatch({\r\n            type: \"gameEnd\"\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"modalOpen\",\r\n            payload: true\r\n        })\r\n\r\n        store.dispatch({\r\n            type: \"endMessage\",\r\n            payload: \"You've resigned.\"\r\n        })\r\n\r\n        gameEndSound.play()\r\n\r\n        setResignConfirm(false)\r\n    }\r\n\r\n    const onNewGame = () => {\r\n        store.dispatch({\r\n            type: \"newGame\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={`${darkTheme ? \"bg-darker\" : null} progression`}>\r\n            <div className=\"progression__pieceGain\">\r\n                {pieceGainOpponent.sort().reverse().join(\"\")}\r\n            </div>\r\n\r\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} progression__timer`}>\r\n                {opponentMinutes}:{opponentSeconds}\r\n\r\n                <span style={milliseconds ? {display: \"inline\"} : {display: \"none\"}}>:{opponentMiliseconds}</span>\r\n            </div>\r\n\r\n            <div className=\"progression__moves\">\r\n                <div className=\"progression__moves__numbers\">\r\n                    {moveNumbers.slice(1).map(a => \r\n                        <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} \r\n                                         progression__moves__numbers-body`}>{a - 1}</div>)}\r\n                </div>\r\n\r\n                <div className=\"progression__moves__grid\">\r\n                    {moves.slice(1).map((a, i) => \r\n                        <div className={`${((i === currentMove - 1) || (i + 2 === moves.length && !currentMove)) && darkTheme \r\n                                            ? \"activeMoveDark\" \r\n                                            : null}\r\n                                         ${((i === currentMove - 1) || (i + 2 === moves.length && !currentMove)) && !darkTheme \r\n                                            ? \"activeMoveLight\" \r\n                                            : null} \r\n                                         progression__moves__grid-item`} \r\n                            onClick={() => onMoveClick(i + 1)}\r\n                            ref={(i + 2 === moves.length && !currentMove) ? bottomRef : null}>{notationArr[i]}</div>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} progression__timer`}>\r\n                {playerMinutes}:{playerSeconds}\r\n\r\n                <span style={milliseconds ? {display: \"inline\"} : {display: \"none\"}}>:{playerMiliseconds}</span>\r\n            </div>\r\n\r\n            <div className=\"progression__pieceGain\">\r\n                {pieceGainPlayer.sort().reverse().join(\"\")}\r\n            </div>\r\n\r\n            <div className=\"progression__buttons\">\r\n                <img src={darkTheme ? firstDark : firstLight} \r\n                        alt=\"First\" \r\n                        className=\"progression__buttons-button\" \r\n                        onClick={() => onFirstClick()}/>\r\n\r\n                <img src={darkTheme ? prevDark : prevLight} \r\n                        alt=\"Previous\" \r\n                        className=\"progression__buttons-button\" \r\n                        onClick={() => onPrevClick()}/>\r\n\r\n                <img src={darkTheme ? nextDark : nextLight} \r\n                        alt=\"Next\" \r\n                        className=\"progression__buttons-button\" \r\n                        onClick={() => onNextClick()}/>\r\n\r\n                <img src={darkTheme ? lastDark : lastLight} \r\n                        alt=\"Last\" \r\n                        className=\"progression__buttons-button\" \r\n                        onClick={() => onLastClick()}/>\r\n            </div>\r\n\r\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"}  progression__resign`}\r\n                    style={resignConfirm \r\n                            || gameEnd \r\n                            || moves.length === 1 \r\n                            ? {display: \"none\"} \r\n                            : {display: \"block\"}}\r\n                    onClick={() => setResignConfirm(true)}\r\n                    title=\"Resign\">\r\n                <img src={darkTheme ? resignDark : resignLight} \r\n                        alt=\"Resign\" \r\n                        className=\"progression__resign-img\"/>\r\n            </div>\r\n\r\n            <div className=\"progression__resign__confirm\">\r\n                <div className=\"progression__resign__confirm-btn\" \r\n                        style={resignConfirm ? {display: \"block\"} : {display: \"none\"}}\r\n                        title=\"Resign\"\r\n                        onClick={() => onResignConfirm()}>\r\n                    <img src={darkTheme ? resignDark : resignLight} \r\n                            alt=\"Resign\" \r\n                            className=\"progression__resign-img\"/>\r\n                </div>\r\n\r\n                <img src={cancel} \r\n                        alt=\"Cancel\" \r\n                        style={resignConfirm ? {display: \"block\"} : {display: \"none\"}} \r\n                        className=\"progression__resign__confirm-cancel\"\r\n                        onClick={() => setResignConfirm(false)}\r\n                        title=\"Cancel\"/>\r\n            </div>\r\n\r\n            <div className=\"progression__new\"\r\n                    style={gameEnd && moves.length > 1 ? {display: \"block\"} : {display: \"none\"}}\r\n                    onClick={() => onNewGame()}>New Game</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Progression"],"names":["useState","playerMinutes","setPlayerMinutes","playerSeconds","setPlayerSeconds","playerMiliseconds","setPlayerMiliseconds","opponentMinutes","setOpponentMinutes","opponentSeconds","setOpponentSeconds","opponentMiliseconds","setOpponentMiliseconds","resignConfirm","setResignConfirm","gameEnd","useSelector","state","board","color","options","time","increment","milliseconds","behavior","darkTheme","moves","progression","moveNumbers","currentMove","notationArr","pieceGainPlayer","pieceGainOpponent","bottomRef","useRef","elapsedPlayer","elapsedOpponent","counter","gameEndSound","Audio","gameEndSoundFile","getZero","num","useEffect","current","scrollIntoView","length","playerTimer","store","toMove","startingTime","deadline","getTimeRemaining","endtime","elapsed","t","minutes","Math","floor","seconds","miliseconds","timePlayerInterval","setInterval","updatePlayerClock","tPlayer","total","clearInterval","timeOpponentInterval","updateOpponentClock","tOpponent","className","sort","reverse","join","style","display","slice","map","a","i","onClick","type","payload","onMoveClick","ref","src","firstDark","firstLight","alt","prevDark","prevLight","nextDark","nextLight","lastDark","lastLight","title","resignDark","resignLight","play","cancel"],"sourceRoot":""}