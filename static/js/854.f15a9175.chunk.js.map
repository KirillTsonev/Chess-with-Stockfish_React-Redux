{"version":3,"file":"static/js/854.f15a9175.chunk.js","mappings":"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","sources":["components/progression/Progression.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useSelector } from \"react-redux\"\nimport { useRef, useEffect, useState } from \"react\"\n\nimport firstDark from \"../../icons/first-dark.png\"\nimport prevDark from \"../../icons/prev-dark.png\"\nimport nextDark from \"../../icons/next-dark.png\"\nimport lastDark from \"../../icons/last-dark.png\"\nimport resignDark from \"../../icons/resign-dark.png\"\nimport firstLight from \"../../icons/first-light.png\"\nimport prevLight from \"../../icons/prev-light.png\"\nimport nextLight from \"../../icons/next-light.png\"\nimport lastLight from \"../../icons/last-light.png\"\nimport resignLight from \"../../icons/resign-light.png\"\nimport cancel from \"../../icons/x.png\"\n\nimport store from \"../redux/store\"\n\nimport gameEndSoundFile from \"../../sounds/gameEnd.ogg\"\n\nimport \"./progression.sass\"\n\nconst Progression = () => {\n    const [playerMinutes, setPlayerMinutes] = useState(0)\n    const [playerSeconds, setPlayerSeconds] = useState(\"00\")\n    const [playerMiliseconds, setPlayerMiliseconds] = useState(\"0\")\n    const [opponentMinutes, setOpponentMinutes] = useState(0)\n    const [opponentSeconds, setOpponentSeconds] = useState(\"00\")\n    const [opponentMiliseconds, setOpponentMiliseconds] = useState(\"0\")\n    const [resignConfirm, setResignConfirm] = useState(false)\n\n    const gameEnd = useSelector(state => state.board.gameEnd)\n\n    const color = useSelector(state => state.options.color)\n    const time = useSelector(state => state.options.time)\n    const increment = useSelector(state => state.options.increment)\n\n    const milliseconds = useSelector(state => state.behavior.milliseconds)\n    const darkTheme = useSelector(state => state.behavior.darkTheme)\n\n    const moves = useSelector(state => state.progression.moves)\n    const moveNumbers = useSelector(state => state.progression.moveNumbers)\n    const currentMove = useSelector(state => state.progression.currentMove)\n    const notationArr = useSelector(state => state.progression.notationArr)\n    const pieceGainPlayer = useSelector(state => state.progression.pieceGainPlayer)\n    const pieceGainOpponent = useSelector(state => state.progression.pieceGainOpponent)\n \n    const bottomRef = useRef(null)\n    const elapsedPlayer = useRef(0)\n    const elapsedOpponent = useRef(0)\n    const counter = useRef(0)\n\n    const gameEndSound = new Audio(gameEndSoundFile)\n\n    useEffect(() => {\n        bottomRef.current?.scrollIntoView({\n            behavior: \"smooth\"\n        })\n\n        if (moves.length > 1) {\n            playerTimer(time)\n        }\n\n        counter.current = moves.length - 1\n    }, [moves])\n\n    useEffect(() => {\n        if ((color === \"white\" && store.getState().board.toMove === \"b\") \n            || (color === \"black\" && store.getState().board.toMove === \"w\")) {\n            elapsedPlayer.current -= increment\n        }\n\n        if ((color === \"white\" && store.getState().board.toMove === \"w\") \n            || (color === \"black\" && store.getState().board.toMove === \"b\")) {\n            elapsedOpponent.current -= increment\n        }\n    }, [store.getState().board.toMove])\n\n    useEffect(() => {\n        let startingTime = time / 1000 / 60\n        setPlayerMinutes(getZero(startingTime))\n        setOpponentMinutes(getZero(startingTime))\n    }, [time]);\n\n    function getZero(num){\n        if (num >= 0 && num < 10) { \n            return '0' + num\n        } else {\n            return num\n        }\n    }\n\n    const onMoveClick = (i) => {\n        if (i + 1 === moves.length) {\n            store.dispatch({\n                type: \"currentMove\",\n                payload: null\n            })\n\n            counter.current = moves.length - 1\n        } else {\n            store.dispatch({\n                type: \"currentMove\",\n                payload: i\n            })\n\n            counter.current = i\n        }\n    }\n\n    const playerTimer = (deadline) => {\n        function getTimeRemaining(endtime, elapsed) {\n            const t = endtime - elapsed\n            const minutes = Math.floor((t / 1000 / 60) % 60)\n            const seconds = Math.floor((t / 1000) % 60)\n            const miliseconds = Math.floor((t / 10) % 100) / 10\n\n            if (t <= 0) {\n                return {\n                    \"total\": 0,\n                    \"minutes\": 0,\n                    \"seconds\": 0,\n                    \"miliseconds\": 0\n                }\n            } else {\n                return {\n                    \"total\": t,\n                    \"minutes\": minutes,\n                    \"seconds\": seconds,\n                    \"miliseconds\": miliseconds\n                }\n            }\n        }\n    \n        const timePlayerInterval = setInterval(updatePlayerClock, 100)\n\n        function updatePlayerClock() {\n            const tPlayer = getTimeRemaining(deadline, elapsedPlayer.current)\n            \n            setPlayerMinutes(getZero(tPlayer.minutes))\n            setPlayerSeconds(getZero(tPlayer.seconds))\n            setPlayerMiliseconds(tPlayer.miliseconds)\n\n            if ((color === \"white\" && store.getState().board.toMove === \"w\") \n                || (color === \"black\" && store.getState().board.toMove === \"b\")) {\n                elapsedPlayer.current += 100\n            }\n            \n            if (tPlayer.total <= 0 \n                || (color === \"white\" && store.getState().board.toMove === \"b\") \n                || (color === \"black\" && store.getState().board.toMove === \"w\") \n                || store.getState().board.gameEnd) {\n                clearInterval(timePlayerInterval)\n            }\n        }\n\n        const timeOpponentInterval = setInterval(updateOpponentClock, 100)\n\n        function updateOpponentClock() {\n            const tOpponent = getTimeRemaining(deadline, elapsedOpponent.current)\n\n            setOpponentMinutes(getZero(tOpponent.minutes))\n            setOpponentSeconds(getZero(tOpponent.seconds))\n            setOpponentMiliseconds(tOpponent.miliseconds)\n\n            if ((color === \"white\" && store.getState().board.toMove === \"b\") \n                || (color === \"black\" && store.getState().board.toMove === \"w\")) {\n                elapsedOpponent.current += 100\n            }\n            \n            if (tOpponent.total <= 0 \n                || (color === \"white\" && store.getState().board.toMove === \"w\") \n                || (color === \"black\" && store.getState().board.toMove === \"b\") \n                || store.getState().board.gameEnd) {\n                clearInterval(timeOpponentInterval)\n            }\n        }\n\n        updateOpponentClock()\n        updatePlayerClock()\n    }\n\n    const onFirstClick = () => {\n        store.dispatch({\n            type: \"currentMove\",\n            payload: \"0\"\n        })\n\n        counter.current = 0\n    }\n\n    const onPrevClick = () => {\n        if (counter.current > 1) {\n            counter.current--\n\n            store.dispatch({\n                type: \"currentMove\",\n                payload: counter.current\n            })\n        } else {\n            store.dispatch({\n                type: \"currentMove\",\n                payload: \"0\"\n            })\n\n            counter.current = 0\n        }\n    }\n\n    const onNextClick = () => {\n        if (counter.current < moves.length - 2) {\n            counter.current++\n            \n            store.dispatch({\n                type: \"currentMove\",\n                payload: counter.current\n            })\n        } else {\n            store.dispatch({\n                type: \"currentMove\",\n                payload: null\n            })\n        }\n    }\n\n    const onLastClick = () => {\n        store.dispatch({\n            type: \"currentMove\",\n            payload: null\n        })\n\n        counter.current = moves.length - 1\n    }\n\n    const onResignConfirm = () => {\n        store.dispatch({\n            type: \"gameEnd\"\n        })\n\n        store.dispatch({\n            type: \"modalOpen\",\n            payload: true\n        })\n\n        store.dispatch({\n            type: \"endMessage\",\n            payload: \"You've resigned.\"\n        })\n\n        gameEndSound.play()\n\n        setResignConfirm(false)\n    }\n\n    const onNewGame = () => {\n        store.dispatch({\n            type: \"newGame\"\n        })\n    }\n\n    return (\n        <div className={`${darkTheme ? \"bg-darker\" : null} progression`}>\n            <div className=\"progression__pieceGain\">\n                {pieceGainOpponent.sort().reverse().join(\"\")}\n            </div>\n\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} progression__timer`}>\n                {opponentMinutes}:{opponentSeconds}\n\n                <span style={milliseconds ? {display: \"inline\"} : {display: \"none\"}}>:{opponentMiliseconds}</span>\n            </div>\n\n            <div className=\"progression__moves\">\n                <div className=\"progression__moves__numbers\">\n                    {moveNumbers.slice(1).map((a, i) => \n                        <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} \n                                         progression__moves__numbers-body`}\n                             key={i * 100 + \"e\"}>{a - 1}</div>)}\n                </div>\n\n                <div className=\"progression__moves__grid\">\n                    {moves.slice(1).map((a, i) => \n                        <div className={`${((i === currentMove - 1) || (i + 2 === moves.length && !currentMove)) && darkTheme \n                                            ? \"activeMoveDark\" \n                                            : null}\n                                         ${((i === currentMove - 1) || (i + 2 === moves.length && !currentMove)) && !darkTheme \n                                            ? \"activeMoveLight\" \n                                            : null} \n                                         progression__moves__grid-item`} \n                            onClick={() => onMoveClick(i + 1)}\n                            ref={(i + 2 === moves.length && !currentMove) ? bottomRef : null}\n                            key={i * 100 + \"d\"}>{notationArr[i]}</div>)}\n                </div>\n            </div>\n\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"} progression__timer`}>\n                {playerMinutes}:{playerSeconds}\n\n                <span style={milliseconds ? {display: \"inline\"} : {display: \"none\"}}>:{playerMiliseconds}</span>\n            </div>\n\n            <div className=\"progression__pieceGain\">\n                {pieceGainPlayer.sort().reverse().join(\"\")}\n            </div>\n\n            <div className=\"progression__buttons\">\n                <img src={darkTheme ? firstDark : firstLight} \n                        alt=\"First\" \n                        className=\"progression__buttons-button\" \n                        onClick={() => onFirstClick()}/>\n\n                <img src={darkTheme ? prevDark : prevLight} \n                        alt=\"Previous\" \n                        className=\"progression__buttons-button\" \n                        onClick={() => onPrevClick()}/>\n\n                <img src={darkTheme ? nextDark : nextLight} \n                        alt=\"Next\" \n                        className=\"progression__buttons-button\" \n                        onClick={() => onNextClick()}/>\n\n                <img src={darkTheme ? lastDark : lastLight} \n                        alt=\"Last\" \n                        className=\"progression__buttons-button\" \n                        onClick={() => onLastClick()}/>\n            </div>\n\n            <div className={`${darkTheme ? \"bg-dark\" : \"bg-light\"}  progression__resign`}\n                    style={resignConfirm \n                            || gameEnd \n                            || moves.length === 1 \n                            ? {display: \"none\"} \n                            : {display: \"block\"}}\n                    onClick={() => setResignConfirm(true)}\n                    title=\"Resign\">\n                <img src={darkTheme ? resignDark : resignLight} \n                        alt=\"Resign\" \n                        className=\"progression__resign-img\"/>\n            </div>\n\n            <div className=\"progression__resign__confirm\">\n                <div className=\"progression__resign__confirm-btn\" \n                        style={resignConfirm ? {display: \"block\"} : {display: \"none\"}}\n                        title=\"Resign\"\n                        onClick={() => onResignConfirm()}>\n                    <img src={darkTheme ? resignDark : resignLight} \n                            alt=\"Resign\" \n                            className=\"progression__resign-img\"/>\n                </div>\n\n                <img src={cancel} \n                        alt=\"Cancel\" \n                        style={resignConfirm ? {display: \"block\"} : {display: \"none\"}} \n                        className=\"progression__resign__confirm-cancel\"\n                        onClick={() => setResignConfirm(false)}\n                        title=\"Cancel\"/>\n            </div>\n\n            <div className=\"progression__new\"\n                    style={gameEnd && moves.length > 1 ? {display: \"block\"} : {display: \"none\"}}\n                    onClick={() => onNewGame()}>New Game</div>\n        </div>\n    )\n}\n\nexport default Progression"],"names":["useState","playerMinutes","setPlayerMinutes","playerSeconds","setPlayerSeconds","playerMiliseconds","setPlayerMiliseconds","opponentMinutes","setOpponentMinutes","opponentSeconds","setOpponentSeconds","opponentMiliseconds","setOpponentMiliseconds","resignConfirm","setResignConfirm","gameEnd","useSelector","state","board","color","options","time","increment","milliseconds","behavior","darkTheme","moves","progression","moveNumbers","currentMove","notationArr","pieceGainPlayer","pieceGainOpponent","bottomRef","useRef","elapsedPlayer","elapsedOpponent","counter","gameEndSound","Audio","gameEndSoundFile","getZero","num","useEffect","current","scrollIntoView","length","playerTimer","store","toMove","startingTime","deadline","getTimeRemaining","endtime","elapsed","t","minutes","Math","floor","seconds","miliseconds","timePlayerInterval","setInterval","updatePlayerClock","tPlayer","total","clearInterval","timeOpponentInterval","updateOpponentClock","tOpponent","className","sort","reverse","join","style","display","slice","map","a","i","onClick","type","payload","onMoveClick","ref","src","firstDark","firstLight","alt","prevDark","prevLight","nextDark","nextLight","lastDark","lastLight","title","resignDark","resignLight","play","cancel"],"sourceRoot":""}